#!/bin/bash




. functions.d/askify
. functions.d/chattrify
. functions.d/msgify
. functions.d/shflags/src/shflags




# -----------------------------------------------------------------------------
# config
# -----------------------------------------------------------------------------

# constants
VERSION="0.9.1"
VERSION_DOTFILES="0.8.0"
VERSION_PKGBUILDS="0.1.0"
VERSION_ELECTRUM="2.0.3"

# machine
_partition_default="/dev/sda"
_processor_default="other"
_graphics_default="intel"
_disk_default="hdd"
_luks_name_default="lux"
_luks_pass_default="secret"
_host_name_default="luxor"
_root_pass_default="secret"
_user_name_default="guru"
_user_pass_default="secret"

# dotfiles
_name_default="Andy Weidenbaum"
_email_default="archbaum@gmail.com"
_github_default="atweiden"
_zipcode_default="97210"

# machine's locale # af_ZA (Afrikaans)
                   # ar_AE (Arabic - UAE)
                   # ar_IN (Arabic - India)
                   # ca_ES (Catalan)
                   # cs_CZ (Czech)
                   # da_DK (Danish)
                   # de_DE (German)
                   # en_AU (English - Australia)
                   # en_CA (English - Canada)
                   # en_GB (English - UK)
                   # en_HK (English - HK)
                   # en_NZ (English - New Zealand)
                   # en_US (English - US)
                   # es_AR (Spanish - Argentina)
                   # es_CL (Spanish - Chile)
                   # es_CO (Spanish - Colombia)
                   # es_ES (Spanish - Spain)
                   # es_MX (Spanish - Mexico)
                   # es_PR (Spanish - Puerto Rico)
                   # es_US (Spanish - US)
                   # fa_IR (Farsi)
                   # fi_FI (Finnish)
                   # fr_FR (French)
                   # ga_IE (Irish)
                   # ha_NG (Hausa)
                   # he_IL (Hebrew)
                   # hi_IN (Hindi)
                   # hr_HR (Croatian)
                   # hu_HU (Hungarian)
                   # id_ID (Indonesian)
                   # is_IS (Icelandic)
                   # it_IT (Italian)
                   # ja_JP (Japanese)
                   # km_KH (Khmer)
                   # ko_KR (Korean)
                   # ks_IN (Kashmiri - India)
                   # lg_UG (Ganda)
                   # lt_LT (Lithuanian)
                   # ml_IN (Malayalam - India)
                   # ne_NP (Nepali)
                   # nl_BE (Dutch - Belgium)
                   # nl_NL (Dutch - Netherlands)
                   # nn_NO (Norwegian Nynorsk)
                   # pa_IN (Panjabi - India)
                   # pa_PK (Panjabi - Pakistan)
                   # ph_PH (Filipino)
                   # pl_PL (Polish)
                   # pt_BR (Portuguese - Brazil)
                   # pt_PT (Portuguese - Portugal)
                   # ro_RO (Romanian)
                   # ru_RU (Russian)
                   # sa_IN (Sanskrit - India)
                   # sd_IN (Sindhi)
                   # si_LK (Sinhala)
                   # so_KE (Somali)
                   # sv_SE (Swedish)
                   # ta_IN (Tamil)
                   # th_TH (Thai)
                   # tr_TR (Turkish)
                   # uk_UA (Ukrainian)
                   # ur_IN (Urdu - India)
                   # ur_PK (Urdu - Pakistan)
                   # vi_VN (Vietnamese)
                   # zh_CN (Chinese - Simplified)
                   # zh_TW (Chinese - Traditional)
                   # zu_ZA (Zulu)
                   # etc...
_locale_default="en_US"

# machine's keymap # cz    (Czech)
                   # de    (German)
                   # dk    (Danish)
                   # es    (Spanish)
                   # fi    (Finnish)
                   # fr    (French)
                   # it    (Italian)
                   # jp106 (Japanese)
                   # lt    (Lithuanian)
                   # nl    (Dutch)
                   # no    (Norwegian)
                   # pl    (Polish)
                   # ro    (Romanian)
                   # ru    (Russian)
                   # uk    (English - UK)
                   # us    (English - US)
                   # etc...
_keymap_default="us"

# machine's time zone # Africa/Johannesburg  (SAST)
                      # Africa/Lagos         (WAT)
                      # Africa/Lusaka        (CAT)
                      # Africa/Nairobi       (EAT)
                      # America/Denver       (MST)
                      # America/Indianapolis (CST)
                      # America/Los_Angeles  (PST)
                      # America/New_York     (EST)
                      # Asia/Calcutta        (IST)
                      # Asia/Hong_Kong       (HKT)
                      # Asia/Istanbul        (EET)
                      # Asia/Karachi         (PKT)
                      # Asia/Kathmandu       (NPT)
                      # Asia/Phnom_Penh      (ICT)
                      # Asia/Seoul           (KT)
                      # Asia/Shanghai        (CT)
                      # Asia/Tokyo           (JT)
                      # Australia/Perth      (WST)
                      # Australia/Sydney     (EST)
                      # Europe/Berlin        (CET)
                      # Europe/London        (GMT/BST)
                      # Pacific/Honolulu     (HST)
                      # etc...
_timezone_default="America/Los_Angeles"

# ssh access
_hosts_allowed_default="192.168.0."
_electrum_pubkey_default="https://raw.githubusercontent.com/atweiden/dotfiles/master/_ssh/id_secp256k1.pub"
_user_pubkey_default="https://raw.githubusercontent.com/atweiden/dotfiles/master/_ssh/id_ed25519.pub"
_user_pubkey_sig_default="https://raw.githubusercontent.com/atweiden/dotfiles/master/_ssh/id_ed25519.pub.sig"

# cli
DEFINE_boolean 'interactive' false 'interactive mode'                  'i'
DEFINE_boolean 'concealed'   false 'hidden interactive password input' 'c'
DEFINE_string  'partition'    ''   'partition in which to install OS'  'P'
DEFINE_string  'processor'    ''   'processor'                         'C'
DEFINE_string  'graphics'     ''   'graphics card'                     'G'
DEFINE_string  'disk'         ''   'hard drive type'                   'D'
DEFINE_string  'locale'       ''   'locale'                            'A'
DEFINE_string  'keymap'       ''   'keymap'                            'M'
DEFINE_string  'timezone'     ''   'timezone'                          'T'
DEFINE_string  'luksname'     ''   'LUKS encrypted volume name'        'l'
DEFINE_string  'lukspass'     ''   'LUKS encrypted volume password'    'L'
DEFINE_string  'hostname'     ''   'Hostname'                          'H'
DEFINE_string  'rootpass'     ''   'Root user password'                'R'
DEFINE_string  'username'     ''   'User name'                         'u'
DEFINE_string  'userpass'     ''   'User password'                     'U'
DEFINE_string  'select'       ''   'select pkgs  [gui, python, etc]'   't'
DEFINE_string  'bundle'       ''   'bundled pkgs [full, lite, base]'   'b'
DEFINE_boolean 'ssh'         false 'enable ssh access'                 's'
DEFINE_string  'hostsallowed' ''   'hosts allowed to connect over ssh' 'a'
DEFINE_string  'electrum'     ''   'link to Electrum pubkey'           'E'
DEFINE_string  'pubkey'       ''   'link to user pubkey'               'K'
DEFINE_string  'pubkeysig'    ''   'link to user pubkey signature'     'S'
DEFINE_boolean 'dotfiles'    false 'install dotfiles'                  'd'
DEFINE_string  'name'         ''   'Github personal name'              'n'
DEFINE_string  'email'        ''   'Github email'                      'e'
DEFINE_string  'github'       ''   'Github account name'               'g'
DEFINE_string  'zipcode'      ''   'f.lux display temperature zipcode' 'z'
DEFINE_boolean 'verbose'     false 'verbose output'                    'V'

FLAGS_HELP=`cat <<EOF
commands:
  start: start pacstrapit (requires root)
  version: show program version
EOF`

FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"

function printversion() {
echo "${bold}${white}PacstrapIt!${normal} ${bold}${green}v${VERSION}${normal} ${bold}${gray}(${normal}${gray}$(uname -o) $(uname -m)${normal}${bold}${gray})${normal}"
  exit 1
}

function die() {
  if [[ "$#" > '0' ]]; then echo "${bold}${red}error:${normal} $@" >&2; fi
  flags_help
  exit 1
}

# select on/off
if [[ "${FLAGS_select}" -eq "${FLAGS_TRUE}" || -n "$SELECT" || "$FLAGS_bundle" -eq "${FLAGS_TRUE}" || -n "$BUNDLE" ]]; then
  _select=1
else
  # set to 1 to explicitly enable selectifying without the use of cmdline
  # flags or environment variables
  _select=0
fi

# ssh on/off
if [[ "${FLAGS_ssh}" -eq "${FLAGS_TRUE}" || -n "$SSH" ]]; then
  _ssh=1
else
  # set to 1 to explicitly enable sshifying without the use of cmdline
  # flags or environment variables
  _ssh=0
fi

# dotfiles on/off
if [[ "${FLAGS_dotfiles}" -eq "${FLAGS_TRUE}" || -n "$DOTFILES" ]]; then
  _dotfiles=1
else
  # set to 1 to explicitly enable dotifying without the use of cmdline
  # flags or environment variables
  _dotfiles=0
fi

# verbose on/off
if [[ "${FLAGS_verbose}" -eq "${FLAGS_TRUE}" || -n "$VERBOSE" ]]; then
  _verbose=1
else
  # set to 1 to explicitly enable verbose output without the use of
  # cmdline flags or environment variables
  _verbose=0
fi

# colors
normal=$(tput sgr0)
bold=$(tput bold)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
teal=$(tput setaf 6)
white=$(tput setaf 7)
gray=$(tput setaf 8)




# -----------------------------------------------------------------------------
# checkify: dependency checks
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                        echo "**************"
                        echo "*  --------  *"
                        echo "* |checkify| *"
                        echo "*  --------  *"
                        echo "**************"
                                  fi


function checkify() {

msg "Resolving dependencies..."

# depends: root

                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*               *"
                       echo "* depends: root *"
                       echo "*               *"
                       echo "*****************"
                                  fi

if ! [[ "$UID" == '0' ]]; then die 'root priviledges required'; fi

# depends: pacman.conf

                   if [[ "$_debug" == '1' ]]; then
                   echo "************************"
                   echo "*                      *"
                   echo "* depends: pacman.conf *"
                   echo "*                      *"
                   echo "************************"
                                  fi

status "Configuring pacman.conf..."
sed -i '/^CheckSpace.*/a ILoveCandy'           /etc/pacman.conf
sed -i 's!^#Color!Color!'                      /etc/pacman.conf
sed -i 's!^#TotalDownload!TotalDownload!'      /etc/pacman.conf
if [[ "$(uname -m)" == 'x86_64' ]]; then
  echo '[multilib]'                         >> /etc/pacman.conf
  echo 'Include = /etc/pacman.d/mirrorlist' >> /etc/pacman.conf
fi
sed -i "/^\\[extra\\].*/i [haskell-core]\n" /etc/pacman.conf
sed -i "/^\\[haskell-core\\].*/i #https://wiki.archlinux.org/index.php/ArchHaskell" /etc/pacman.conf
sed -i "/^\\[haskell-core\\].*/a #Server = http://www.kiwilight.com/haskell/core/\$arch" /etc/pacman.conf
sed -i "/^\\[haskell-core\\].*/a Server = http://xsounds.org/~haskell/core/\$arch" /etc/pacman.conf

# depends: pacman-key --init

                   if [[ "$_debug" == '1' ]]; then
                echo "******************************"
                echo "*                            *"
                echo "* depends: pacman-key --init *"
                echo "*                            *"
                echo "******************************"
                                  fi

status "Initializing pacman-keys..."
haveged -w 1024
pacman-key --init
pacman-key --populate archlinux
pacman-key -r 0x32B0B4534209170B # https://wiki.archlinux.org/index.php/ArchHaskell#.5Bhaskell-core.5D
pacman-key --lsign-key 0x32B0B4534209170B
pkill haveged

# depends: rankmirrors / reflector for https-only mirrors

                        if [[ "$_debug" == '1' ]]; then
                   echo "***********************************"
                   echo "*                                 *"
                   echo "* depends: rankmirrors/ reflector *"
                   echo "*                                 *"
                   echo "***********************************"
                                       fi

if ! [[ -x /usr/bin/reflector ]]; then
  status "Depends pkg: reflector"
  pacman -Sy reflector --noconfirm
fi

status "Ranking mirrors..."
substatus "This can take up to 20 minutes"
mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
reflector -p https > /etc/pacman.d/mirrorlist.https
rankmirrors -n 8 /etc/pacman.d/mirrorlist.https > /etc/pacman.d/mirrorlist

# depends: arch-install-scripts

                   if [[ "$_debug" == '1' ]]; then
               echo "*********************************"
               echo "*                               *"
               echo "* depends: arch-install-scripts *"
               echo "*                               *"
               echo "*********************************"
                                  fi

if ! [[ -x /usr/bin/arch-chroot ]]; then
  status "Depends pkg: arch-install-scripts"
  pacman -Sy arch-install-scripts --noconfirm
fi

# depends: gptfdisk

                   if [[ "$_debug" == '1' ]]; then
                     echo "*********************"
                     echo "*                   *"
                     echo "* depends: gptfdisk *"
                     echo "*                   *"
                     echo "*********************"
                                  fi

if ! [[ -x /usr/bin/gdisk ]]; then
  status "Depends pkg: gptfdisk"
  pacman -Sy gptfdisk --noconfirm
fi

# depends: btrfs-progs

                   if [[ "$_debug" == '1' ]]; then
                   echo "************************"
                   echo "*                      *"
                   echo "* depends: btrfs-progs *"
                   echo "*                      *"
                   echo "************************"
                                  fi

if ! [[ -x /usr/bin/mkfs.btrfs ]]; then
  status "Depends pkg: btrfs-progs"
  pacman -Sy btrfs-progs --noconfirm
fi

# depends: tput

                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*               *"
                       echo "* depends: tput *"
                       echo "*               *"
                       echo "*****************"
                                  fi

if ! [[ -x /usr/bin/tput ]]; then
  status "Depends pkg: ncurses"
  pacman -Sy ncurses --noconfirm
fi

# depends: expect

                   if [[ "$_debug" == '1' ]]; then
                      echo "*******************"
                      echo "*                 *"
                      echo "* depends: expect *"
                      echo "*                 *"
                      echo "*******************"
                                  fi

if ! [[ -x /usr/bin/expect ]]; then
  status "Depends pkg: expect"
  pacman -Sy expect --noconfirm
fi

# depends: iptables

                   if [[ "$_debug" == '1' ]]; then
                     echo "*********************"
                     echo "*                   *"
                     echo "* depends: iptables *"
                     echo "*                   *"
                     echo "*********************"
                                  fi

if ! [[ -x /usr/bin/iptables ]]; then
  status "Depends pkg: iptables"
  pacman -Sy iptables --noconfirm
fi

# depends: base-devel

                   if [[ "$_debug" == '1' ]]; then
                    echo "***********************"
                    echo "*                     *"
                    echo "* depends: base-devel *"
                    echo "*                     *"
                    echo "***********************"
                                  fi

status "Depends pkg: base-devel"
pacman -Sy --force --needed base-devel --noconfirm

# setting font for convenience

                   if [[ "$_debug" == '1' ]]; then
                       echo "****************"
                       echo "*              *"
                       echo "* setting font *"
                       echo "*              *"
                       echo "****************"
                                  fi

status "Setting font..."
setfont Lat2-Terminus16
}




# -----------------------------------------------------------------------------
# gdiskify: create three GPT partitions for btrfs (no swap)
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                        echo "**************"
                        echo "*  --------  *"
                        echo "* |gdiskify| *"
                        echo "*  --------  *"
                        echo "**************"
                                  fi


function gdiskify() {

# configure partition in which to install OS

                   if [[ "$_debug" == '1' ]]; then
                     echo "*********************"
                     echo "*                   *"
                     echo "* config: partition *"
                     echo "*                   *"
                     echo "*********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring partition..."

declare _block_devices=($(lsblk | awk '{print $1}' | tail -n+2 | tr -cd '[:alnum:] \n' | sed 's#\(^.*\)#/dev/\1#' | grep -E 'sd|hd|xvd' | tr -d '[:digit:]' | uniq))
if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  while true; do
    msg      "Available block device numbers"
    echo; for i in "${!_block_devices[@]}"; do echo "       ${bold}${teal}${i}${normal}: ${_block_devices[${i}]}"; done; echo
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Select a block device number for partitioning:${normal}"; read -p ' ' _block_device_number
    echo     "${bold}${blue}::${normal} ${bold}${white}You chose${normal} ${bold}${teal}${_block_devices[${_block_device_number}]}${normal}"
    echo     "${bold}${yellow}::${normal} ${bold}${white}Data in${normal}   ${bold}${teal}${_block_devices[${_block_device_number}]}${normal} ${bold}${red}WILL BE DESTROYED${normal}."
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Type in${normal}   ${bold}${teal}${_block_devices[${_block_device_number}]}${normal} ${bold}${white}to continue:${normal}"; read -p ' ' _partition_confirm
    if [[    "${_block_devices[${_block_device_number}]}" == "$_partition_confirm" ]]; then break; fi
    echo     "${bold}${yellow}::${normal} Please try again"
  done
  _partition="${_block_devices[${_block_device_number}]}"
elif [[ -n   "$FLAGS_partition" ]]; then
  msg        "Reading partition from cmdline flag..."
  _partition="$FLAGS_partition"
elif [[ -n   "$PARTITION" ]]; then
  msg        "Reading partition from environment variable..."
  _partition="$PARTITION"
else
  msg        "Using default partition..."
  _partition="$_partition_default"
fi

# partition disks

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* spawning gdisk *"
                      echo "*                *"
                      echo "******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Partitioning disks..."

expect <<EOF
  spawn gdisk ${_partition}
  expect "Command*" {
    send "o\r"
  }
  expect "Proceed*" {
    send "Y\r"
  }
  expect "Command*" {
    send "n\r"
  }
  expect "Partition number*" {
    send "1\r"
  }
  expect "First sector*" {
    send "\r"
  }
  expect "Last sector*" {
    send "+2M\r"
  }
  expect "Hex code or GUID*" {
    send "EF02\r"
  }
  expect "Command*" {
    send "n\r"
  }
  expect "Partition number*" {
    send "2\r"
  }
  expect "First sector*" {
    send "\r"
  }
  expect "Last sector*" {
    send "+128M\r"
  }
  expect "Hex code or GUID*" {
    send "8300\r"
  }
  expect "Command*" {
    send "n\r"
  }
  expect "Partition number*" {
    send "3\r"
  }
  expect "First sector*" {
    send "\r"
  }
  expect "Last sector*" {
    send "\r"
  }
  expect "Hex code or GUID*" {
    send "8300\r"
  }
  expect "Command*" {
    send "w\r"
  }
  expect "Do you want to proceed*" {
    send "Y\r"
  }
  expect eof
EOF
}




# -----------------------------------------------------------------------------
# luksify: create btrfs on luks system with unencrypted /boot
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                         echo "*************"
                         echo "*  -------  *"
                         echo "* |luksify| *"
                         echo "*  -------  *"
                         echo "*************"
                                  fi


function luksify() {

# configure machine's luks devmapper name

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: luksname *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring luks volume name..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n    "${bold}${blue}::${normal} ${bold}${white}Enter LUKS devmapper name${normal} ${bold}${white}[${normal}$_luks_name_default${bold}${white}]${normal}:"; read -p ' ' _luks_name
  _luks_name="${_luks_name:-$_luks_name_default}"
elif [[ -n   "$FLAGS_luksname" ]]; then
  msg        "Reading LUKS devmapper name from cmdline flag..."
  _luks_name="$FLAGS_luksname"
elif [[ -n   "$LUKS_NAME" ]]; then
  msg        "Reading LUKS devmapper name from environment variable..."
  _luks_name="$LUKS_NAME"
else
  msg        "Using default LUKS devmapper name..."
  _luks_name="$_luks_name_default"
fi

# configure machine's luks passphrase

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: lukspass *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring luks passphrase..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" || "${FLAGS_concealed}" -eq "${FLAGS_TRUE}" ]]; then
  while true; do
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Enter passphrase for LUKS encrypted volume:${normal}"; read -s -p ' ' _luks_pass
    echo
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Verify passphrase:${normal}"; read -s -p ' ' _luks_pass_confirm
    echo
    if [[    "$_luks_pass" == "$_luks_pass_confirm" && -n "$_luks_pass" ]]; then break; fi
    if [[ -z "$_luks_pass" ]]; then
      echo   "${bold}${yellow}::${normal} LUKS passphrase cannot be blank. Please try again"
    else
      echo   "${bold}${yellow}::${normal} Please try again"
    fi
  done
elif [[ -n   "$FLAGS_lukspass" ]]; then
  msg        "Reading LUKS encrypted volume passphrase from cmdline flag..."
  _luks_pass="$FLAGS_lukspass"
elif [[ -n   "$LUKS_PASS" ]]; then
  msg        "Reading LUKS encrypted volume passphrase from environment variable..."
  _luks_pass="$LUKS_PASS"
else
  msg        "Using default LUKS encrypted volume passphrase..."
  _luks_pass="$_luks_pass_default"
fi

# create unencrypted ext2 filesystem for /boot

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* mkfs.ext2 boot *"
                      echo "*                *"
                      echo "******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Making ext2 boot partition..."

mkfs.ext2 ${_partition}2

# load kernel modules required for luks

                   if [[ "$_debug" == '1' ]]; then
                      echo "*******************"
                      echo "*                 *"
                      echo "* dm_mod dm-crypt *"
                      echo "*                 *"
                      echo "*******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Loading kernel modules..."

modprobe dm_mod dm-crypt

# create luks root partition

                   if [[ "$_debug" == '1' ]]; then
              echo "**********************************"
              echo "*                                *"
              echo "* spawning cryptsetup luksFormat *"
              echo "*                                *"
              echo "**********************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Encrypting ${_partition}3..."

expect <<EOF
  spawn cryptsetup --cipher aes-xts-plain64 \
                   --key-size 512           \
                   --hash sha512            \
                   --iter-time 5000         \
                   --use-random             \
                   --verify-passphrase      \
                   luksFormat ${_partition}3
  expect "Are you sure*" {
    send "YES\r"
  }
  expect "Enter*" {
    send "${_luks_pass}\r"
  }
  expect "Verify*" {
    send "${_luks_pass}\r"
  }
  expect eof
EOF

# open luks root partition

                   if [[ "$_debug" == '1' ]]; then
               echo "********************************"
               echo "*                              *"
               echo "* spawning cryptsetup luksOpen *"
               echo "*                              *"
               echo "********************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Opening ${_partition}3..."

expect <<EOF
  spawn cryptsetup luksOpen ${_partition}3 ${_luks_name}
  expect "Enter*" {
    send "${_luks_pass}\r"
  }
  expect eof
EOF

# create btrfs filesystem

                   if [[ "$_debug" == '1' ]]; then
               echo "*********************************"
               echo "*                               *"
               echo "* mkfs.btrfs devmapper luksroot *"
               echo "*                               *"
               echo "*********************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Putting btrfs on LUKS encrypted ${_partition}3..."

mkfs.btrfs /dev/mapper/${_luks_name}

# create and mount main btrfs subvolumes

                   if [[ "$_debug" == '1' ]]; then
           echo "****************************************"
           echo "*                                      *"
           echo "* mounting devmapper luksroot in /mnt2 *"
           echo "*                                      *"
           echo "****************************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Mounting btrfs on LUKS encrypted ${_partition}3..."

mkdir -p /mnt2
mount -t btrfs -o rw,noatime,nodiratime,compress=lzo,space_cache /dev/mapper/${_luks_name} /mnt2

                   if [[ "$_debug" == '1' ]]; then
            echo "**************************************"
            echo "*                                    *"
            echo "* creating btrfs subvolumes in /mnt2 *"
            echo "*                                    *"
            echo "**************************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Creating btrfs subvolumes..."

pushd /mnt2
btrfs subvolume create @
btrfs subvolume create @home
btrfs subvolume create @opt
btrfs subvolume create @srv
btrfs subvolume create @tmp
btrfs subvolume create @usr
btrfs subvolume create @var
popd

                   if [[ "$_debug" == '1' ]]; then
             echo "*************************************"
             echo "*                                   *"
             echo "* mounting btrfs subvolumes in /mnt *"
             echo "*                                   *"
             echo "*************************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Mounting btrfs subvolumes..."

mount -t btrfs -o rw,noatime,nodiratime,compress=lzo,space_cache,subvol=@ /dev/mapper/${_luks_name} /mnt
for _btrfs_dir in home opt srv tmp usr var; do
  mkdir -p /mnt/${_btrfs_dir} && mount -t btrfs -o rw,noatime,nodiratime,compress=lzo,space_cache,subvol=@${_btrfs_dir} /dev/mapper/${_luks_name} /mnt/${_btrfs_dir}
done

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* unmounting /mnt2 *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Cleaning up..."

umount /mnt2 && rmdir /mnt2 --ignore-fail-on-non-empty

                   if [[ "$_debug" == '1' ]]; then
         echo "*********************************************"
         echo "*                                           *"
         echo "* mounting ext2 boot partition in /mnt/boot *"
         echo "*                                           *"
         echo "*********************************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Mounting boot partition..."

mkdir -p /mnt/boot && mount ${_partition}2 /mnt/boot
}




# -----------------------------------------------------------------------------
# pacstrapify: initialize and configure system
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*  -----------  *"
                       echo "* |pacstrapify| *"
                       echo "*  -----------  *"
                       echo "*****************"
                                  fi


function pacstrapify() {

# configure machine's processor

                   if [[ "$_debug" == '1' ]]; then
                     echo "*********************"
                     echo "*                   *"
                     echo "* config: processor *"
                     echo "*                   *"
                     echo "*********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring processor..."

declare _processors=('intel' 'other')
if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  while true; do
    msg      "Available processors"
    echo; for i in "${!_processors[@]}"; do echo "       ${bold}${teal}${i}${normal}: ${_processors[${i}]}"; done; echo
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Select a processor number:${normal}"; read -p ' ' _processor_number
    echo     "${bold}${blue}::${normal} ${bold}${white}You chose${normal} ${bold}${teal}${_processors[${_processor_number}]}${normal}"
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Type in${normal}   ${bold}${teal}${_processors[${_processor_number}]}${normal} ${bold}${white}to continue:${normal}"; read -p ' ' _processor_confirm
    if [[    "${_processors[${_processor_number}]}" == "$_processor_confirm" ]]; then break; fi
    echo     "${bold}${yellow}::${normal} Please try again"
  done
  _processor="${_processors[${_processor_number}]}"
elif [[ -n   "$FLAGS_processor" ]]; then
  msg        "Reading processor from cmdline flag..."
  _processor="$FLAGS_processor"
elif [[ -n   "$PROCESSOR" ]]; then
  msg        "Reading processor from environment variable..."
  _processor="$PROCESSOR"
else
  msg        "Using default processor..."
  _processor="$_processor_default"
fi

# configure machine's graphics card

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: graphics *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring graphics card..."

declare _gpus=('intel' 'nvidia' 'radeon')
if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  while true; do
    msg     "Available graphics cards"
    echo; for i in "${!_gpus[@]}"; do echo "       ${bold}${teal}${i}${normal}: ${_gpus[${i}]}"; done; echo
    echo -n "${bold}${blue}::${normal} ${bold}${white}Select a graphics card number:${normal}"; read -p ' ' _gpu_number
    echo    "${bold}${blue}::${normal} ${bold}${white}You chose${normal} ${bold}${teal}${_gpus[${_gpu_number}]}${normal}"
    echo -n "${bold}${blue}::${normal} ${bold}${white}Type in${normal}   ${bold}${teal}${_gpus[${_gpu_number}]}${normal} ${bold}${white}to continue:${normal}"; read -p ' ' _graphics_confirm
    if [[   "${_gpus[${_gpu_number}]}" == "$_graphics_confirm" ]]; then break; fi
    echo    "${bold}${yellow}::${normal} Please try again"
  done
  _graphics="${_processors[${_processor_number}]}"
elif [[ -n  "$FLAGS_graphics" ]]; then
  msg       "Reading graphics card from cmdline flag..."
  _graphics="$FLAGS_graphics"
elif [[ -n  "$GRAPHICS" ]]; then
  msg       "Reading graphics card from environment variable..."
  _graphics="$GRAPHICS"
else
  msg       "Using default graphics card..."
  _graphics="$_graphics_default"
fi

# configure machine's hard drive

                   if [[ "$_debug" == '1' ]]; then
                       echo "****************"
                       echo "*              *"
                       echo "* config: disk *"
                       echo "*              *"
                       echo "****************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring hard drive type..."

declare _disks=('hdd' 'ssd' 'usb')
if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  while true; do
    msg      "Available hard drive targets"
    echo; for i in "${!_disks[@]}"; do echo "       ${bold}${teal}${i}${normal}: ${_disks[${i}]}"; done; echo
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Select a hard drive target number:${normal}"; read -p ' ' _disk_number
    echo     "${bold}${blue}::${normal} ${bold}${white}You chose${normal} ${bold}${teal}${_disks[${_disk_number}]}${normal}"
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Type in${normal}   ${bold}${teal}${_disks[${_disk_number}]}${normal} ${bold}${white}to continue:${normal}"; read -p ' ' _disk_confirm
    if [[    "${_disks[${_disk_number}]}" == "$_disk_confirm" ]]; then break; fi
    echo     "${bold}${yellow}::${normal} Please try again"
  done
  _disk="${_disks[${_disk_number}]}"
elif [[ -n   "$FLAGS_disk" ]]; then
  msg        "Reading hard drive target from cmdline flag..."
  _disk="$FLAGS_disk"
elif [[ -n   "$DISK" ]]; then
  msg        "Reading hard drive target from environment variable..."
  _disk="$DISK"
else
  msg        "Using default hard drive target..."
  _disk="$_disk_default"
fi

# pacstrap packages

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* pacstrap *"
                         echo "*          *"
                         echo "************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Bootstrapping initial chroot with pacstrap..."

pacstrap /mnt abs                  \
              arch-install-scripts \
              base                 \
              base-devel           \
              bash-completion      \
              btrfs-progs          \
              ca-certificates      \
              cronie               \
              dhclient             \
              dialog               \
              dnscrypt-proxy       \
              ed                   \
              ethtool              \
              expect               \
              gptfdisk             \
              grub-bios            \
              haveged              \
              iproute2             \
              iptables             \
              iw                   \
              kbd                  \
              kexec-tools          \
              net-tools            \
              openresolv           \
              openssh              \
              python2              \
              reflector            \
              rsync                \
              sshpass              \
              systemd-swap         \
              tmux                 \
              unzip                \
              wget                 \
              wireless_tools       \
              wpa_actiond          \
              wpa_supplicant       \
              zip                  \
              zramctl              \
              zsh

# https://www.archlinux.org/news/changes-to-intel-microcodeupdates/

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* intel-ucode *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Enabling Intel microcode updates..."

[[ "${_processor}" == 'intel' ]] && pacstrap /mnt intel-ucode

# configure root password

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: rootpass *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring root password..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" || "${FLAGS_concealed}" -eq "${FLAGS_TRUE}" ]]; then
  while true; do
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Enter new UNIX password (root):${normal}"; read -s -p ' ' _root_pass
    echo
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Retype new UNIX password (root):${normal}"; read -s -p ' ' _root_pass_confirm
    echo
    if [[    "$_root_pass" == "$_root_pass_confirm" && -n "$_root_pass" ]]; then break; fi
    if [[ -z "$_root_pass" ]]; then
      echo   "${bold}${yellow}::${normal} Root password cannot be blank. Please try again"
    else
      echo   "${bold}${yellow}::${normal} Please try again"
    fi
  done
elif [[ -n   "$FLAGS_rootpass" ]]; then
  msg        "Reading root password from cmdline flag..."
  _root_pass="$FLAGS_rootpass"
elif [[ -n   "$ROOT_PASS" ]]; then
  msg        "Reading root password from environment variable..."
  _root_pass="$ROOT_PASS"
else
  msg        "Using default root password..."
  _root_pass="$_root_pass_default"
fi

# set root password

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* root passwd *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Applying root password..."

arch-chroot /mnt expect <<EOF
  spawn passwd root
  expect "Enter*" {
    send "${_root_pass}\r"
  }
  expect "Retype*" {
    send "${_root_pass}\r"
  }
  expect eof
EOF

# configure user name

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: username *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring username..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n    "${bold}${blue}::${normal} ${bold}${white}Enter user name${normal} ${bold}${white}[${normal}$_user_name_default${bold}${white}]${normal}:"; read -p ' ' _user_name
  _user_name="${_user_name:-$_user_name_default}"
elif [[ -n   "$FLAGS_username" ]]; then
  msg        "Reading user name from cmdline flag..."
  _user_name="$FLAGS_username"
elif [[ -n   "$USER_NAME" ]]; then
  msg        "Reading user name from environment variable..."
  _user_name="$USER_NAME"
else
  msg        "Using default user name..."
  _user_name="$_user_name_default"
fi

# create user

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* create user *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Creating user ${_user_name}..."

arch-chroot /mnt useradd -m -g users -G audio,games,log,lp,network,optical,power,scanner,storage,video,wheel -s /bin/bash ${_user_name}

# configure user password

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: userpass *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring password for user ${_user_name}..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" || "${FLAGS_concealed}" -eq "${FLAGS_TRUE}" ]]; then
  while true; do
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Enter new UNIX password (user):${normal}"; read -s -p ' ' _user_pass
    echo
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Retype new UNIX password (user):${normal}"; read -s -p ' ' _user_pass_confirm
    echo
    if [[    "$_user_pass" == "$_user_pass_confirm" && -n "$_user_pass" ]]; then break; fi
    if [[ -z "$_user_pass" ]]; then
      echo   "${bold}${yellow}::${normal} User password cannot be blank. Please try again"
    else
      echo   "${bold}${yellow}::${normal} Please try again"
    fi
  done
elif [[ -n   "$FLAGS_userpass" ]]; then
  msg        "Reading user password from cmdline flag..."
  _user_pass="$FLAGS_userpass"
elif [[ -n   "$USER_PASS" ]]; then
  msg        "Reading user password from environment variable..."
  _user_pass="$USER_PASS"
else
  msg        "Using default user password..."
  _user_pass="$_user_pass_default"
fi

# set user password

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* user passwd *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Applying password for user ${_user_name}..."

arch-chroot /mnt expect <<EOF
  spawn passwd ${_user_name}
  expect "Enter*" {
    send "${_user_pass}\r"
  }
  expect "Retype*" {
    send "${_user_pass}\r"
  }
  expect eof
EOF

# configure sudo

                   if [[ "$_debug" == '1' ]]; then
                           echo "********"
                           echo "*      *"
                           echo "* sudo *"
                           echo "*      *"
                           echo "********"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Giving user ${_user_name} sudo powers..."

cat >> /mnt/etc/sudoers <<EOF
${_user_name} ALL=(ALL) ALL
${_user_name} ALL=(ALL) NOPASSWD: /usr/bin/loadkeys
${_user_name} ALL=(ALL) NOPASSWD: /usr/bin/pacman
${_user_name} ALL=(ALL) NOPASSWD: /usr/bin/pacmatic
${_user_name} ALL=(ALL) NOPASSWD: /usr/bin/reboot
${_user_name} ALL=(ALL) NOPASSWD: /usr/bin/shutdown
${_user_name} ALL=(ALL) NOPASSWD: /usr/bin/wifi-menu
EOF

# install a bootloader

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* genfstab *"
                         echo "*          *"
                         echo "************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Generating /etc/fstab..."

genfstab -U -p /mnt >> /mnt/etc/fstab

# configure machine's hostname

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: hostname *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring hostname..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n    "${bold}${blue}::${normal} ${bold}${white}Enter hostname for machine${normal} ${bold}${white}[${normal}$_host_name_default${bold}${white}]${normal}:"; read -p ' ' _host_name
  _host_name="${_host_name:-$_host_name_default}"
elif [[ -n   "$FLAGS_hostname" ]]; then
  msg        "Reading hostname from cmdline flag..."
  _host_name="$FLAGS_hostname"
elif [[ -n   "$HOST_NAME" ]]; then
  msg        "Reading hostname from environment variable..."
  _host_name="$HOST_NAME"
else
  msg        "Using default hostname..."
  _host_name="$_host_name_default"
fi

# set hostname

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* hostname *"
                         echo "*          *"
                         echo "************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Setting hostname..."

echo ${_host_name} > /mnt/etc/hostname

# set nameservers

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* DNSCrypt *"
                         echo "*          *"
                         echo "************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Fixing resolver configuration file for DNSCrypt..."

cat >> /mnt/etc/resolv.conf.head <<'EOF'
# DNSCrypt
options edns0
nameserver 127.0.0.1

# OpenDNS nameservers
nameserver 208.67.222.222
nameserver 208.67.220.220

# Google nameservers
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF

# configure locale

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* config: locale *"
                      echo "*                *"
                      echo "******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring locale..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  msg "Available locales"
  read -d '' locales <<'EOF'
# af_ZA (Afrikaans) # es_MX (Spanish)    # ko_KR (Korean)     # ru_RU (Russian)
# ar_AE (Arabic)    # es_PR (Spanish)    # ks_IN (Kashmiri)   # sa_IN (Sanskrit)
# ar_IN (Arabic)    # es_US (Spanish)    # lg_UG (Ganda)      # sd_IN (Sindhi)
# ca_ES (Catalan)   # fa_IR (Farsi)      # lt_LT (Lithuanian) # si_LK (Sinhala)
# cs_CZ (Czech)     # fi_FI (Finnish)    # ml_IN (Malayalam)  # so_KE (Somali)
# da_DK (Danish)    # fr_FR (French)     # ne_NP (Nepali)     # sv_SE (Swedish)
# de_DE (German)    # ga_IE (Irish)      # nl_BE (Dutch)      # ta_IN (Tamil)
# en_AU (English)   # ha_NG (Hausa)      # nl_NL (Dutch)      # th_TH (Thai)
# en_CA (English)   # he_IL (Hebrew)     # nn_NO (Nynorsk)    # tr_TR (Turkish)
# en_GB (English)   # hi_IN (Hindi)      # pa_IN (Panjabi)    # uk_UA (Ukrainian)
# en_HK (English)   # hr_HR (Croatian)   # pa_PK (Panjabi)    # ur_IN (Urdu)
# en_NZ (English)   # hu_HU (Hungarian)  # ph_PH (Filipino)   # ur_PK (Urdu)
# en_US (English)   # id_ID (Indonesian) # pl_PL (Polish)     # vi_VN (Vietnamese)
# es_AR (Spanish)   # is_IS (Icelandic)  # pt_BR (Portuguese) # zh_CN (Chinese - Simplified)
# es_CL (Spanish)   # it_IT (Italian)    # pt_PT (Portuguese) # zh_TW (Chinese - Traditional)
# es_CO (Spanish)   # ja_JP (Japanese)   # ro_RO (Romanian)   # zu_ZA (Zulu)
# es_ES (Spanish)   # km_KH (Khmer)
EOF
  printf  "${green}${locales}${normal}\n"
  echo -n "${bold}${blue}::${normal} ${bold}${white}Enter locale${normal} ${bold}${white}[${normal}$_locale_default${bold}${white}]${normal}:"; read -p ' ' _locale
  _locale="${_locale:-$_locale_default}"
elif [[ -n "$FLAGS_locale" ]]; then
  msg     "Reading locale from cmdline flag..."
  _locale="$FLAGS_locale"
elif [[ -n "$LOCALE" ]]; then
  msg     "Reading locale from environment variable..."
  _locale="$LOCALE"
else
  msg     "Using default locale..."
  _locale="$_locale_default"
fi

# set locale

                   if [[ "$_debug" == '1' ]]; then
                          echo "**********"
                          echo "*        *"
                          echo "* locale *"
                          echo "*        *"
                          echo "**********"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Applying locale..."

sed -i "s!#${_locale}\.UTF-8 UTF-8!${_locale}\.UTF-8 UTF-8!" /mnt/etc/locale.gen
arch-chroot /mnt locale-gen
cat >> /mnt/etc/locale.conf <<EOF
LANG=${_locale}.UTF-8
LC_TIME=${_locale}.UTF-8
EOF

# configure keymap

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* config: keymap *"
                      echo "*                *"
                      echo "******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring keymap..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  msg "Available keymaps"
  read -d '' keymaps <<'EOF'
# cz    (Czech)
# de    (German)
# dk    (Danish)
# es    (Spanish)
# fi    (Finnish)
# fr    (French)
# it    (Italian)
# jp106 (Japanese)
# lt    (Lithuanian)
# nl    (Dutch)
# no    (Norwegian)
# pl    (Polish)
# ro    (Romanian)
# ru    (Russian)
# uk    (English - UK)
# us    (English - US)
EOF
  printf  "${green}${keymaps}${normal}\n"
  echo -n "${bold}${blue}::${normal} ${bold}${white}Enter keymap${normal} ${bold}${white}[${normal}$_keymap_default${bold}${white}]${normal}:"; read -p ' ' _keymap
  _keymap="${_keymap:-$_keymap_default}"
elif [[ -n "$FLAGS_keymap" ]]; then
  msg     "Reading keymap from cmdline flag..."
  _keymap="$FLAGS_keymap"
elif [[ -n "$KEYMAP" ]]; then
  msg     "Reading keymap from environment variable..."
  _keymap="$KEYMAP"
else
  msg     "Using default keymap..."
  _keymap="$_keymap_default"
fi

# set console font

                   if [[ "$_debug" == '1' ]]; then
                          echo "**********"
                          echo "*        *"
                          echo "* keymap *"
                          echo "*        *"
                          echo "**********"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Applying keymap..."

cat >> /mnt/etc/vconsole.conf <<EOF
KEYMAP=${_keymap}
FONT=Lat2-Terminus16
FONT_MAP=
EOF

# configure timezone

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: timezone *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring timezone..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  msg "Available timezones"
read -d '' timezones <<'EOF'
# Africa/Johannesburg  (SAST) # Asia/Karachi     (PKT)
# Africa/Lagos         (WAT)  # Asia/Kathmandu   (NPT)
# Africa/Lusaka        (CAT)  # Asia/Phnom_Penh  (ICT)
# Africa/Nairobi       (EAT)  # Asia/Seoul       (KT)
# America/Denver       (MST)  # Asia/Shanghai    (CT)
# America/Indianapolis (CST)  # Asia/Tokyo       (JT)
# America/Los_Angeles  (PST)  # Australia/Perth  (WST)
# America/New_York     (EST)  # Australia/Sydney (EST)
# Asia/Calcutta        (IST)  # Europe/Berlin    (CET)
# Asia/Hong_Kong       (HKT)  # Europe/London    (GMT/BST)
# Asia/Istanbul        (EET)  # Pacific/Honolulu (HST)
EOF
  printf    "${green}${timezones}${normal}\n"
  echo -n   "${bold}${blue}::${normal} ${bold}${white}Enter timezone${normal} ${bold}${white}[${normal}$_timezone_default${bold}${white}]${normal}:"; read -p ' ' _timezone
  _timezone="${_timezone:-$_timezone_default}"
elif [[ -n  "$FLAGS_timezone" ]]; then
  msg       "Reading timezone from cmdline flag..."
  _timezone="$FLAGS_timezone"
elif [[ -n  "$TIMEZONE" ]]; then
  msg       "Reading timezone from environment variable..."
  _timezone="$TIMEZONE"
else
  msg       "Using default timezone..."
  _timezone="$_timezone_default"
fi

# set timezone

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* timezone *"
                         echo "*          *"
                         echo "************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Setting timezone..."

arch-chroot /mnt ln -s /usr/share/zoneinfo/${_timezone} /etc/localtime

# set hardware clock

                   if [[ "$_debug" == '1' ]]; then
                          echo "***********"
                          echo "*         *"
                          echo "* hwclock *"
                          echo "*         *"
                          echo "***********"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Setting hardware clock..."

arch-chroot /mnt hwclock --systohc --utc

# configure pacman.conf

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* pacman.conf *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Adjusting pacman.conf..."

sed -i '/^CheckSpace.*/a ILoveCandy'           /mnt/etc/pacman.conf
sed -i 's!^#Color!Color!'                      /mnt/etc/pacman.conf
sed -i 's!^#TotalDownload!TotalDownload!'      /mnt/etc/pacman.conf
if [[ "$(uname -m)" == 'x86_64' ]]; then
  echo '[multilib]'                         >> /mnt/etc/pacman.conf
  echo 'Include = /etc/pacman.d/mirrorlist' >> /mnt/etc/pacman.conf
fi

# rankmirrors

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* rankmirrors *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Finding eight fastest mirrors..."

mv /mnt/etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist.bak
reflector -p https > /mnt/etc/pacman.d/mirrorlist.https
rankmirrors -n 8 /mnt/etc/pacman.d/mirrorlist.https > /mnt/etc/pacman.d/mirrorlist

# import gpg signing keys - https://sks-keyservers.net/overview-of-pools.php

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* gpg keys *"
                         echo "*          *"
                         echo "************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Importing GPG keys..."

# https://www.archlinux.org/people/developers/#pierre
#arch-chroot /mnt su -c "gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 0x4AA4767BBC9C4B1D18AE28B77F2D434B9741E8AC" ${_user_name}
arch-chroot /mnt su -c "gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 0x4AA4767BBC9C4B1D18AE28B77F2D434B9741E8AC" ${_user_name}

# https://www.archlinux.org/people/developers/#dreisner
#arch-chroot /mnt su -c "gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 0x487EACC08557AD082088DABA1EB2638FF56C0C53" ${_user_name}
gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 0x487EACC08557AD082088DABA1EB2638FF56C0C53
arch-chroot /mnt su -c "gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 0x487EACC08557AD082088DABA1EB2638FF56C0C53" ${_user_name}

# https://www.archlinux.org/people/trusted-users/#xyne
#arch-chroot /mnt su -c "gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 0xEC3CBE7F607D11E663149E811D1F0DC78F173680" ${_user_name}
arch-chroot /mnt su -c "gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 0xEC3CBE7F607D11E663149E811D1F0DC78F173680" ${_user_name}

# https://www.gnupg.org/signature_key.html
#arch-chroot /mnt su -c "gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 0x249B39D24F25E3B6" ${_user_name}
arch-chroot /mnt su -c "gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 0x249B39D24F25E3B6" ${_user_name}

# https://electrum.org/download.html
#arch-chroot /mnt su -c "gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 0x6694D8DE7BE8EE5631BED9502BD5824B7F9470E6" ${_user_name}
arch-chroot /mnt su -c "gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 0x6694D8DE7BE8EE5631BED9502BD5824B7F9470E6" ${_user_name}

# https://www.torproject.org/docs/verifying-signatures.html.en
#arch-chroot /mnt su -c "gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 0x4E2C6E8793298290" ${_user_name}
arch-chroot /mnt su -c "gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 0x4E2C6E8793298290" ${_user_name}

# https://tails.boum.org/doc/about/openpgp_keys/index.en.html#index2h1
#arch-chroot /mnt su -c "gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 0x1202821CBE2CD9C1" ${_user_name}
arch-chroot /mnt su -c "gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 0x1202821CBE2CD9C1" ${_user_name}

# https://www.whonix.org/wiki/Whonix_Signing_Key
#arch-chroot /mnt su -c "gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 0x8D66066A2EEACCDA" ${_user_name}
arch-chroot /mnt su -c "gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 0x8D66066A2EEACCDA" ${_user_name}

# https://geti2p.net/en/get-involved/develop/release-signing-key
#arch-chroot /mnt su -c "gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 0xEE60C0C8EE7256A8" ${_user_name}
arch-chroot /mnt su -c "gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 0xEE60C0C8EE7256A8" ${_user_name}

# install pacaur

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* install pacaur *"
                      echo "*                *"
                      echo "******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Installing pacaur..."

pacman -Sy --needed curl expac pacman perl sudo yajl --noconfirm
arch-chroot /mnt pacman -Sy --needed curl expac pacman perl sudo yajl --noconfirm
for _pkg in cower pacaur; do
  mkdir -p /mnt/home/${_user_name}/.src && pushd /mnt/home/${_user_name}/.src
  rm -rf $_pkg ${_pkg}.tar.gz && mkdir -p $_pkg
  curl -O https://aur.archlinux.org/packages/${_pkg:0:2}/$_pkg/$_pkg.tar.gz
  tar -xvzf ${_pkg}.tar.gz --strip 1 -C $_pkg
  arch-chroot /mnt su -l -c "pushd /home/${_user_name}/.src/$_pkg && makepkg -Acsi --noconfirm && popd" ${_user_name}
  find /mnt/home/${_user_name}/.src/$_pkg -type f -name "*.pkg.tar.xz" -exec pacman -U '{}' --noconfirm \;
  popd
done

# install arch-luks-suspend

                   if [[ "$_debug" == '1' ]]; then
                 echo "*****************************"
                 echo "*                           *"
                 echo "* install arch-luks-suspend *"
                 echo "*                           *"
                 echo "*****************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Installing arch-luks-suspend..."

arch-chroot /mnt pacman -Sy --needed cryptsetup git mkinitcpio systemd --noconfirm
for _pkg in arch-luks-suspend-git; do
  mkdir -p /mnt/home/${_user_name}/.src && pushd /mnt/home/${_user_name}/.src
  rm -rf $_pkg ${_pkg}.tar.gz && mkdir -p $_pkg
  curl -O https://aur.archlinux.org/packages/${_pkg:0:2}/$_pkg/$_pkg.tar.gz
  tar -xvzf ${_pkg}.tar.gz --strip 1 -C $_pkg
  arch-chroot /mnt su -l -c "pushd /home/${_user_name}/.src/$_pkg && makepkg -Acsi --noconfirm && popd" ${_user_name}
  popd
done

# always suspend to RAM

                   if [[ "$_debug" == '1' ]]; then
                    echo "**********************"
                    echo "*                    *"
                    echo "* systemd sleep.conf *"
                    echo "*                    *"
                    echo "**********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring system sleep behavior..."

cat >> /mnt/etc/systemd/sleep.conf <<'EOF'
[Sleep]
SuspendMode=mem
HibernateMode=mem
HybridSleepMode=mem
SuspendState=mem
HibernateState=mem
HybridSleepState=mem
EOF

# set modprobe.conf

                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*               *"
                       echo "* modprobe.conf *"
                       echo "*               *"
                       echo "*****************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Applying kernel module blacklist..."

cat >> /mnt/etc/modprobe.d/modprobe.conf <<'EOF'
alias floppy off
blacklist fd0
blacklist floppy
blacklist bcma
blacklist snd_pcsp
blacklist pcspkr
EOF

# set initramfs

                   if [[ "$_debug" == '1' ]]; then
                         echo "*************"
                         echo "*           *"
                         echo "* initramfs *"
                         echo "*           *"
                         echo "*************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Generating initramfs..."

if   [[ "${_disk}" == 'usb' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c"!' /etc/mkinitcpio.conf
elif [[ "${_processor}" == 'intel' && "${_graphics}" == 'intel' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c-intel i915"!' /etc/mkinitcpio.conf
elif [[ "${_processor}" == 'intel' && "${_graphics}" == 'nvidia' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c-intel nouveau"!' /etc/mkinitcpio.conf
elif [[ "${_processor}" == 'intel' && "${_graphics}" == 'radeon' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c-intel radeon"!' /etc/mkinitcpio.conf
elif [[ "${_graphics}" == 'intel' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c i915"!' /etc/mkinitcpio.conf
elif [[ "${_graphics}" == 'nvidia' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c nouveau"!' /etc/mkinitcpio.conf
elif [[ "${_graphics}" == 'radeon' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c radeon"!' /etc/mkinitcpio.conf
fi

if   [[ "${_disk}" == 'usb' ]]; then
  arch-chroot /mnt sed -i 's!^HOOKS.*!HOOKS="base udev block autodetect modconf keyboard keymap encrypt btrfs filesystems shutdown suspend usr"!' /etc/mkinitcpio.conf
else
  arch-chroot /mnt sed -i 's!^HOOKS.*!HOOKS="base udev autodetect modconf block keyboard keymap encrypt btrfs filesystems shutdown suspend usr"!' /etc/mkinitcpio.conf
fi
arch-chroot /mnt sed -i   's!^FILES.*!FILES="/etc/modprobe.d/modprobe.conf"!' /etc/mkinitcpio.conf
arch-chroot /mnt mkinitcpio -p linux

# install grub

                   if [[ "$_debug" == '1' ]]; then
                           echo "********"
                           echo "*      *"
                           echo "* grub *"
                           echo "*      *"
                           echo "********"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Installing GRUB..."

_luks_uuid=$(lsblk -f | grep ${_partition##/dev/}3 | awk '{print $3}')
if [[ "${_disk}" == 'ssd' && "${_graphics}" == 'radeon' ]]; then
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX=.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@ elevator=noop radeon.dpm=1\"!" /etc/default/grub
elif [[ "${_disk}" == 'ssd' ]]; then
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX=.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@ elevator=noop\"!" /etc/default/grub
elif [[ "${_graphics}" == 'radeon' ]]; then
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX=.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@ radeon.dpm=1\"!" /etc/default/grub
else
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX=.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@\"!" /etc/default/grub
fi
arch-chroot /mnt grub-install --target=i386-pc --recheck ${_partition}
arch-chroot /mnt cp /usr/share/locale/en\@quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

# configure sysctl

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* sysctl.conf *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring sysctl.conf..."

cat > /mnt/etc/sysctl.conf <<'EOF'
# Configuration file for runtime kernel parameters.
# See sysctl.conf(5) for more information.

# Have the CD-ROM close when you use it, and open when you are done.
#dev.cdrom.autoclose = 1
#dev.cdrom.autoeject = 1

# Protection from the SYN flood attack.
net.ipv4.tcp_syncookies = 1

# See evil packets in your logs.
net.ipv4.conf.all.log_martians = 1

# Enables source route verification
net.ipv4.conf.default.rp_filter = 1

# Enable reverse path
net.ipv4.conf.all.rp_filter = 1

# Never accept redirects or source routes (these are only useful for routers).
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.all.accept_source_route = 0

# Disable packet forwarding. Enable for openvpn.
net.ipv4.ip_forward = 1
net.ipv6.conf.default.forwarding = 1
net.ipv6.conf.all.forwarding = 1

# Ignore ICMP broadcasts
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Drop ping packets
net.ipv4.icmp_echo_ignore_all = 1

# Protect against bad error messages
net.ipv4.icmp_ignore_bogus_error_responses = 1

# Tune IPv6
net.ipv6.conf.default.router_solicitations = 0
net.ipv6.conf.default.accept_ra_rtr_pref = 0
net.ipv6.conf.default.accept_ra_pinfo = 0
net.ipv6.conf.default.accept_ra_defrtr = 0
net.ipv6.conf.default.autoconf = 0
net.ipv6.conf.default.dad_transmits = 0
net.ipv6.conf.default.max_addresses = 1

# Increase the open file limit
#fs.file-max = 65535

# Allow for more PIDs (to reduce rollover problems);
# may break some programs 32768
#kernel.pid_max = 65536

# Allow for fast recycling of TIME_WAIT sockets. Default value is 0
# (disabled). Known to cause some issues with hoststated (load balancing
# and fail over) if enabled, should be used with caution.
net.ipv4.tcp_tw_recycle = 1
# Allow for reusing sockets in TIME_WAIT state for new connections when
# it's safe from protocol viewpoint. Default value is 0 (disabled).
# Generally a safer alternative to tcp_tw_recycle.
net.ipv4.tcp_tw_reuse = 1

# Increase TCP max buffer size setable using setsockopt()
#net.ipv4.tcp_rmem = 4096 87380 8388608
#net.ipv4.tcp_wmem = 4096 87380 8388608

# Increase Linux auto tuning TCP buffer limits
# min, default, and max number of bytes to use
# set max to at least 4MB, or higher if you use very high BDP paths
#net.core.rmem_max = 8388608
#net.core.wmem_max = 8388608
#net.core.netdev_max_backlog = 5000
#net.ipv4.tcp_window_scaling = 1

# Tweak the port range used for outgoing connections.
net.ipv4.ip_local_port_range = 2000 65535

# Tweak those values to alter disk syncing and swap behavior.
#vm.vfs_cache_pressure = 100
#vm.laptop_mode = 0
#vm.swappiness = 60

# Tweak how the flow of kernel messages is throttled.
#kernel.printk_ratelimit_burst = 10
#kernel.printk_ratelimit = 5

# Reboot 600 seconds after kernel panic or oops.
#kernel.panic_on_oops = 1
#kernel.panic = 600

# Disable SysRq key to avoid console security issues.
kernel.sysrq = 0
EOF

if [[ "${_disk}" == 'ssd' || "${_disk}" == 'usb' ]]; then
  sed -i 's!^#vm.vfs_cache_pressure.*!vm.vfs_cache_pressure=50!' /mnt/etc/sysctl.conf
  sed -i 's!^#vm.swappiness.*!vm.swappiness=1!' /mnt/etc/sysctl.conf
fi

arch-chroot /mnt sysctl -p

# configure iptables

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* iptables *"
                         echo "*          *"
                         echo "************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring iptables..."

cat > iptables.test.rules <<'EOF'
*filter
#| Allow all loopback (lo0) traffic, and drop all traffic to 127/8 that doesn't use lo0
-A INPUT -i lo -j ACCEPT
-A INPUT ! -i lo -d 127.0.0.0/8 -j REJECT
#| Allow all established inbound connections
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
#| Allow all outbound traffic
-A OUTPUT -j ACCEPT
#| Allow HTTP and HTTPS connections
-A INPUT -p tcp --dport 80 -j ACCEPT
-A INPUT -p tcp --dport 443 -j ACCEPT
#| Allow SSH connections
-A INPUT -p tcp -m conntrack --ctstate NEW --dport 22 -j ACCEPT
#| Allow ZeroMQ connections
-A INPUT -p tcp -m conntrack --ctstate NEW --dport 4505 -j ACCEPT
-A INPUT -p tcp -m conntrack --ctstate NEW --dport 4506 -j ACCEPT
#| Allow NTP connections
-I INPUT -p udp --dport 123 -j ACCEPT
-I OUTPUT -p udp --sport 123 -j ACCEPT
#| Reject pings
-I INPUT -j DROP -p icmp --icmp-type echo-request
#| Drop ident server
-A INPUT -p tcp --dport ident -j DROP
#| Log iptables denied calls
-A INPUT -m limit --limit 15/minute -j LOG --log-prefix "[IPT]Dropped input: " --log-level 7
-A OUTPUT -m limit --limit 15/minute -j LOG --log-prefix "[IPT]Dropped output: " --log-level 7
#| Reject all other inbound - default deny unless explicitly allowed policy
-A INPUT -j REJECT
-A FORWARD -j REJECT
COMMIT
EOF
iptables-save > /mnt/etc/iptables/iptables.up.rules
iptables-restore < iptables.test.rules
iptables-save > /mnt/etc/iptables/iptables.rules

# configure ssh

                   if [[ "$_debug" == '1' ]]; then
                        echo "**************"
                        echo "*            *"
                        echo "* ssh_config *"
                        echo "*            *"
                        echo "**************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring ssh..."

sed -i 's!^# Host!Host!' /mnt/etc/ssh/ssh_config
sed -i '/^#   HostbasedAuthentication.*/a \    HashKnownHosts yes' /mnt/etc/ssh/ssh_config
sed -i '/^#   ConnectTimeout.*/a \    TCPKeepAlive yes' /mnt/etc/ssh/ssh_config
sed -i 's!^#   Protocol.*!    Protocol 2!'  /mnt/etc/ssh/ssh_config
sed -i 's!^#   Ciphers.*!    Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr!'  /mnt/etc/ssh/ssh_config
sed -i '/^#   MACs.*/a \    ServerAliveCountMax 3' /mnt/etc/ssh/ssh_config
sed -i '/^#   MACs.*/a \    ServerAliveInterval 60' /mnt/etc/ssh/ssh_config
sed -i '/^#   MACs.*/a \    KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256' /mnt/etc/ssh/ssh_config
sed -i '/^#   MACs.*/a \    HostKeyAlgorithms ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-ed25519,ssh-rsa' /mnt/etc/ssh/ssh_config
sed -i 's!^#   MACs.*!    MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com!'  /mnt/etc/ssh/ssh_config
sed -i 's!^#   EscapeChar!    EscapeChar!' /mnt/etc/ssh/ssh_config

# configure hosts_allowed

                   if [[ "$_debug" == '1' ]]; then
                   echo "*************************"
                   echo "*                       *"
                   echo "* config: hosts_allowed *"
                   echo "*                       *"
                   echo "*************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring hosts_allowed..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n        "${bold}${blue}::${normal} ${bold}${white}Enter hosts_allowed${normal} ${bold}${white}[${normal}$_hosts_allowed_default${bold}${white}]${normal}:"; read -p ' ' _hosts_allowed
  _hosts_allowed="${_hosts_allowed:-$_hosts_allowed_default}"
elif [[ -n       "$FLAGS_hostsallowed" ]]; then
  msg            "Reading hosts_allowed from cmdline flag..."
  _hosts_allowed="$FLAGS_hostsallowed"
elif [[ -n       "$HOSTS_ALLOWED" ]]; then
  msg            "Reading hosts_allowed from environment variable..."
  _hosts_allowed="$HOSTS_ALLOWED"
else
  msg            "Using default hosts_allowed..."
  _hosts_allowed="$_hosts_allowed_default"
fi

# configure sshd

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* sshd_config *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring sshd..."

sed -i 's!^#Port.*!Port 22!'                                                              /mnt/etc/ssh/sshd_config
sed -i 's!^#Protocol.*!Protocol 2!'                                                       /mnt/etc/ssh/sshd_config
sed -i 's!^#HostKey /etc/ssh/ssh_host_rsa_key!HostKey /etc/ssh/ssh_host_rsa_key!'         /mnt/etc/ssh/sshd_config
sed -i 's!^#HostKey /etc/ssh/ssh_host_ed25519_key!HostKey /etc/ssh/ssh_host_ed25519_key!' /mnt/etc/ssh/sshd_config
sed -i 's!^#SyslogFacility.*!SyslogFacility AUTH!'                                        /mnt/etc/ssh/sshd_config
sed -i 's!^#LogLevel.*!LogLevel ERROR!'                                                   /mnt/etc/ssh/sshd_config
sed -i 's!^#LoginGraceTime.*!LoginGraceTime 2m!'                                          /mnt/etc/ssh/sshd_config
sed -i 's!^#PermitRootLogin.*!PermitRootLogin no!'                                        /mnt/etc/ssh/sshd_config
sed -i 's!^#StrictModes.*!StrictModes yes!'                                               /mnt/etc/ssh/sshd_config
sed -i 's!^#PasswordAuthentication.*!PasswordAuthentication no!'                          /mnt/etc/ssh/sshd_config
sed -i 's!^UsePAM yes!UsePAM no!'                                                         /mnt/etc/ssh/sshd_config
sed -i 's!^#X11Forwarding.*!X11Forwarding no!'                                            /mnt/etc/ssh/sshd_config
sed -i 's!^#X11DisplayOffset.*!X11DisplayOffset 10!'                                      /mnt/etc/ssh/sshd_config
sed -i 's!^#PrintLastLog.*!PrintLastLog yes!'                                             /mnt/etc/ssh/sshd_config
sed -i 's!^#TCPKeepAlive.*!TCPKeepAlive yes!'                                             /mnt/etc/ssh/sshd_config
sed -i 's!^#ClientAliveInterval.*!ClientAliveInterval 60!'                                /mnt/etc/ssh/sshd_config
sed -i 's!^#ClientAliveCountMax.*!ClientAliveCountMax 3!'                                 /mnt/etc/ssh/sshd_config
sed -i 's!^#UseDNS.*!UseDNS no!'                                                          /mnt/etc/ssh/sshd_config
echo 'KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256' >> /mnt/etc/ssh/sshd_config
echo 'Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr' >> /mnt/etc/ssh/sshd_config
echo 'MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com' >> /mnt/etc/ssh/sshd_config
echo "AllowUsers ${_user_name}" >>                                                        /mnt/etc/ssh/sshd_config
sed -i '/^multi.*/a nospoof on'                                                           /mnt/etc/host.conf
echo "sshd: ${_hosts_allowed}" >                                                          /mnt/etc/hosts.allow

# set systemd services

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* systemd services *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Enabling systemd services..."

arch-chroot /mnt systemctl enable cronie
arch-chroot /mnt systemctl enable dnscrypt-proxy
arch-chroot /mnt systemctl enable iptables
arch-chroot /mnt systemctl enable systemd-suspend
arch-chroot /mnt systemctl enable systemd-swap

# disable /var/log/journal CoW

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* disable CoW *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Disabling btrfs Copy-On-Write where optimal..."

chattrify "/var/log/journal" "755" "root" "systemd-journal"
}




# -----------------------------------------------------------------------------
# sshify: prepare machine for remote administration
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*  ------  *"
                         echo "* |sshify| *"
                         echo "*  ------  *"
                         echo "************"
                                  fi


function sshify() {

# configure electrum pubkey

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: electrum *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring URL of Electrum public key..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n  "${bold}${blue}::${normal} ${bold}${white}Enter link to your electrum pubkey${normal} ${bold}${white}[${normal}$_electrum_pubkey_default${bold}${white}]${normal}:"; read -p ' ' _electrum_pubkey
  _electrum_pubkey="${_electrum_pubkey:-$_electrum_pubkey_default}"
elif [[ -n "$FLAGS_electrum" ]]; then
  msg      "Reading link to electrum pubkey from cmdline flag..."
  _electrum_pubkey="$FLAGS_electrum"
elif [[ -n "$ELECTRUM" ]]; then
  msg      "Reading link to electrum pubkey from environment variable..."
  _electrum_pubkey="$ELECTRUM"
else
  msg      "Using default link to electrum pubkey..."
  _electrum_pubkey="$_electrum_pubkey_default"
fi

# configure user pubkey

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* config: pubkey *"
                      echo "*                *"
                      echo "******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring URL of user's public key..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n      "${bold}${blue}::${normal} ${bold}${white}Enter link to your user pubkey${normal} ${bold}${white}[${normal}$_user_pubkey_default${bold}${white}]${normal}:"; read -p ' ' _user_pubkey
  _user_pubkey="${_user_pubkey:-$_user_pubkey_default}"
elif [[ -n     "$FLAGS_pubkey" ]]; then
  msg          "Reading link to user pubkey from cmdline flag..."
  _user_pubkey="$FLAGS_pubkey"
elif [[ -n     "$PUBKEY" ]]; then
  msg          "Reading link to user pubkey from environment variable..."
  _user_pubkey="$PUBKEY"
else
  msg          "Using default link to user pubkey..."
  _user_pubkey="$_user_pubkey_default"
fi

# configure user pubkey signature

                   if [[ "$_debug" == '1' ]]; then
                     echo "*********************"
                     echo "*                   *"
                     echo "* config: pubkeysig *"
                     echo "*                   *"
                     echo "*********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring URL of user's public key signature..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n          "${bold}${blue}::${normal} ${bold}${white}Enter link to your user pubkey signature${normal} ${bold}${white}[${normal}$_user_pubkey_sig_default${bold}${white}]${normal}:"; read -p ' ' _user_pubkey_sig
  _user_pubkey_sig="${_user_pubkey_sig:-$_user_pubkey_sig_default}"
elif [[ -n         "$FLAGS_pubkeysig" ]]; then
  msg              "Reading link to user pubkey signature from cmdline flag..."
  _user_pubkey_sig="$FLAGS_pubkeysig"
elif [[ -n         "$PUBKEYSIG" ]]; then
  msg              "Reading link to user pubkey signature from environment variable..."
  _user_pubkey_sig="$PUBKEYSIG"
else
  msg              "Using default link to user pubkey signature..."
  _user_pubkey_sig="$_user_pubkey_sig_default"
fi

# enable sshd

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* enable sshd *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Enabling sshd..."

arch-chroot /mnt systemctl enable sshd

# import keys

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* import keys *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Importing SSH keys..."

curl "${_electrum_pubkey}" -o ~/electrum.pub
curl "${_user_pubkey}"     -o ~/sshkey.pub
curl "${_user_pubkey_sig}" -o ~/sshkey.pub.sig

# verify with electrum

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* verify keys *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Verifying SSH keys..."

pacaur -Sy --needed python2-ecdsa \
                    python2-pbkdf2 \
                    python2-protobuf \
                    python2-pyasn1 \
                    python2-pyasn1-modules \
                    python2-qrcode \
                    python2-requests \
                    python2-six \
                    python2-slowaes \
                    python2-tlslite --noedit --noconfirm
curl https://codeload.github.com/spesmilo/{electrum}/{tar.gz}/{${VERSION_ELECTRUM}} -o "#1-#3.#2"
tar xvzf electrum-${VERSION_ELECTRUM}.tar.gz
pushd electrum-${VERSION_ELECTRUM}
find . -type f -print0 | xargs -0 sed -i 's#/usr/bin/python#/usr/bin/python2#g'
find . -type f -print0 | xargs -0 sed -i 's#/usr/bin/env python#/usr/bin/env python2#g'
_electrum_verified=$(./electrum verifymessage \
                       "$(cat ~/electrum.pub)" \
                       "$(cat ~/sshkey.pub.sig)" \
                       "$(cat ~/sshkey.pub)")
popd

# setup authorized_keys

                   if [[ "$_debug" == '1' ]]; then
                      echo "*******************"
                      echo "*                 *"
                      echo "* authorized_keys *"
                      echo "*                 *"
                      echo "*******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Creating authorized_keys file..."

if [[ "${_electrum_verified}" == 'true' ]]; then
  mkdir -p /mnt/home/${_user_name}/.ssh
  chmod 700 /mnt/home/${_user_name}/.ssh
  cat ~/sshkey.pub > /mnt/home/${_user_name}/.ssh/authorized_keys
  chmod 600 /mnt/home/${_user_name}/.ssh/authorized_keys
  arch-chroot /mnt chown -R ${_user_name}:users /home/${_user_name}/.ssh
else
  echo "Electrum verification code rejected."
fi
}




# -----------------------------------------------------------------------------
# selectify: select packages to install
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*  ---------  *"
                        echo "* |selectify| *"
                        echo "*  ---------  *"
                        echo "***************"
                                  fi


function selectify() {

# pkg bundles
declare _bundle_base=('base'
                      'grsec')
declare _bundle_lite=('base'
                      'grsec'
                      'gui'
                      'dotfiles')
declare _bundle_full=('base'
                      'beam'
                      'grsec'
                      'gui'
                      'dotfiles'
                      'analysis'
                      'android'
                      'assembly'
                      'c'
                      'd'
                      'dotnet'
                      'fonts'
                      'go'
                      'gobi'
                      'haskell'
                      'julia'
                      'jvm'
                      'latex'
                      'lisp'
                      'lua'
                      'markdown'
                      'nim'
                      'ocaml'
                      'perl'
                      'perl6'
                      'php'
                      'python'
                      'rst'
                      'ruby'
                      'rust'
                      'swift'
                      'vbox'
                      'webdev')

# pkgs feedback
if   [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  msg   "Setting bundle preferences interactively..."
elif [[ "$FLAGS_bundle" == 'full' || "$FLAGS_bundle" == 'lite' || "$FLAGS_bundle" == 'base' ]]; then
  msg   "Reading bundle preferences from cmdline flag..."
elif [[ "$BUNDLE" == 'full' || "$BUNDLE" == 'lite' || "$BUNDLE" == 'base' ]]; then
  msg   "Reading bundle preferences from environment variable..."
fi

# IF: interactive mode enabled
if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  # THEN: iterate through all pkgs avail with Y/N
  for i in "${!_bundle_full[@]}"; do
    ask "Include ${_bundle_full[${i}]}? (Y/n)" "y"
    if [[ "$_retval" == '0' ]]; then export "_${_bundle_full[${i}]}"=1; fi
  done
# ELIF: selected pkgs from the cmdline select option
elif [[ -n   "$FLAGS_select" ]]; then
  # THEN: get selected pkgs
  read -a _select_pkgs_array <<< "$FLAGS_select"
  for i in "${!_select_pkgs_array[@]}"; do
    status "Selected ${_select_pkgs_array[${i}]}"
    export "_${_select_pkgs_array[${i}]}"=1
  done
# ELIF: selected pkgs from SELECT environment variable
elif [[ -n   "$SELECT" ]]; then
  # THEN: get selected pkgs
  read -a _select_pkgs_array_env <<< "$FLAGS_select"
  for i in "${!_select_pkgs_array_env[@]}"; do
    status "Selected ${_select_pkgs_array_env[${i}]}"
    export "_${_select_pkgs_array_env[${i}]}"=1
  done
# ELIF: opt for full bundle from cmdline option or BUNDLE environment variable
elif [[ "$FLAGS_bundle" == 'full' || "$BUNDLE" == 'full' ]]; then
  # THEN: get all pkgs avail in the full bundle
  for i in "${!_bundle_full[@]}"; do
    status "Selected ${_bundle_full[${i}]}"
    export "_${_bundle_full[${i}]}"=1
  done
# ELIF: opt for lite bundle from cmdline option or BUNDLE environment variable
elif [[ "$FLAGS_bundle" == 'lite' || "$BUNDLE" == 'lite' ]]; then
  # THEN: get all pkgs avail in the lite bundle
  for i in "${!_bundle_lite[@]}"; do
    status "Selected ${_bundle_lite[${i}]}"
    export "_${_bundle_lite[${i}]}"=1
  done
# ELIF: opt for base bundle from cmdline option or BUNDLE environment variable
elif [[ "$FLAGS_bundle" == 'base' || "$BUNDLE" == 'base' ]]; then
  # THEN: get all pkgs avail in the base bundle
  for i in "${!_bundle_base[@]}"; do
    status "Selected ${_bundle_base[${i}]}"
    export "_${_bundle_base[${i}]}"=1
  done
fi

declare _pkgs=()

if [[ "${_base}" == '1' ]]; then
  _pkgs+=('ack'
          'ansible'
          'appjail'
          'archversion-git'
          'arch-wiki-lite'
          'autochown'
          'avahi'
          'bluez'
          'bluez-firmware'
          'ccrypt'
          'check-pacman-mtree'
          'colordiff'
          'commacd'
          'corkscrew'
          'create_ap'
          'cronwhip'
          'cv'
          'darkhttpd'
          'devtools'
          'dnsutils'
          'downgrade'
          'dvd+rw-tools'
          'easytether-rpm'
          'elinks'
          'facadefs'
          'f-irc'
          'firejail'
          'fzf'
          'geturl-git'
          'git'
          'git-extras'
          'gnupg1'
          'hexgrep'
          'httpie'
          'hub'
          'icdiff'
          'idemptables'
          'imgurbash'
          'ipw2100-fw'
          'ipw2200-fw'
          'irssi'
          'ix'
          'jq'
          'keybase'
          'ledger.py-git'
          'libfaketime'
          'libusb-compat'
          'lrzip'
          'lsgrp'
          'lynx'
          'macchanger'
          'makedep'
          'mawk'
          'mdp-git'
          'mercurial'
          'mlocate'
          'moby-thesaurus'
          'moreutils'
          'mosh'
          'nawk'
          'ncurses'
          'nyan-git'
          'openvpn'
          'ottools'
          'p7zip'
          'package-query'
          'packer'
          'pacmatic'
          'pacnew_scripts'
          'pacserve'
          'pacupg'
          'paexec'
          'parallel'
          'parcimonie-sh-git'
          'pbget'
          'perl-image-exiftool'
          'pipe-logger-git'
          'pkgbuild-introspection'
          'pkgcacheclean'
          'pkg_scripts'
          'proxychains-ng'
          'puppet'
          'python2-pbp'
          'python3-aur'
          'qrencode'
          'quickserve'
          'quixand'
          'ranger'
          'recollect'
          'repo-add_and_sign'
          'repoman'
          'reptyr'
          'rfkill'
          'rlwrap'
          'rtorrent'
          'salt-raet'
          'seq2gif'
          'sfk'
          'shmig-git'
          'snapper'
          'socat'
          'spiped'
          'sshuttle'
          'ssss'
          'steghide'
          'subrepo'
          'synclinks'
          'tcplay'
          'the_silver_searcher'
          'timedatectl-restorer'
          'tmux.sh-git'
          'tor'
          'torsocks'
          'toxic'
          'tree'
          'ttyrec'
          'tup'
          'usb_modeswitch'
          'usbmuxd'
          'websocketd'
          'words'
          'xinetd'
          'xtables-addons-dkms'
          'xtables-geoip-db'
          'youtube-dl')
fi

if [[ "${_grsec}" == '1' ]]; then
  _pkgs+=('checksec'
          'gradm'
          'grsec-common'
          'linux-grsec'
          'linux-grsec-docs'
          'linux-grsec-headers'
          'paxd'
          'paxtest'
          'pax-utils'
          'prelink')
fi

if [[ "${_gui}" == '1' ]]; then
  _pkgs+=('abiword'
          'alsa-firmware'
          'alsa-lib'
          'alsa-oss'
          'alsa-plugins'
          'alsa-utils'
          'anki'
          'archlinux-wallpaper'
          'arch-wiki-docs'
          'ascrubber-git'
          'aspell'
          'aspell-ca'
          'aspell-cs'
          'aspell-de'
          'aspell-en'
          'aspell-es'
          'aspell-fr'
          'aspell-hu'
          'aspell-it'
          'aspell-nl'
          'aspell-pl'
          'aspell-pt'
          'aspell-ru'
          'aspell-uk'
          'bleachbit'
          'castawesome'
          'chromium'
          'compton-git'
          'conky'
          'deluge'
          'desktop-file-utils'
          'dmenu-xft'
          'ekiga'
          'evince'
          'feh'
          'firefox'
          'flashplugin'
          'gajim'
          'gajim-plugin-otr-git'
          'galculator'
          'gcolor2'
          'gfms-git'
          'gimp'
          'gmrun'
          'gnome-themes-standard'
          'gnumeric'
          'gparted'
          'grsync'
          'gsettings-desktop-schemas'
          'gsimplecal'
          'gsm'
          'gstreamer'
          'gstreamer0.10'
          'gstreamer0.10-bad'
          'gstreamer0.10-bad-plugins'
          'gstreamer0.10-base'
          'gstreamer0.10-base-plugins'
          'gstreamer0.10-ffmpeg'
          'gstreamer0.10-good'
          'gstreamer0.10-good-plugins'
          'gstreamer0.10-python'
          'gstreamer0.10-ugly'
          'gstreamer0.10-ugly-plugins'
          'gstreamermm'
          'gtk2'
          'gtk2-perl'
          'gtk3'
          'gtk-engines'
          'gucharmap'
          'hicolor-icon-theme'
          'hunspell'
          'hwinfo'
          'hyphen'
          'i2p'
          'icedtea-web'
          'ifuse'
          'ignuit'
          'imagemagick'
          'imlib2'
          'inkscape'
          'inputproto'
          'intltool'
          'iso-codes'
          'jhead'
          'jp2a'
          'jre7-openjdk'
          'jre7-openjdk-headless'
          'jre8-openjdk'
          'jre8-openjdk-headless'
          'keepassx'
          'leafpad'
          'libgl'
          'link-grammar'
          'lucidor'
          'lxappearance'
          'lxinput'
          'lxmed'
          'lxmenu-data'
          'lxrandr'
          'lxsplit'
          'lxterminal'
          'maim'
          'media-player-info'
          'menu-cache'
          'mesa'
          'mesa-demos'
          'mimeo'
          'mime-types'
          'monaco-powerline-font-git'
          'nitrogen'
          'notification-daemon'
          'numlockx'
          'obconf'
          'obkey-git'
          'obmenu'
          'obmenu-generator'
          'onboard'
          'openbox'
          'openbox-menu'
          'openbox-themes'
          'pcmanfm'
          'pencil'
          'photocrypt'
          'pidgin-otr'
          'printproto'
          'profanity'
          'pulseaudio'
          'pwsafe'
          'pystopwatch'
          'qtcreator'
          'randrproto'
          'recode'
          'renderproto'
          'rxvt-unicode-pixbuf'
          'screencastor'
          'scrot'
          'shared-color-targets'
          'shared-mime-info'
          'shotwell'
          'slop'
          'source-highlight'
          'startup-notification'
          'statler-ui-theme'
          'thunderbird'
          'thunderbird-enigmail'
          'tint2'
          'tiv'
          'tmsu'
          'tor-browser-en'
          'torchat'
          'tox-prpl'
          'ttf-monaco'
          'unibrow'
          'urxvt-perls'
          'urxvt-tabbedex'
          'valabattery-git'
          'venom-git'
          'veracrypt'
          'videoproto'
          'vlc'
          'volumeicon'
          'vym'
          'wmctrl'
          'x11-ssh-askpass'
          'xautolock'
          'xautomation'
          'xchat'
          'xchat-otr'
          'xclip'
          'xdg-user-dirs'
          'xdg-utils'
          'xdotool'
          'xextproto'
          'xf86dgaproto'
          'xf86-input-evdev'
          'xf86-input-joystick'
          'xf86-input-keyboard'
          'xf86-input-mouse'
          'xf86-input-synaptics'
          'xf86-input-vmmouse'
          'xf86-input-void'
          'xf86-video-ark'
          'xf86-video-ati'
          'xf86-video-dummy'
          'xf86-video-fbdev'
          'xf86-video-glint'
          'xf86-video-i128'
          'xf86-video-intel'
          'xf86-video-mach64'
          'xf86-video-modesetting'
          'xf86-video-neomagic'
          'xf86-video-nouveau'
          'xf86-video-nv'
          'xf86-video-openchrome'
          'xf86-video-r128'
          'xf86-video-savage'
          'xf86-video-siliconmotion'
          'xf86-video-sis'
          'xf86-video-tdfx'
          'xf86-video-trident'
          'xf86-video-vesa'
          'xf86-video-vmware'
          'xf86-video-voodoo'
          'xf86vidmodeproto'
          'xflux'
          'xineramaproto'
          'xkeyboard-config'
          'xlockmore'
          'xorg'
          'xorg-bdftopcf'
          'xorg-docs'
          'xorg-fonts-100dpi'
          'xorg-fonts-75dpi'
          'xorg-fonts-alias'
          'xorg-fonts-cyrillic'
          'xorg-fonts-encodings'
          'xorg-fonts-misc'
          'xorg-fonts-type1'
          'xorg-font-util'
          'xorg-font-utils'
          'xorg-iceauth'
          'xorg-luit'
          'xorg-mkfontdir'
          'xorg-mkfontscale'
          'xorg-server'
          'xorg-server-common'
          'xorg-server-devel'
          'xorg-server-utils'
          'xorg-server-xdmx'
          'xorg-server-xephyr'
          'xorg-server-xnest'
          'xorg-server-xvfb'
          'xorg-sessreg'
          'xorg-setxkbmap'
          'xorg-smproxy'
          'xorg-twm'
          'xorg-utils'
          'xorg-x11perf'
          'xorg-xauth'
          'xorg-xbacklight'
          'xorg-xcalc'
          'xorg-xclock'
          'xorg-xcmsdb'
          'xorg-xcursorgen'
          'xorg-xdm'
          'xorg-xdpyinfo'
          'xorg-xdriinfo'
          'xorg-xev'
          'xorg-xgamma'
          'xorg-xhost'
          'xorg-xinit'
          'xorg-xinput'
          'xorg-xkbcomp'
          'xorg-xkbevd'
          'xorg-xkbutils'
          'xorg-xkill'
          'xorg-xlsatoms'
          'xorg-xlsclients'
          'xorg-xlsfonts'
          'xorg-xmessage'
          'xorg-xmodmap'
          'xorg-xpr'
          'xorg-xprop'
          'xorg-xrandr'
          'xorg-xrdb'
          'xorg-xrefresh'
          'xorg-xset'
          'xorg-xsetroot'
          'xorg-xvinfo'
          'xorg-xwd'
          'xorg-xwininfo'
          'xorg-xwud'
          'xproto'
          'xterm'
          'xxkb'
          'zenity'
          'zulucrypt')
fi

if [[ "${_gui}" == '1' ]]; then
  declare _vimpkgs=('gvim')
  declare _vimplugs=('vim-vcooler-plugged-git')
else
  declare _vimpkgs=('vim')
  declare _vimplugs=()
fi
_vimpkgs+=('clang'
           'cmake'
           'ctags'
           'dos2unix'
           'mono'
           'patch'
           'patchutils'
           'vimpager'
           'vim-spell-af'
           'vim-spell-am'
           'vim-spell-bg'
           'vim-spell-br'
           'vim-spell-ca'
           'vim-spell-cs'
           'vim-spell-cy'
           'vim-spell-da'
           'vim-spell-de'
           'vim-spell-el'
           'vim-spell-en'
           'vim-spell-eo'
           'vim-spell-es'
           'vim-spell-fo'
           'vim-spell-fr'
           'vim-spell-ga'
           'vim-spell-gd'
           'vim-spell-gl'
           'vim-spell-he'
           'vim-spell-hr'
           'vim-spell-hu'
           'vim-spell-id'
           'vim-spell-it'
           'vim-spell-ku'
           'vim-spell-la'
           'vim-spell-lt'
           'vim-spell-lv'
           'vim-spell-mg'
           'vim-spell-mi'
           'vim-spell-ms'
           'vim-spell-nb'
           'vim-spell-nl'
           'vim-spell-nn'
           'vim-spell-ny'
           'vim-spell-pl'
           'vim-spell-pt'
           'vim-spell-ro'
           'vim-spell-ru'
           'vim-spell-rw'
           'vim-spell-sk'
           'vim-spell-sl'
           'vim-spell-sv'
           'vim-spell-sw'
           'vim-spell-tet'
           'vim-spell-th'
           'vim-spell-tl'
           'vim-spell-tn'
           'vim-spell-uk'
           'vim-spell-yi'
           'vim-spell-zu')
_vimplugs+=('vim-abolish-plugged-git'
            'vim-accordion-plugged-git'
            'vim-align-plugged-git'
            'vim-ansible-yaml-plugged-git'
            'vim-archversion-plugged-git'
            'vim-arpeggio-plugged-git'
            'vim-auto-pairs-plugged-git'
            'vim-autorepeat-plugged-git'
            'vim-awk-support-plugged-git'
            'vim-bbye-plugged-git'
            'vim-better-whitespace-plugged-git'
            'vim-blockit-plugged-git'
            'vim-bufsurf-plugged-git'
            'vim-calendar-plugged-git'
            'vim-capture-plugged-git'
            'vim-cecutil-plugged-git'
            'vim-centaur-plugged-git'
            'vim-clever-f-plugged-git'
            'vim-clone-plugged-git'
            'vim-colors-autumnleaf-plugged-git'
            'vim-colors-base16-plugged-git'
            'vim-colors-baycomb-plugged-git'
            'vim-colors-briofita-plugged-git'
            'vim-colors-bubblegum-plugged-git'
            'vim-colors-buttercream-plugged-git'
            'vim-colors-candyman-plugged-git'
            'vim-colors-chlordane-plugged-git'
            'vim-colors-darcula-plugged-git'
            'vim-colors-eddie-plugged-git'
            'vim-colors-github-plugged-git'
            'vim-colors-gotham-plugged-git'
            'vim-colors-grb256-plugged-git'
            'vim-colors-gruvbox-plugged-git'
            'vim-colors-harold-plugged-git'
            'vim-colors-hybrid-plugged-git'
            'vim-colors-iceberg-plugged-git'
            'vim-colors-inkpot-plugged-git'
            'vim-colors-ir_black-plugged-git'
            'vim-colors-jellybeans-plugged-git'
            'vim-colors-jellyx-plugged-git'
            'vim-colors-kolor-plugged-git'
            'vim-colors-kongo-plugged-git'
            'vim-colors-last256-plugged-git'
            'vim-colors-lettuce-plugged-git'
            'vim-colors-liquidcarbon-plugged-git'
            'vim-colors-lucius-plugged-git'
            'vim-colors-matrix-plugged-git'
            'vim-colors-mayansmoke-plugged-git'
            'vim-colors-mimicpak-plugged-git'
            'vim-colors-miro8-plugged-git'
            'vim-colors-mirodark-plugged-git'
            'vim-colors-molokai-plugged-git'
            'vim-colors-mrkn256-plugged-git'
            'vim-colors-nefertiti-plugged-git'
            'vim-colors-neon-plugged-git'
            'vim-colors-neverland-plugged-git'
            'vim-colors-nighted-plugged-git'
            'vim-colors-oceanlight-plugged-git'
            'vim-colors-pencil-plugged-git'
            'vim-colors-print_bw-plugged-git'
            'vim-colors-seoul256-plugged-git'
            'vim-colors-solarized-plugged-git'
            'vim-colors-sorcerer-plugged-git'
            'vim-colors-stackoverflow-plugged-git'
            'vim-colors-summerfruit256-plugged-git'
            'vim-colors-taqua-plugged-git'
            'vim-colors-tomorrow-plugged-git'
            'vim-colors-vibrantink-plugged-git'
            'vim-colors-vombatidae-plugged-git'
            'vim-colors-vombato-plugged-git'
            'vim-colors-wallaby-plugged-git'
            'vim-colors-xoria256-plugged-git'
            'vim-colors-zenburn-plugged-git'
            'vim-colors-zenesque-plugged-git'
            'vim-columnmove-plugged-git'
            'vim-commentary-plugged-git'
            'vim-committia-plugged-git'
            'vim-csv-plugged-git'
            'vim-ctrlsf-plugged-git'
            'vim-cycle-plugged-git'
            'vim-dbext-plugged-git'
            'vim-dispatch-plugged-git'
            'vim-dockerfile-plugged-git'
            'vim-dragvisuals-plugged-git'
            'vim-dwm-plugged-git'
            'vim-easy-align-plugged-git'
            'vim-easydir-plugged-git'
            'vim-easymotion-plugged-git'
            'vim-easytags-plugged-git'
            'vim-emmet-plugged-git'
            'vim-expand-region-plugged-git'
            'vim-fieldtrip-plugged-git'
            'vim-fish-plugged-git'
            'vim-fixkey-plugged-git'
            'vim-fugitive-plugged-git'
            'vim-fzf-plugged-git'
            'vim-gitv-plugged-git'
            'vim-gnupg-plugged-git'
            'vim-goyo-plugged-git'
            'vim-hilinktrace-plugged-git'
            'vim-hugefile-plugged-git'
            'vim-i3-syntax-plugged-git'
            'vim-incsearch-plugged-git'
            'vim-indent-object-plugged-git'
            'vim-indent-guides-plugged-git'
            'vim-indexed-search-plugged-git'
            'vim-ingo-library-plugged-git'
            'vim-inline_edit-plugged-git'
            'vim-iptables-plugged-git'
            'vim-kangaroo-plugged-git'
            'vim-lawrencium-plugged-git'
            'vim-ledger-plugged-git'
            'vim-lexical-plugged-git'
            'vim-lightline-plugged-git'
            'vim-lilyvim-plugged-git'
            'vim-limelight-plugged-git'
            'vim-linediff-plugged-git'
            'vim-line-juggler-commands-plugged-git'
            'vim-line-juggler-plugged-git'
            'vim-litecorrect-plugged-git'
            'vim-localmacros-plugged-git'
            'vim-lusty-plugged-git'
            'vim-markology-plugged-git'
            'vim-marvim-plugged-git'
            'vim-matchit-plugged-git'
            'vim-matchmaker-plugged-git'
            'vim-matrix-screensaver-plugged-git'
            'vim-misc-xolox-plugged-git'
            'vim-multiple-cursors-plugged-git'
            'vim-neatfoldtext-plugged-git'
            'vim-nerdtree-plugged-git'
            'vim-nerdtree-tabs-plugged-git'
            'vim-nomad-plugged-git'
            'vim-nrrwrgn-plugged-git'
            'vim-numbered-plugged-git'
            'vim-numbers-plugged-git'
            'vim-obsession-plugged-git'
            'vim-obvious-resize-plugged-git'
            'vim-openssl-plugged-git'
            'vim-operator-user-plugged-git'
            'vim-over-plugged-git'
            'vim-pacmanlog-plugged-git'
            'vim-partial-plugged-git'
            'vim-patchreview-plugged-git'
            'vim-projectionist-plugged-git'
            'vim-promptline-plugged-git'
            'vim-prosession-plugged-git'
            'vim-puppet-plugged-git'
            'vim-rainbow-parentheses-plugged-git'
            'vim-recover-plugged-git'
            'vim-rename-plugged-git'
            'vim-repeat-plugged-git'
            'vim-replace-with-register-plugged-git'
            'vim-reporoot-plugged-git'
            'vim-salt-plugged-git'
            'vim-screen-plugged-git'
            'vim-scriptease-plugged-git'
            'vim-searchparty-plugged-git'
            'vim-securemodelines-plugged-git'
            'vim-sideways-plugged-git'
            'vim-signature-plugged-git'
            'vim-simple_bookmarks-plugged-git'
            'vim-singlecompile-plugged-git'
            'vim-slimux-plugged-git'
            'vim-sonictemplate-plugged-git'
            'vim-sqlutilities-plugged-git'
            'vim-streem-plugged-git'
            'vim-submode-plugged-git'
            'vim-surround-plugged-git'
            'vim-syntax-attr-plugged-git'
            'vim-syntaxrange-plugged-git'
            'vim-systemd-plugged-git'
            'vim-table-mode-plugged-git'
            'vim-taboo-plugged-git'
            'vim-tabularity-plugged-git'
            'vim-tabular-plugged-git'
            'vim-tagbar-plugged-git'
            'vim-targets-plugged-git'
            'vim-tbone-plugged-git'
            'vim-textobj-entire-plugged-git'
            'vim-textobj-quote-plugged-git'
            'vim-textobj-sentence-plugged-git'
            'vim-textobj-user-plugged-git'
            'vim-textobj-word-column-plugged-git'
            'vim-thematic-plugged-git'
            'vim-thumbnail-plugged-git'
            'vim-tmuxline-plugged-git'
            'vim-tmux-navigator-plugged-git'
            'vim-tmux-syntax-plugged-git'
            'vim-toml-plugged-git'
            'vim-ultisnips-plugged-git'
            'vim-undotree-plugged-git'
            'vim-unite-outline-plugged-git'
            'vim-unite-plugged-git'
            'vim-unstack-plugged-git'
            'vim-vertical-help-plugged-git'
            'vim-vertical-move-plugged-git'
            'vim-vimfiler-plugged-git'
            'vim-vimproc-plugged-git'
            'vim-vimux-plugged-git'
            'vim-vimshell-plugged-git'
            'vim-vis-plugged-git'
            'vim-visualrepeat-plugged-git'
            'vim-wordy-plugged-git'
            'vim-xterm-color-table-plugged-git'
            'vim-ycm_simple_conf-plugged-git'
            'vim-youcompleteme-plugged-git')

if [[ "${_analysis}" == '1' ]]; then
  _pkgs+=('glances'
          'htop'
          'iftop'
          'inotify-tools'
          'iotop'
          'lsof'
          'ltrace'
          'multitail'
          'nethogs'
          'ngrep'
          'ntop'
          'strace'
          'traceroute')
fi

if [[ "${_android}" == '1' ]]; then
  if [[ "${_gui}" == '1' ]]; then
    _pkgs+=('archon'
            'archon-exec'
            'chromeos-apk-git')
  fi
  _pkgs+=('android-tools'
          'android-udev')
fi

if [[ "${_assembly}" == '1' ]]; then
  _pkgs+=('fasm'
          'nasm'
          'yasm')
  _vimplugs+=('vim-armasm-plugged-git'
              'vim-gas-plugged-git')
fi

if [[ "${_beam}" == '1' ]]; then
  if [[ "${_gui}" == '1' ]]; then
    _pkgs+=('erlang'
            'erlang-docs')
  else
    _pkgs+=('erlang-nox')
  fi
  _pkgs+=('elixir'
          'elixir-build'
          'exenv-git'
          'rebar'
          'relx')
  _vimplugs+=('vim-dialyzer-plugged-git'
              'vim-elixir-plugged-git'
              'vim-erlang-motions-plugged-git'
              'vim-erlang-tags-plugged-git'
              'vim-mix-plugged-git'
              'vim-vimerl-plugged-git'
              'vim-vimix-plugged-git')
fi

if [[ "${_c}" == '1' ]]; then
  if [[ "${_gui}" == '1' ]]; then
    _pkgs+=('codequery')
  fi
  _pkgs+=('astyle'
          'check'
          'cppman'
          'cscope'
          'gdb'
          'lldb'
          'llvm'
          'ruby-starscope'
          'splint'
          'valgrind')
  _vimplugs+=('vim-after-syntax-c-plugged-git'
              'vim-conque-gdb-plugged-git'
              'vim-cpp-enhanced-highlight-plugged-git'
              'vim-cpp-plugged-git'
              'vim-ifdef-plugged-git'
              'vim-objc-plugged-git')
fi

if [[ "${_d}" == '1' ]]; then
  _pkgs+=('dcd'
          'dmd'
          'dtools'
          'dscanner'
          'dub'
          'libphobos')
  _vimplugs+=('vim-dutyl-plugged-git')
fi

if [[ "${_dotnet}" == '1' ]]; then
  _vimplugs+=('vim-csharp-plugged-git'
              'vim-fsharp-plugged-git')
fi

if [[ "${_fonts}" == '1' ]]; then
  if [[ "${_gui}" == '1' ]]; then
    _pkgs+=('gsfonts'
            'opendesktop-fonts'
            'ttf-arphic-ukai'
            'ttf-arphic-uming'
            'ttf-baekmuk'
            'ttf-bitstream-vera'
            'ttf-dejavu'
            'ttf-freebanglafont'
            'ttf-gentium'
            'ttf-google-fonts-git'
            'ttf-hanazono'
            'ttf-hannom'
            'ttf-indic-otf'
            'ttf-junicode'
            'ttf-khmer'
            'ttf-linux-libertine'
            'ttf-meslo'
            'ttf-mph-2b-damase'
            'ttf-nishiki-teki'
            'ttf-sazanami'
            'ttf-symbola'
            'ttf-tibetan-machine'
            'ttf-tlwg'
            'ttf-ubraille'
            'wqy-bitmapfont'
            'wqy-microhei'
            'wqy-zenhei')
  fi
fi

if [[ "${_go}" == '1' ]]; then
  _pkgs+=('go'
          'godep')
  _vimpkgs+=('gotags-git')
  _vimplugs+=('vim-go-extra-plugged-git'
              'vim-go-plugged-git')
fi

if [[ "${_gobi}" == '1' ]]; then
  _pkgs+=('gobi-loader'
          'gobi-firmware'
          'mobile-broadband-provider-info'
          'modemmanager')
fi

if [[ "${_haskell}" == '1' ]]; then
  _pkgs+=('cabal-install'
          'ghc')
  _vimpkgs+=('haskell-ghc-mod'
             'haskell-hasktags'
             'haskell-pointfree'
             'haskell-pointful')
  _vimplugs+=('vim-ghcmod-plugged-git'
              'vim-haskell-conceal-plus-plugged-git'
              'vim-haskell-fold-plugged-git'
              'vim-hasksyn-plugged-git'
              'vim-lhaskell-plugged-git'
              'vim-neco-ghc-plugged-git'
              'vim-syntax-shakespeare-plugged-git')
fi

if [[ "${_julia}" == '1' ]]; then
  _pkgs+=('julia')
  _vimplugs+=('vim-julia-minimalist-plugged-git')
fi

if [[ "${_jvm}" == '1' ]]; then
  _pkgs+=('apache-ant'
          'apache-ant-doc'
          'ca-certificates-java'
          'gradle'
          'gradle-doc'
          'jad'
          'jdk7-openjdk'
          'jdk8-openjdk'
          'maven')
  _vimplugs+=('vim-classpath-plugged-git'
              'vim-jad-plugged-git'
              'vim-java-bytecode-plugged-git'
              'vim-javacomplete-plugged-git'
              'vim-java-plugged-git'
              'vim-java-sql-plugged-git'
              'vim-maven-compiler-plugged-git')
  _pkgs+=('clojure'
          'leiningen'
          'leiningen-completions'
          'nailgun')
  _vimplugs+=('vim-clojure-highlight-plugged-git'
              'vim-clojure-sql-plugged-git'
              'vim-clojure-static-plugged-git'
              'vim-fireplace-plugged-git'
              'vim-leiningen-plugged-git'
              'vim-typedclojure-plugged-git')
  _pkgs+=('grails'
          'grails-docs'
          'groovy'
          'groovy-docs')
  _vimplugs+=('vim-groovim-plugged-git')
  _pkgs+=('sbt'
          'scala'
          'scala-docs')
  _vimplugs+=('vim-sbt-plugged-git'
              'vim-scala-plugged-git')
fi

if [[ "${_latex}" == '1' ]]; then
  if [[ "${_gui}" == '1' ]]; then
    _pkgs+=('elyxer'
            'lyx')
  fi
  _pkgs+=('tex2png'
          'texlive-core')
  _vimplugs+=('vim-vimtex-plugged-git')
fi

if [[ "${_lisp}" == '1' ]]; then
  if [[ "${_gui}" == '1' ]]; then
    _pkgs+=('racket')
  fi
  _pkgs+=('chicken'
          'clisp'
          'ecl'
          'gambit-c'
          'sbcl'
          'scmindent-git')
  _vimplugs+=('vim-paredit-plugged-git'
              'vim-racket-plugged-git'
              'vim-scribble-plugged-git'
              'vim-slime-plugged-git')
fi

if [[ "${_lua}" == '1' ]]; then
  _pkgs+=('lua')
  _vimplugs+=('vim-lua-ftplugin-plugged-git'
              'vim-lua-inspect-plugged-git'
              'vim-moonscript-plugged-git')
fi

if [[ "${_markdown}" == '1' ]]; then
  _pkgs+=('markdown')
  _vimpkgs+=('markdown2ctags')
  _vimplugs+=('vim-markdown-enhancements-plugged-git'
              'vim-markdown-folding-plugged-git'
              'vim-markdown-plugged-git')
fi

if [[ "${_nim}" == '1' ]]; then
  _pkgs+=('nim'
          'nimble')
  _vimplugs+=('vim-nim-plugged-git')
fi

if [[ "${_ocaml}" == '1' ]]; then
  _pkgs+=('ocaml'
          'ocaml-doc'
          'ocaml-findlib'
          'opam')
  _vimpkgs+=('merlin-git')
  _vimplugs+=('vim-merlin-plugged-git')
fi

if [[ "${_perl}" == '1' ]]; then
  _pkgs+=('cpanminus'
          'perlbrew'
          'perl-carton'
          'perl-cpanplus-dist-arch'
          'perl-ev'
          'perl-io-socket-ip'
          'perl-io-socket-socks'
          'perl-io-socket-ssl'
          'perl-mojolicious'
          'perl-net-dns-native')
  _vimplugs+=('vim-mojo-plugged-git'
              'vim-perlomni-plugged-git'
              'vim-perl-plugged-git')
fi

if [[ "${_perl6}" == '1' ]]; then # _perl6pkg dependencies are installed in order
  _perl6pkgs+=('moarvm-git'
               'nqp-git'
               'rakudo-git'
               'panda-git')
fi

if [[ "${_php}" == '1' ]]; then
  _pkgs+=('hhvm'
          'php'
          'php-composer'
          'php-docs'
          'php-pear'
          'php-phpdbg'
          'xdebug')
  _vimplugs+=('vim-hack-plugged-git'
              'vim-phpcomplete-extended-plugged-git'
              'vim-php-error-marker-plugged-git'
              'vim-php-folding-plugged-git'
              'vim-php-indent-plugged-git'
              'vim-php-syntax-plugged-git'
              'vim-xhp-plugged-git')
fi

if [[ "${_python}" == '1' ]]; then
  _pkgs+=('ipython'
          'ipython2'
          'python'
          'python2'
          'python2-ipdb'
          'python2-pip'
          'python2-prompt_toolkit'
          'python2-pycscope'
          'python2-setuptools'
          'python2-vex'
          'python2-virtualenv'
          'python2-virtualenv-clone'
          'python-ipdb'
          'python-pip'
          'python-prompt_toolkit'
          'python-setuptools'
          'python-vex'
          'python-virtualenv'
          'python-virtualenv-clone'
          'python-virtualenvwrapper')
  _vimplugs+=('vim-cython-plugged-git'
              'vim-kivy-plugged-git'
              'vim-python-combined-plugged-git'
              'vim-vimux-ipy-plugged-git'
              'vim-virtualenv-plugged-git')
fi

if [[ "${_rst}" == '1' ]]; then
  _vimpkgs+=('rst2ctags')
  _vimplugs+=('vim-rst-plugged-git')
fi

if [[ "${_ruby}" == '1' ]]; then
  _pkgs+=('ruby'
          'ruby-build'
          'ruby-bundler'
          'ruby-docs'
          'rbenv'
          'rbenv-default-gems'
          'rbenv-each-git'
          'rbenv-vars')
  _vimplugs+=('vim-rabl-plugged-git'
              'vim-rbenv-plugged-git'
              'vim-ruby-plugged-git')
fi

if [[ "${_rust}" == '1' ]]; then
  _pkgs+=('rust')
  _vimplugs+=('vim-rust-plugged-git')
fi

if [[ "${_swift}" == 1 ]]; then
  _vimplugs+=('vim-swift-plugged-git')
fi

if [[ "${_vbox}" == '1' ]]; then
  if [[ "${_gui}" == '1' ]]; then
    _pkgs+=('qt4')
  fi
  _pkgs+=('dkms'
          'linux-headers'
          'net-tools'
          'vagrant'
          'vde2'
          'virtualbox'
          'virtualbox-ext-oracle'
          'virtualbox-guest-iso'
          'virtualbox-host-dkms'
          'virtualbox-host-modules')
fi

if [[ "${_webdev}" == '1' ]]; then
  _pkgs+=('dart'
          'flow'
          'nodejs'
          'nodejs-bower'
          'nodejs-eslint'
          'nodejs-grasp'
          'nodejs-grunt-cli'
          'nodejs-gulp'
          'nodejs-hexo'
          'nodejs-jade'
          'nodejs-jshint'
          'nodejs-jspm'
          'nodejs-jsxhint'
          'nodejs-less'
          'nodejs-n'
          'nodejs-react-tools'
          'nodejs-riot'
          'nodejs-stylus'
          'nodejs-typescript'
          'ruby-sass')
  _vimplugs+=('vim-better-javascript-completion-plugged-git'
              'vim-dart-plugged-git'
              'vim-egs-plugged-git'
              'vim-ejs-syntax-plugged-git'
              'vim-flow-plugged-git'
              'vim-gorillascript-plugged-git'
              'vim-javascript-libraries-syntax-plugged-git'
              'vim-javascript-plugged-git'
              'vim-jquery-plugged-git'
              'vim-js-indent-plugged-git'
              'vim-json5-plugged-git'
              'vim-json-plugged-git'
              'vim-ls-plugged-git'
              'vim-nodejs-errorformat-plugged-git'
              'vim-node-plugged-git'
              'vim-tern-plugged-git'
              'vim-typescript-plugged-git'
              'vim-yajs-plugged-git')
  _vimplugs+=('vim-better-css-completion-plugged-git'
              'vim-css3-syntax-plugged-git'
              'vim-less-plugged-git'
              'vim-stylus-plugged-git')
  _vimplugs+=('vim-breeze-plugged-git'
              'vim-haml-plugged-git'
              'vim-html5-plugged-git'
              'vim-jade-plugged-git'
              'vim-jinja2-syntax-plugged-git'
              'vim-mustache-handlebars-plugged-git'
              'vim-slim-plugged-git')
  if [[ "${_gui}" == '1' ]]; then # https://www.nightmarejs.org/
    _pkgs+=('casperjs-git'
            'nodejs-karma'
            'nodejs-karma-cli'
            'phantomjs'
            'ruby-poltergeist'
            'slimerjs')
  fi
  _pkgs+=('nodejs-buster'
          'perl-www-mechanize'
          'python-grab'
          'python2-grab'
          'python2-mechanize'
          'ruby-capybara'
          'scrapy')
fi

if [[ "${_gui}" == '1' ]]; then
  declare _bitpkgs=('electrum'
                    'zbar')
else
  _headless=1
fi

declare _vimplugs_deps=('vim-align-plugged-git'
                        'vim-bufsync-plugged-git'
                        'vim-clojure-static-plugged-git'
                        'vim-colors-ir_black-plugged-git'
                        'vim-dbext-plugged-git'
                        'vim-dispatch-plugged-git'
                        'vim-fireplace-plugged-git'
                        'vim-fugitive-plugged-git'
                        'vim-gorillascript-plugged-git'
                        'vim-ingo-library-plugged-git'
                        'vim-lightline-plugged-git'
                        'vim-line-juggler-plugged-git'
                        'vim-markdown-plugged-git'
                        'vim-misc-xolox-plugged-git'
                        'vim-nerdtree-plugged-git'
                        'vim-obsession-plugged-git'
                        'vim-php-indent-plugged-git'
                        'vim-php-syntax-plugged-git'
                        'vim-repeat-plugged-git'
                        'vim-scribble-plugged-git'
                        'vim-sideways-plugged-git'
                        'vim-submode-plugged-git'
                        'vim-tabular-plugged-git'
                        'vim-textobj-user-plugged-git'
                        'vim-vimproc-plugged-git'
                        'vim-unite-plugged-git'
                        'vimux-plugged-git'
                        'vim-vis-plugged-git')

# install selected pkgs

                   if [[ "$_debug" == '1' ]]; then
                 echo "****************************"
                 echo "*                          *"
                 echo "* installing selected pkgs *"
                 echo "*                          *"
                 echo "****************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Installing selected pkgs..."

# ten at a time to prevent bugs with pacaur
for (( i=0; i < ${#_pkgs[@]}; i+=10 )); do
  arch-chroot /mnt pacaur -Sy --needed "${_pkgs[$i + 0]}" "${_pkgs[$i + 1]}" \
                                       "${_pkgs[$i + 2]}" "${_pkgs[$i + 3]}" \
                                       "${_pkgs[$i + 4]}" "${_pkgs[$i + 5]}" \
                                       "${_pkgs[$i + 6]}" "${_pkgs[$i + 7]}" \
                                       "${_pkgs[$i + 8]}" "${_pkgs[$i + 9]}" \
                                       --noedit --noconfirm
done
for (( i=0; i < ${#_vimpkgs[@]}; i+=10 )); do
  arch-chroot /mnt pacaur -Sy --needed "${_vimpkgs[$i + 0]}" "${_vimpkgs[$i + 1]}" \
                                       "${_vimpkgs[$i + 2]}" "${_vimpkgs[$i + 3]}" \
                                       "${_vimpkgs[$i + 4]}" "${_vimpkgs[$i + 5]}" \
                                       "${_vimpkgs[$i + 6]}" "${_vimpkgs[$i + 7]}" \
                                       "${_vimpkgs[$i + 8]}" "${_vimpkgs[$i + 9]}" \
                                       --noedit --noconfirm
done
if ! [[ "${_headless}" == '1' ]]; then
  for (( i=0; i < ${#_bitpkgs[@]}; i+=10 )); do
    arch-chroot /mnt pacaur -Sy --needed "${_bitpkgs[$i + 0]}" "${_bitpkgs[$i + 1]}" \
                                         "${_bitpkgs[$i + 2]}" "${_bitpkgs[$i + 3]}" \
                                         "${_bitpkgs[$i + 4]}" "${_bitpkgs[$i + 5]}" \
                                         "${_bitpkgs[$i + 6]}" "${_bitpkgs[$i + 7]}" \
                                         "${_bitpkgs[$i + 8]}" "${_bitpkgs[$i + 9]}" \
                                         --noedit --noconfirm
  done
fi

# install perl6 pkgs from my pkgbuilds

                        if [[ "$_debug" == '1' ]]; then
                      echo "*****************************"
                      echo "*                           *"
                      echo "* installing perl6 packages *"
                      echo "*                           *"
                      echo "*****************************"
                                       fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" && "${_perl6}" == '1' ]] \
  && msg "Installing perl6 pkgs..."

if [[ "${_perl6}" == '1' ]]; then
  git clone https://github.com/atweiden/pkgbuilds /tmp/pkgbuilds --depth=1
  for _perl6pkg in ${!_perl6pkgs[@]}; do
    arch-chroot /mnt su -l -c "pushd /tmp/pkgbuilds/perl6/${_perl6pkgs[$_perl6pkg]} && makepkg -Acsi --noconfirm && popd" ${_user_name}
  done
fi

# install selected vim plugins

                   if [[ "$_debug" == '1' ]]; then
              echo "***********************************"
              echo "*                                 *"
              echo "* installing selected vim plugins *"
              echo "*                                 *"
              echo "***********************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Installing selected vim plugins..."

mkdir -p /mnt/home/${_user_name}/.src
curl https://codeload.github.com/atweiden/{pkgbuilds}/{tar.gz}/{${VERSION_PKGBUILDS}} -o "#1-#3.#2"
tar xvzf pkgbuilds-${VERSION_PKGBUILDS}.tar.gz
mv pkgbuilds-${VERSION_PKGBUILDS} /mnt/home/${_user_name}/.src
arch-chroot /mnt chown -R ${_user_name}:users /home/${_user_name}
# dependencies first, some packages are installed twice
for _vimplug_dep in ${!_vimplugs_deps[@]}; do
  arch-chroot /mnt su -l -c "pushd /home/${_user_name}/.src/pkgbuilds-${VERSION_PKGBUILDS}/${_vimplugs_deps[$_vimplug_dep]} && makepkg -Acsi --noconfirm && popd" ${_user_name}
done
for _vimplug in ${!_vimplugs[@]}; do
  arch-chroot /mnt su -l -c "pushd /home/${_user_name}/.src/pkgbuilds-${VERSION_PKGBUILDS}/${_vimplugs[$_vimplug]} && makepkg -Acsi --noconfirm && popd" ${_user_name}
done

# setup grsec

                   if [[ "$_debug" == '1' ]]; then
                           echo "*********"
                           echo "*       *"
                           echo "* grsec *"
                           echo "*       *"
                           echo "*********"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" && "${_grsec}" == '1' ]] \
  && msg "Setting up Grsecurity / PaX..."

if [[ "$_grsec" == '1' ]]; then
  arch-chroot /mnt usermod -a -G tpe ${_user_name}
  arch-chroot /mnt usermod -a -G tpe root
  arch-chroot /mnt sed -i 's!^GRUB_DEFAULT=0!GRUB_DEFAULT="1>2"!' /etc/default/grub
  arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
fi

# set XDG dirs

                   if [[ "$_debug" == '1' ]]; then
                            echo "*******"
                            echo "*     *"
                            echo "* XDG *"
                            echo "*     *"
                            echo "*******"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" && "${_gui}" == '1' ]] \
  && msg "Configuring XDG user directories..."

if [[ "$_gui" == '1' ]]; then
  cat > /mnt/etc/xdg/user-dirs.defaults <<'EOF'
# Default settings for user directories
#
# The values are relative pathnames from the home directory and
# will be translated on a per-path-element basis into the users locale
DESKTOP=Desktop
DOWNLOAD=Downloads
TEMPLATES=Desktop/Templates
PUBLICSHARE=Desktop/Public
DOCUMENTS=Documents
MUSIC=Desktop/Music
PICTURES=Desktop/Pictures
VIDEOS=Desktop/Videos
EOF
  arch-chroot /mnt su -l -c "xdg-user-dirs-update" ${_user_name}
fi

# setup vbox

                   if [[ "$_debug" == '1' ]]; then
                           echo "********"
                           echo "*      *"
                           echo "* vbox *"
                           echo "*      *"
                           echo "********"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" && "${_vbox}" == '1' ]] \
  && msg "Setting up VirtualBox..."

if [[ "$_vbox" == '1' ]]; then
  arch-chroot /mnt usermod -a -G uucp,vboxsf,vboxusers ${_user_name}
  arch-chroot /mnt usermod -a -G uucp,vboxsf,vboxusers root
  cat > /mnt/etc/modules-load.d/virtualbox.conf <<'EOF'
# Load vboxdrv module at boot
vboxdrv

# Load vboxguest module at boot (only on guest)
#vboxguest

# Load vboxnetadp module at boot
vboxnetadp

# Load vboxnetflt module at boot
vboxnetflt

# Load vboxpci module at boot
vboxpci

# Load vboxsf module at boot (only on guest)
#vboxsf

# Load vboxvideo module at boot (only on guest)
#vboxvideo
EOF
  arch-chroot /mnt systemctl enable dkms
fi

# clean pacaur

                   if [[ "$_debug" == '1' ]]; then
                       echo "****************"
                       echo "*              *"
                       echo "* clean pacaur *"
                       echo "*              *"
                       echo "****************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Cleaning up pacaur cache..."

arch-chroot /mnt rm -rf /tmp/pacaur*
}




# -----------------------------------------------------------------------------
# electrumify: install electrum-headless in chroot
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*  -----------  *"
                       echo "* |electrumify| *"
                       echo "*  -----------  *"
                       echo "*****************"
                                  fi


function electrumify() {

# install electrum-headless deps in chroot

                   if [[ "$_debug" == '1' ]]; then
                  echo "**************************"
                  echo "*                        *"
                  echo "* electrum-headless deps *"
                  echo "*                        *"
                  echo "**************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Installing Electrum headless dependencies..."

arch-chroot /mnt pacaur -Sy --needed python2-ecdsa \
                                     python2-pbkdf2 \
                                     python2-protobuf \
                                     python2-pyasn1 \
                                     python2-pyasn1-modules \
                                     python2-qrcode \
                                     python2-requests \
                                     python2-six \
                                     python2-slowaes \
                                     python2-tlslite --noedit --noconfirm

# place electrum-headless in chroot

                   if [[ "$_debug" == '1' ]]; then
                  echo "***************************"
                  echo "*                         *"
                  echo "* place electrum-headless *"
                  echo "*                         *"
                  echo "***************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Installing Electrum headless in chroot..."

curl https://codeload.github.com/spesmilo/{electrum}/{tar.gz}/{${VERSION_ELECTRUM}} -o "#1-#3.#2"
tar xvzf electrum-${VERSION_ELECTRUM}.tar.gz
pushd electrum-${VERSION_ELECTRUM}
find . -type f -print0 | xargs -0 sed -i 's#/usr/bin/python#/usr/bin/python2#g'
find . -type f -print0 | xargs -0 sed -i 's#/usr/bin/env python#/usr/bin/env python2#g'
popd
mv electrum-${VERSION_ELECTRUM} /mnt/home/${_user_name}
}



# -----------------------------------------------------------------------------
# dotify: install dotfiles
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*  ------  *"
                         echo "* |dotify| *"
                         echo "*  ------  *"
                         echo "************"
                                  fi


function dotify() {

# configure name for GitHub/gitconfig

                   if [[ "$_debug" == '1' ]]; then
                       echo "****************"
                       echo "*              *"
                       echo "* config: name *"
                       echo "*              *"
                       echo "****************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring GitHub personal name..."

if [[   "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n "${bold}${blue}::${normal} ${bold}${white}Enter GitHub personal name${normal} ${bold}${white}[${normal}$_name_default${bold}${white}]${normal}:"; read -p ' ' _name
  _name="${_name:-$_name_default}"
elif [[ -n "$FLAGS_name" ]]; then
  msg   "Reading GitHub personal name from cmdline flag..."
  _name="$FLAGS_name"
elif [[ -n "$NAME" ]]; then
  msg   "Reading GitHub personal name from environment variable..."
  _name="$NAME"
else
  msg   "Using default GitHub personal name..."
  _name="$_name_default"
fi

# configure email for GitHub/gitconfig

                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*               *"
                       echo "* config: email *"
                       echo "*               *"
                       echo "*****************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring GitHub email address..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n "${bold}${blue}::${normal} ${bold}${white}Enter GitHub email address${normal} ${bold}${white}[${normal}$_email_default${bold}${white}]${normal}:"; read -p ' ' _email
  _email="${_email:-$_email_default}"
elif [[ -n "$FLAGS_email" ]]; then
  msg    "Reading GitHub email address from cmdline flag..."
  _email="$FLAGS_email"
elif [[ -n "$EMAIL" ]]; then
  msg    "Reading GitHub email address from environment variable..."
  _email="$EMAIL"
else
  msg    "Using default GitHub email address..."
  _email="$_email_default"
fi

# configure github account name for GitHub/gitconfig

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* config: github *"
                      echo "*                *"
                      echo "******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring GitHub account name..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n "${bold}${blue}::${normal} ${bold}${white}Enter GitHub account name${normal} ${bold}${white}[${normal}$_github_default${bold}${white}]${normal}:"; read -p ' ' _github
  _github="${_github:-$_github_default}"
elif [[ -n "$FLAGS_github" ]]; then
  msg     "Reading GitHub account name from cmdline flag..."
  _github="$FLAGS_github"
elif [[ -n "$GITHUB" ]]; then
  msg     "Reading GitHub account name from environment variable..."
  _github="$GITHUB"
else
  msg     "Using default GitHub account name..."
  _github="$_github_default"
fi

# configure zipcode for f.lux

                   if [[ "$_debug" == '1' ]]; then
                      echo "*******************"
                      echo "*                 *"
                      echo "* config: zipcode *"
                      echo "*                 *"
                      echo "*******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring zipcode for f.lux display temperature..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n  "${bold}${blue}::${normal} ${bold}${white}Enter Zipcode for f.lux${normal} ${bold}${white}[${normal}$_zipcode_default${bold}${white}]${normal}:"; read -p ' ' _zipcode
  _zipcode="${_zipcode:-$_zipcode_default}"
elif [[ -n "$FLAGS_zipcode" ]]; then
  msg      "Reading zipcode for f.lux from cmdline flag..."
  _zipcode="$FLAGS_zipcode"
elif [[ -n "$ZIPCODE" ]]; then
  msg      "Reading zipcode for f.lux from environment variable..."
  _zipcode="$ZIPCODE"
else
  msg      "Using default zipcode for f.lux..."
  _zipcode="$_zipcode_default"
fi

# downloading dotfiles

                   if [[ "$_debug" == '1' ]]; then
                   echo "************************"
                   echo "*                      *"
                   echo "* downloading dotfiles *"
                   echo "*                      *"
                   echo "************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Getting dotfiles..."

mkdir -p /mnt/home/${_user_name}/.src
curl https://codeload.github.com/atweiden/{dotfiles}/{tar.gz}/{${VERSION_DOTFILES}} -o /mnt/home/${_user_name}/.src/"#1-#3.#2"
tar -xvzf /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}.tar.gz -C /mnt/home/${_user_name}/.src
mkdir -p /mnt/root/.src
curl https://codeload.github.com/atweiden/{dotfiles}/{tar.gz}/{${VERSION_DOTFILES}} -o /mnt/root/.src/"#1-#3.#2"
tar -xvzf /mnt/root/.src/dotfiles-${VERSION_DOTFILES}.tar.gz -C /mnt/root/.src

# adjusting dotfile config parameters

                   if [[ "$_debug" == '1' ]]; then
                   echo "************************"
                   echo "*                      *"
                   echo "* configuring dotfiles *"
                   echo "*                      *"
                   echo "************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring dotfiles..."

sed -i "s#\$HOME#/home/${_user_name}#"         /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh /mnt/root/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh
sed -i "s#^name.*#name=\"${_name}\"#"          /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh /mnt/root/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh
sed -i "s#^email.*#email=\"${_email}\"#"       /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh /mnt/root/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh
sed -i "s#^github.*#github=\"${_github}\"#"    /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh /mnt/root/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh
sed -i "s#^zipcode.*#zipcode=\"${_zipcode}\"#" /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh /mnt/root/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh
find /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/_config/obmenu-generator -type f -print0 | xargs -0 sed -i "s#lniux#${_user_name}#g"
find /mnt/root/.src/dotfiles-${VERSION_DOTFILES}/_config/obmenu-generator -type f -print0 | xargs -0 sed -i "s#lniux#root#g"

# fixing permissions

                   if [[ "$_debug" == '1' ]]; then
                    echo "**********************"
                    echo "*                    *"
                    echo "* fixing permissions *"
                    echo "*                    *"
                    echo "**********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Setting ${_user_name} home directory permissions..."

arch-chroot /mnt chown -R ${_user_name}:users /home/${_user_name}

# running bootstrap

                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*               *"
                       echo "* bootstrapping *"
                       echo "*               *"
                       echo "*****************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Installing dotfiles..."

arch-chroot /mnt su -l -c "pushd /home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES} && ./bootstrap.sh && popd" ${_user_name}
arch-chroot /mnt su -l -c "pushd /root/.src/dotfiles-${VERSION_DOTFILES} && HOME=/root ./bootstrap.sh && popd" root

# configuring wallpaper

                   if [[ "$_debug" == '1' ]]; then
                         echo "*************"
                         echo "*           *"
                         echo "* wallpaper *"
                         echo "*           *"
                         echo "*************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" && "${_gui}" == '1' ]] \
  && msg "Configuring wallpaper..."

sed -i 's#^dirs.*#dirs=/usr/share/archlinux/wallpaper;#' /mnt/home/${_user_name}/.config/nitrogen/nitrogen.cfg
cat > /mnt/home/${_user_name}/.config/nitrogen/bg-saved.cfg <<'EOF'
[:0.0]
file=/usr/share/archlinux/wallpaper/archlinux-simplyblack-43.png
mode=5
bgcolor=#000000
EOF
sed -i 's#^dirs.*#dirs=/usr/share/archlinux/wallpaper;#' /mnt/root/.config/nitrogen/nitrogen.cfg
cat > /mnt/root/.config/nitrogen/bg-saved.cfg <<'EOF'
[:0.0]
file=/usr/share/archlinux/wallpaper/archlinux-simplyblack-43.png
mode=5
bgcolor=#000000
EOF

# configuring X11

                   if [[ "$_debug" == '1' ]]; then
                            echo "*******"
                            echo "*     *"
                            echo "* X11 *"
                            echo "*     *"
                            echo "*******"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" && "${_gui}" == '1' ]] \
  && msg "Configuring X11..."

if [[ "${_gui}" == '1' ]]; then
  mv /mnt/etc/X11/xorg.conf.d /mnt/etc/X11/xorg.conf.d.bak
  cp -R /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/etc/X11/xorg.conf.d /mnt/etc/X11/xorg.conf.d
fi

# configuring openvpn

                   if [[ "$_debug" == '1' ]]; then
                          echo "***********"
                          echo "*         *"
                          echo "* openvpn *"
                          echo "*         *"
                          echo "***********"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring openvpn..."

mkdir -p /mnt/etc/openvpn
cp /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/etc/openvpn/update-resolv-conf /mnt/etc/openvpn

# adding systemd service

                   if [[ "$_debug" == '1' ]]; then
                     echo "*********************"
                     echo "*                   *"
                     echo "* kill-ssh-sessions *"
                     echo "*                   *"
                     echo "*********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Enabling kill-ssh-sessions systemd service..."

arch-chroot /mnt su -l -c "systemctl --user enable kill-ssh-sessions" ${_user_name}
}




# -----------------------------------------------------------------------------
# exitify: exit pacstrapit
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                         echo "*************"
                         echo "*  -------  *"
                         echo "* |exitify| *"
                         echo "*  -------  *"
                         echo "*************"
                                  fi


function exitify() {

# exit pacstrapped chroot

                   if [[ "$_debug" == '1' ]]; then
                          echo "**********"
                          echo "*        *"
                          echo "* umount *"
                          echo "*        *"
                          echo "**********"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Unmounting..."

umount /mnt/{boot,home,opt,srv,tmp,usr,var,}

echo "******************************"
echo "*                            *"
echo "* Maybe time for a reboot... *"
echo "*                            *"
echo "******************************"
}




# -----------------------------------------------------------------------------
# main
# -----------------------------------------------------------------------------

function main() {
# dependency checks
checkify

# disk partitioning
gdiskify

# disk encryption
luksify

# base system
pacstrapify

# ssh
if   [[  "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  ask "Enable SSH? (y/N)" "n"
  if [[  "$_retval" == '0' ]]; then sshify; fi
elif [[  "${_ssh}" == '1' ]]; then
  sshify
fi

# supplementary pkgs
if   [[  "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  ask "Install select pkgs? (y/N)" "n"
  if [[  "$_retval" == '0' ]]; then selectify; fi
elif [[  "${_select}" == '1' ]]; then
  selectify
fi

# install electrum-headless
if   [[  "${_headless}" == '1' ]]; then
  electrumify
fi

# install dotfiles
if   [[  "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  ask "Install dotfiles? (y/N)" "n"
  if [[  "$_retval" == '0' ]]; then dotify; fi
elif [[  "${_dotfiles}" == '1' ]]; then
  dotify
fi

# exit
exitify
}

command=$1
case ${command} in
  '') die ;;

  start) main ;;

  version) printversion ;;

  *) die "unrecognized command (${command})" ;;
esac
