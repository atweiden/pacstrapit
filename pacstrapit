#!/bin/bash




. functions.d/askify
. functions.d/chattrify
. functions.d/msgify
. functions.d/shflags/src/shflags




# -----------------------------------------------------------------------------
# config
# -----------------------------------------------------------------------------

# constants
VERSION="0.5.15"
VERSION_DOTFILES="0.5.1"
VERSION_ELECTRUM="1.9.8"

# machine
_partition_default="/dev/sda"
_processor_default="other"
_graphics_default="intel"
_disk_default="hdd"
_luks_name_default="lux"
_luks_pass_default="secret"
_host_name_default="luxor"
_root_pass_default="secret"
_user_name_default="guru"
_user_pass_default="secret"

# dotfiles
_name_default="Andy Weidenbaum"
_email_default="archbaum@gmail.com"
_github_default="atweiden"
_zipcode_default="97210"

# machine's locale # af_ZA (Afrikaans)
                   # ar_AE (Arabic - UAE)
                   # ar_IN (Arabic - India)
                   # ca_ES (Catalan)
                   # cs_CZ (Czech)
                   # da_DK (Danish)
                   # de_DE (German)
                   # en_AU (English - Australia)
                   # en_CA (English - Canada)
                   # en_GB (English - UK)
                   # en_HK (English - HK)
                   # en_NZ (English - New Zealand)
                   # en_US (English - US)
                   # es_AR (Spanish - Argentina)
                   # es_CL (Spanish - Chile)
                   # es_CO (Spanish - Colombia)
                   # es_ES (Spanish - Spain)
                   # es_MX (Spanish - Mexico)
                   # es_PR (Spanish - Puerto Rico)
                   # es_US (Spanish - US)
                   # fa_IR (Farsi)
                   # fi_FI (Finnish)
                   # fr_FR (French)
                   # ga_IE (Irish)
                   # ha_NG (Hausa)
                   # he_IL (Hebrew)
                   # hi_IN (Hindi)
                   # hr_HR (Croatian)
                   # hu_HU (Hungarian)
                   # id_ID (Indonesian)
                   # is_IS (Icelandic)
                   # it_IT (Italian)
                   # ja_JP (Japanese)
                   # km_KH (Khmer)
                   # ko_KR (Korean)
                   # ks_IN (Kashmiri - India)
                   # lg_UG (Ganda)
                   # lt_LT (Lithuanian)
                   # ml_IN (Malayalam - India)
                   # ne_NP (Nepali)
                   # nl_BE (Dutch - Belgium)
                   # nl_NL (Dutch - Netherlands)
                   # nn_NO (Norwegian Nynorsk)
                   # pa_IN (Panjabi - India)
                   # pa_PK (Panjabi - Pakistan)
                   # ph_PH (Filipino)
                   # pl_PL (Polish)
                   # pt_BR (Portuguese - Brazil)
                   # pt_PT (Portuguese - Portugal)
                   # ro_RO (Romanian)
                   # ru_RU (Russian)
                   # sa_IN (Sanskrit - India)
                   # sd_IN (Sindhi)
                   # si_LK (Sinhala)
                   # so_KE (Somali)
                   # sv_SE (Swedish)
                   # ta_IN (Tamil)
                   # th_TH (Thai)
                   # tr_TR (Turkish)
                   # uk_UA (Ukrainian)
                   # ur_IN (Urdu - India)
                   # ur_PK (Urdu - Pakistan)
                   # vi_VN (Vietnamese)
                   # zh_CN (Chinese - Simplified)
                   # zh_TW (Chinese - Traditional)
                   # zu_ZA (Zulu)
                   # etc...
_locale_default="en_US"

# machine's keymap # cz    (Czech)
                   # de    (German)
                   # dk    (Danish)
                   # es    (Spanish)
                   # fi    (Finnish)
                   # fr    (French)
                   # it    (Italian)
                   # jp106 (Japanese)
                   # lt    (Lithuanian)
                   # nl    (Dutch)
                   # no    (Norwegian)
                   # pl    (Polish)
                   # ro    (Romanian)
                   # ru    (Russian)
                   # uk    (English - UK)
                   # us    (English - US)
                   # etc...
_keymap_default="us"

# machine's time zone # Africa/Johannesburg  (SAST)
                      # Africa/Lagos         (WAT)
                      # Africa/Lusaka        (CAT)
                      # Africa/Nairobi       (EAT)
                      # America/Denver       (MST)
                      # America/Indianapolis (CST)
                      # America/Los_Angeles  (PST)
                      # America/New_York     (EST)
                      # Asia/Calcutta        (IST)
                      # Asia/Hong_Kong       (HKT)
                      # Asia/Istanbul        (EET)
                      # Asia/Karachi         (PKT)
                      # Asia/Kathmandu       (NPT)
                      # Asia/Phnom_Penh      (ICT)
                      # Asia/Seoul           (KT)
                      # Asia/Shanghai        (CT)
                      # Asia/Tokyo           (JT)
                      # Australia/Perth      (WST)
                      # Australia/Sydney     (EST)
                      # Europe/Berlin        (CET)
                      # Europe/London        (GMT/BST)
                      # Pacific/Honolulu     (HST)
                      # etc...
_timezone_default="America/Los_Angeles"

# select pkgs
if [[ -n "${FLAGS_select}" || -n "$SELECT" || -n "$FLAGS_bundle" || -n "$BUNDLE" ]]; then
  _select=1
else
  # set to 1 to explicitly enable selectifying without the use of cmdline
  # flags or environment variables
  _select=0
fi

# ssh
if [[ "${FLAGS_ssh}" -eq "${FLAGS_TRUE}" || -n "$SSH" ]]; then
  _ssh=1
else
  # set to 1 to explicitly enable sshifying without the use of cmdline
  # flags or environment variables
  _ssh=0
fi
_hosts_allowed_default="192.168.0."
_electrum_pubkey_default="https://raw.github.com/atweiden/dotfiles/master/_ssh/id_secp256k1.pub"
_user_pubkey_default="https://raw.github.com/atweiden/dotfiles/master/_ssh/id_ed25519.pub"
_user_pubkey_sig_default="https://raw.github.com/atweiden/dotfiles/master/_ssh/id_ed25519.pub.sig"

# dotfiles
if [[ "${FLAGS_dotfiles}" -eq "${FLAGS_TRUE}" || -n "$DOTFILES" ]]; then
  _dotfiles=1
else
  # set to 1 to explicitly enable dotifying without the use of cmdline
  # flags or environment variables
  _dotfiles=0
fi

# verbose on/off
if [[ "${FLAGS_verbose}" -eq "${FLAGS_TRUE}" || -n "$VERBOSE" ]]; then
  _verbose=1
else
  # set to 1 to explicitly enable verbose output without the use of
  # cmdline flags or environment variables
  _verbose=0
fi

# colors
normal=$(tput sgr0)
bold=$(tput bold)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
teal=$(tput setaf 6)
white=$(tput setaf 7)
gray=$(tput setaf 8)




# -----------------------------------------------------------------------------
# cli
# -----------------------------------------------------------------------------

DEFINE_boolean 'interactive' false  'interactive mode'                  'i'
DEFINE_boolean 'concealed'   false  'hidden interactive password input' 'c'
DEFINE_string  'partition'    ' '   'partition in which to install OS'  'P'
DEFINE_string  'processor'    ' '   'processor'                         'C'
DEFINE_string  'graphics'     ' '   'graphics card'                     'G'
DEFINE_string  'disk'         ' '   'hard drive type'                   'D'
DEFINE_string  'locale'       ' '   'locale'                            'A'
DEFINE_string  'keymap'       ' '   'keymap'                            'M'
DEFINE_string  'timezone'     ' '   'timezone'                          'T'
DEFINE_string  'luksname'     ' '   'LUKS encrypted volume name'        'l'
DEFINE_string  'lukspass'     ' '   'LUKS encrypted volume password'    'L'
DEFINE_string  'hostname'     ' '   'Hostname'                          'H'
DEFINE_string  'rootpass'     ' '   'Root user password'                'R'
DEFINE_string  'username'     ' '   'User name'                         'u'
DEFINE_string  'userpass'     ' '   'User password'                     'U'
DEFINE_string  'select'       ' '   'select pkgs  [gui, python, etc]'   't'
DEFINE_string  'bundle'       ' '   'bundled pkgs [full, lite, base]'   'b'
DEFINE_boolean 'ssh'         false  'enable ssh access'                 's'
DEFINE_string  'hostsallowed' ' '   'hosts allowed to connect over ssh' 'a'
DEFINE_string  'electrum'     ' '   'link to Electrum pubkey'           'E'
DEFINE_string  'pubkey'       ' '   'link to user pubkey'               'K'
DEFINE_string  'pubkeysig'    ' '   'link to user pubkey signature'     'S'
DEFINE_boolean 'dotfiles'    false  'install dotfiles'                  'd'
DEFINE_string  'name'         ' '   'Github personal name'              'n'
DEFINE_string  'email'        ' '   'Github email'                      'e'
DEFINE_string  'github'       ' '   'Github account name'               'g'
DEFINE_string  'zipcode'      ' '   'f.lux display temperature zipcode' 'z'
DEFINE_boolean 'verbose'     false  'verbose output'                    'V'

FLAGS_HELP=`cat <<EOF
commands:
  start: start pacstrapit (requires root)
  version: show program version
EOF`

FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"

function printversion() {
echo "${bold}${white}PacstrapIt!${normal} ${bold}${green}v${VERSION}${normal} ${bold}${gray}(${normal}${gray}$(uname -o) $(uname -m)${normal}${bold}${gray})${normal}"
  exit 1
}

function die() {
  if [[ "$#" > '0' ]]; then echo "error: $@" >&2; fi
  flags_help
  exit 1
}

command=$1
case ${command} in
  '') die ;;

  start)
    msg "Starting..." ;;

  version) printversion ;;

  *) die "unrecognized command (${command})" ;;
esac




# -----------------------------------------------------------------------------
# checkify: dependency checks
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                        echo "**************"
                        echo "*  --------  *"
                        echo "* |checkify| *"
                        echo "*  --------  *"
                        echo "**************"
                                  fi


function checkify() {

msg "Resolving dependencies..."

# depends: root

                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*               *"
                       echo "* depends: root *"
                       echo "*               *"
                       echo "*****************"
                                  fi

if ! [[ "$UID" == '0' ]]; then die 'root priviledges required'; fi

# depends: pacman.conf

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* pacman.conf *"
                        echo "*             *"
                        echo "***************"
                                  fi

status "Configuring pacman.conf..."
sed -i '/^CheckSpace.*/a ILoveCandy'           /etc/pacman.conf
sed -i 's!^#Color!Color!'                      /etc/pacman.conf
sed -i 's!^#TotalDownload!TotalDownload!'      /etc/pacman.conf
if [[ "$(uname -m)" == 'x86_64' ]]; then
  echo '[multilib]'                         >> /etc/pacman.conf
  echo 'Include = /etc/pacman.d/mirrorlist' >> /etc/pacman.conf
fi

# depends: rankmirrors

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* rankmirrors *"
                        echo "*             *"
                        echo "***************"
                                  fi

status "Ranking mirrors..."
substatus "This can take up to 20 minutes"
sed -i 's!^#Server!Server!' /etc/pacman.d/mirrorlist
mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
rankmirrors -n 4 /etc/pacman.d/mirrorlist.bak > /etc/pacman.d/mirrorlist

# depends: arch-install-scripts

                   if [[ "$_debug" == '1' ]]; then
               echo "*********************************"
               echo "*                               *"
               echo "* depends: arch-install-scripts *"
               echo "*                               *"
               echo "*********************************"
                                  fi

if ! [[ -x /usr/bin/arch-chroot ]]; then
  status "Depends pkg: arch-install-scripts"
  pacman -Sy arch-install-scripts --noconfirm
fi

# depends: gptfdisk

                   if [[ "$_debug" == '1' ]]; then
                     echo "*********************"
                     echo "*                   *"
                     echo "* depends: gptfdisk *"
                     echo "*                   *"
                     echo "*********************"
                                  fi

if ! [[ -x /usr/bin/gdisk ]]; then
  status "Depends pkg: gptfdisk"
  pacman -Sy gptfdisk --noconfirm
fi

# depends: btrfs-progs

                   if [[ "$_debug" == '1' ]]; then
                   echo "************************"
                   echo "*                      *"
                   echo "* depends: btrfs-progs *"
                   echo "*                      *"
                   echo "************************"
                                  fi

if ! [[ -x /usr/bin/mkfs.btrfs ]]; then
  status "Depends pkg: btrfs-progs"
  pacman -Sy btrfs-progs --noconfirm
fi

# depends: tput

                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*               *"
                       echo "* depends: tput *"
                       echo "*               *"
                       echo "*****************"
                                  fi

if ! [[ -x /usr/bin/tput ]]; then
  status "Depends pkg: ncurses"
  pacman -Sy ncurses --noconfirm
fi

# depends: expect

                   if [[ "$_debug" == '1' ]]; then
                      echo "*******************"
                      echo "*                 *"
                      echo "* depends: expect *"
                      echo "*                 *"
                      echo "*******************"
                                  fi

if ! [[ -x /usr/bin/expect ]]; then
  status "Depends pkg: expect"
  pacman -Sy expect --noconfirm
fi

# depends: iptables

                   if [[ "$_debug" == '1' ]]; then
                     echo "*********************"
                     echo "*                   *"
                     echo "* depends: iptables *"
                     echo "*                   *"
                     echo "*********************"
                                  fi

if ! [[ -x /usr/bin/iptables ]]; then
  status "Depends pkg: iptables"
  pacman -Sy iptables --noconfirm
fi

# depends: base-devel

                   if [[ "$_debug" == '1' ]]; then
                    echo "***********************"
                    echo "*                     *"
                    echo "* depends: base-devel *"
                    echo "*                     *"
                    echo "***********************"
                                  fi

status "Depends pkg: base-devel"
pacman -Sy --needed base-devel --noconfirm

# setting font for convenience

                   if [[ "$_debug" == '1' ]]; then
                       echo "****************"
                       echo "*              *"
                       echo "* setting font *"
                       echo "*              *"
                       echo "****************"
                                  fi

status "Setting font..."
setfont Lat2-Terminus16
}




# -----------------------------------------------------------------------------
# gdiskify: create three GPT partitions for btrfs (no swap)
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                        echo "**************"
                        echo "*  --------  *"
                        echo "* |gdiskify| *"
                        echo "*  --------  *"
                        echo "**************"
                                  fi


function gdiskify() {

# configure partition in which to install OS

                   if [[ "$_debug" == '1' ]]; then
                     echo "*********************"
                     echo "*                   *"
                     echo "* config: partition *"
                     echo "*                   *"
                     echo "*********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring partition..."

declare _block_devices=($(lsblk | awk '{print $1}' | tail -n+2 | tr -cd '[:alnum:] \n' | sed 's#\(^.*\)#/dev/\1#' | egrep 'sd|hd|xvd' | tr -d '[:digit:]' | uniq))
if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  while true; do
    msg      "Available block device numbers"
    echo; for i in "${!_block_devices[@]}"; do echo "       ${bold}${teal}${i}${normal}: ${_block_devices[${i}]}"
    done; echo
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Select a block device number for partitioning:${normal}"; read -p ' ' _block_device_number
    echo     "${bold}${blue}::${normal} ${bold}${white}You chose${normal} ${bold}${teal}${_block_devices[${_block_device_number}]}${normal}"
    echo     "${bold}${yellow}::${normal} ${bold}${white}Data in${normal}   ${bold}${teal}${_block_devices[${_block_device_number}]}${normal} ${bold}${red}WILL BE DESTROYED${normal}."
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Type in${normal}   ${bold}${teal}${_block_devices[${_block_device_number}]}${normal} ${bold}${white}to continue:${normal}"; read -p ' ' _partition_confirm
    if [[    "${_block_devices[${_block_device_number}]}" == "$_partition_confirm" ]]; then break; fi
    echo     "${bold}${yellow}::${normal} Please try again"
  done
  _partition="${_block_devices[${_block_device_number}]}"
elif [[ -n   "$FLAGS_partition" ]]; then
  msg        "Reading partition from cmdline flag..."
  _partition="$FLAGS_partition"
elif [[ -n   "$PARTITION" ]]; then
  msg        "Reading partition from environment variable..."
  _partition="$PARTITION"
else
  msg        "Using default partition..."
  _partition="$_partition_default"
fi

# partition disks

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* spawning gdisk *"
                      echo "*                *"
                      echo "******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Partitioning disks..."

expect <<EOF
  spawn gdisk ${_partition}
  expect "Command*" {
    send "o\r"
  }
  expect "Proceed*" {
    send "Y\r"
  }
  expect "Command*" {
    send "n\r"
  }
  expect "Partition number*" {
    send "1\r"
  }
  expect "First sector*" {
    send "\r"
  }
  expect "Last sector*" {
    send "+2M\r"
  }
  expect "Hex code or GUID*" {
    send "EF02\r"
  }
  expect "Command*" {
    send "n\r"
  }
  expect "Partition number*" {
    send "2\r"
  }
  expect "First sector*" {
    send "\r"
  }
  expect "Last sector*" {
    send "+128M\r"
  }
  expect "Hex code or GUID*" {
    send "8300\r"
  }
  expect "Command*" {
    send "n\r"
  }
  expect "Partition number*" {
    send "3\r"
  }
  expect "First sector*" {
    send "\r"
  }
  expect "Last sector*" {
    send "\r"
  }
  expect "Hex code or GUID*" {
    send "8300\r"
  }
  expect "Command*" {
    send "w\r"
  }
  expect "Do you want to proceed*" {
    send "Y\r"
  }
  expect eof
EOF
}




# -----------------------------------------------------------------------------
# luksify: create btrfs on luks system with unencrypted /boot
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                         echo "*************"
                         echo "*  -------  *"
                         echo "* |luksify| *"
                         echo "*  -------  *"
                         echo "*************"
                                  fi


function luksify() {

# configure machine's luks devmapper name

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: luksname *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring luks volume name..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n    "${bold}${blue}::${normal} ${bold}${white}Enter LUKS devmapper name${normal} ${bold}${white}[${normal}$_luks_name_default${bold}${white}]${normal}:"; read -p ' ' _luks_name
  _luks_name="${_luks_name:-$_luks_name_default}"
elif [[ -n   "$FLAGS_luksname" ]]; then
  msg        "Reading LUKS devmapper name from cmdline flag..."
  _luks_name="$FLAGS_luksname"
elif [[ -n   "$LUKS_NAME" ]]; then
  msg        "Reading LUKS devmapper name from environment variable..."
  _luks_name="$LUKS_NAME"
else
  msg        "Using default LUKS devmapper name..."
  _luks_name="$_luks_name_default"
fi

# configure machine's luks passphrase

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: lukspass *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring luks passphrase..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" || "${FLAGS_concealed}" -eq "${FLAGS_TRUE}" ]]; then
  while true; do
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Enter passphrase for LUKS encrypted volume:${normal}"; read -s -p ' ' _luks_pass
    echo
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Verify passphrase:${normal}"; read -s -p ' ' _luks_pass_confirm
    echo
    if [[    "$_luks_pass" == "$_luks_pass_confirm" && -n "$_luks_pass" ]]; then break; fi
    if [[ -z "$_luks_pass" ]]; then
      echo   "${bold}${yellow}::${normal} LUKS passphrase cannot be blank. Please try again"
    else
      echo   "${bold}${yellow}::${normal} Please try again"
    fi
  done
elif [[ -n   "$FLAGS_lukspass" ]]; then
  msg        "Reading LUKS encrypted volume passphrase from cmdline flag..."
  _luks_pass="$FLAGS_lukspass"
elif [[ -n   "$LUKS_PASS" ]]; then
  msg        "Reading LUKS encrypted volume passphrase from environment variable..."
  _luks_pass="$LUKS_PASS"
else
  msg        "Using default LUKS encrypted volume passphrase..."
  _luks_pass="$_luks_pass_default"
fi

# create unencrypted ext2 filesystem for /boot

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* mkfs.ext2 boot *"
                      echo "*                *"
                      echo "******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Making ext2 boot partition..."

mkfs.ext2 ${_partition}2

# load kernel modules required for luks

                   if [[ "$_debug" == '1' ]]; then
                      echo "*******************"
                      echo "*                 *"
                      echo "* dm_mod dm-crypt *"
                      echo "*                 *"
                      echo "*******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Loading kernel modules..."

modprobe dm_mod dm-crypt

# create luks root partition

                   if [[ "$_debug" == '1' ]]; then
              echo "**********************************"
              echo "*                                *"
              echo "* spawning cryptsetup luksFormat *"
              echo "*                                *"
              echo "**********************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Encrypting ${_partition}3..."

expect <<EOF
  spawn cryptsetup --cipher aes-xts-plain64 \
                   --key-size 512           \
                   --hash sha512            \
                   --iter-time 5000         \
                   --use-random             \
                   --verify-passphrase      \
                   luksFormat ${_partition}3
  expect "Are you sure*" {
    send "YES\r"
  }
  expect "Enter*" {
    send "${_luks_pass}\r"
  }
  expect "Verify*" {
    send "${_luks_pass}\r"
  }
  expect eof
EOF

# open luks root partition

                   if [[ "$_debug" == '1' ]]; then
               echo "********************************"
               echo "*                              *"
               echo "* spawning cryptsetup luksOpen *"
               echo "*                              *"
               echo "********************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Opening ${_partition}3..."

expect <<EOF
  spawn cryptsetup luksOpen ${_partition}3 ${_luks_name}
  expect "Enter*" {
    send "${_luks_pass}\r"
  }
  expect eof
EOF

# create btrfs filesystem

                   if [[ "$_debug" == '1' ]]; then
               echo "*********************************"
               echo "*                               *"
               echo "* mkfs.btrfs devmapper luksroot *"
               echo "*                               *"
               echo "*********************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Putting btrfs on LUKS encrypted ${_partition}3..."

mkfs.btrfs /dev/mapper/${_luks_name}

# create and mount main btrfs subvolumes

                   if [[ "$_debug" == '1' ]]; then
           echo "****************************************"
           echo "*                                      *"
           echo "* mounting devmapper luksroot in /mnt2 *"
           echo "*                                      *"
           echo "****************************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Mounting btrfs on LUKS encrypted ${_partition}3..."

mkdir -p /mnt2
mount -t btrfs -o rw,noatime,nodiratime,compress=lzo,space_cache /dev/mapper/${_luks_name} /mnt2

                   if [[ "$_debug" == '1' ]]; then
            echo "**************************************"
            echo "*                                    *"
            echo "* creating btrfs subvolumes in /mnt2 *"
            echo "*                                    *"
            echo "**************************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Creating btrfs subvolumes..."

cd /mnt2
btrfs subvolume create @
btrfs subvolume create @home
btrfs subvolume create @opt
btrfs subvolume create @srv
btrfs subvolume create @tmp
btrfs subvolume create @usr
btrfs subvolume create @var

                   if [[ "$_debug" == '1' ]]; then
             echo "*************************************"
             echo "*                                   *"
             echo "* mounting btrfs subvolumes in /mnt *"
             echo "*                                   *"
             echo "*************************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Mounting btrfs subvolumes..."

mount -t btrfs -o rw,noatime,nodiratime,compress=lzo,space_cache,subvol=@ /dev/mapper/${_luks_name} /mnt
for _btrfs_dir in home opt srv tmp usr var; do
  mkdir -p /mnt/${_btrfs_dir} && mount -t btrfs -o rw,noatime,nodiratime,compress=lzo,space_cache,subvol=@${_btrfs_dir} /dev/mapper/${_luks_name} /mnt/${_btrfs_dir}
done

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* unmounting /mnt2 *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Cleaning up..."

cd && umount /mnt2 && rmdir /mnt2 --ignore-fail-on-non-empty

                   if [[ "$_debug" == '1' ]]; then
         echo "*********************************************"
         echo "*                                           *"
         echo "* mounting ext2 boot partition in /mnt/boot *"
         echo "*                                           *"
         echo "*********************************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Mounting boot partition..."

mkdir -p /mnt/boot && mount ${_partition}2 /mnt/boot
}




# -----------------------------------------------------------------------------
# pacstrapify: initialize and configure system
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*  -----------  *"
                       echo "* |pacstrapify| *"
                       echo "*  -----------  *"
                       echo "*****************"
                                  fi


function pacstrapify() {

# configure machine's processor

                   if [[ "$_debug" == '1' ]]; then
                     echo "*********************"
                     echo "*                   *"
                     echo "* config: processor *"
                     echo "*                   *"
                     echo "*********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring processor..."

declare _processors=('intel' 'other')
if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  while true; do
    msg      "Available processors"
    echo
    for i in "${!_processors[@]}"; do echo "       ${bold}${teal}${i}${normal}: ${_processors[${i}]}"
    done
    echo
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Select a processor number:${normal}"; read -p ' ' _processor_number
    echo     "${bold}${blue}::${normal} ${bold}${white}You chose${normal} ${bold}${teal}${_processors[${_processor_number}]}${normal}"
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Type in${normal}   ${bold}${teal}${_processors[${_processor_number}]}${normal} ${bold}${white}to continue:${normal}"; read -p ' ' _processor_confirm
    if [[    "${_processors[${_processor_number}]}" == "$_processor_confirm" ]]; then break; fi
    echo     "${bold}${yellow}::${normal} Please try again"
  done
  _processor="${_processors[${_processor_number}]}"
elif [[ -n   "$FLAGS_processor" ]]; then
  msg        "Reading processor from cmdline flag..."
  _processor="$FLAGS_processor"
elif [[ -n   "$PROCESSOR" ]]; then
  msg        "Reading processor from environment variable..."
  _processor="$PROCESSOR"
else
  msg        "Using default processor..."
  _processor="$_processor_default"
fi

# configure machine's graphics card

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: graphics *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring graphics card..."

declare _gpus=('intel' 'nvidia' 'radeon')
if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  while true; do
    msg     "Available graphics cards"
    echo
    for i in "${!_gpus[@]}"; do echo "       ${bold}${teal}${i}${normal}: ${_gpus[${i}]}"
    done
    echo
    echo -n "${bold}${blue}::${normal} ${bold}${white}Select a graphics card number:${normal}"; read -p ' ' _gpu_number
    echo    "${bold}${blue}::${normal} ${bold}${white}You chose${normal} ${bold}${teal}${_gpus[${_gpu_number}]}${normal}"
    echo -n "${bold}${blue}::${normal} ${bold}${white}Type in${normal}   ${bold}${teal}${_gpus[${_gpu_number}]}${normal} ${bold}${white}to continue:${normal}"; read -p ' ' _graphics_confirm
    if [[   "${_gpus[${_gpu_number}]}" == "$_graphics_confirm" ]]; then break; fi
    echo    "${bold}${yellow}::${normal} Please try again"
  done
  _graphics="${_processors[${_processor_number}]}"
elif [[ -n  "$FLAGS_graphics" ]]; then
  msg       "Reading graphics card from cmdline flag..."
  _graphics="$FLAGS_graphics"
elif [[ -n  "$GRAPHICS" ]]; then
  msg       "Reading graphics card from environment variable..."
  _graphics="$GRAPHICS"
else
  msg       "Using default graphics card..."
  _graphics="$_graphics_default"
fi

# configure machine's hard drive

                   if [[ "$_debug" == '1' ]]; then
                       echo "****************"
                       echo "*              *"
                       echo "* config: disk *"
                       echo "*              *"
                       echo "****************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring hard drive type..."

declare _disks=('hdd' 'ssd' 'usb')
if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  while true; do
    msg      "Available hard drive targets"
    echo
    for i in "${!_disks[@]}"; do echo "       ${bold}${teal}${i}${normal}: ${_disks[${i}]}"
    done
    echo
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Select a hard drive target number:${normal}"; read -p ' ' _disk_number
    echo     "${bold}${blue}::${normal} ${bold}${white}You chose${normal} ${bold}${teal}${_disks[${_disk_number}]}${normal}"
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Type in${normal}   ${bold}${teal}${_disks[${_disk_number}]}${normal} ${bold}${white}to continue:${normal}"; read -p ' ' _disk_confirm
    if [[    "${_disks[${_disk_number}]}" == "$_disk_confirm" ]]; then break; fi
    echo     "${bold}${yellow}::${normal} Please try again"
  done
  _disk="${_disks[${_disk_number}]}"
elif [[ -n   "$FLAGS_disk" ]]; then
  msg        "Reading hard drive target from cmdline flag..."
  _disk="$FLAGS_disk"
elif [[ -n   "$DISK" ]]; then
  msg        "Reading hard drive target from environment variable..."
  _disk="$DISK"
else
  msg        "Using default hard drive target..."
  _disk="$_disk_default"
fi

# pacstrap packages

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* pacstrap *"
                         echo "*          *"
                         echo "************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Bootstrapping initial chroot with pacstrap..."

pacstrap /mnt abs                  \
              arch-install-scripts \
              base                 \
              base-devel           \
              bash-completion      \
              btrfs-progs          \
              ca-certificates      \
              dhclient             \
              dialog               \
              dnscrypt-proxy       \
              ed                   \
              ethtool              \
              expect               \
              gptfdisk             \
              grub-bios            \
              haveged              \
              iproute2             \
              iw                   \
              kexec-tools          \
              net-tools            \
              openresolv           \
              openssh              \
              python2              \
              sshpass              \
              tmux                 \
              unzip                \
              wget                 \
              wireless_tools       \
              wpa_actiond          \
              wpa_supplicant       \
              zip                  \
              zsh

# install a bootloader

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* genfstab *"
                         echo "*          *"
                         echo "************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Generating /etc/fstab..."

genfstab -U -p /mnt >> /mnt/etc/fstab

# configure machine's hostname

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: hostname *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring hostname..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n    "${bold}${blue}::${normal} ${bold}${white}Enter hostname for machine${normal} ${bold}${white}[${normal}$_host_name_default${bold}${white}]${normal}:"; read -p ' ' _host_name
  _host_name="${_host_name:-$_host_name_default}"
elif [[ -n   "$FLAGS_hostname" ]]; then
  msg        "Reading hostname from cmdline flag..."
  _host_name="$FLAGS_hostname"
elif [[ -n   "$HOST_NAME" ]]; then
  msg        "Reading hostname from environment variable..."
  _host_name="$HOST_NAME"
else
  msg        "Using default hostname..."
  _host_name="$_host_name_default"
fi

# set hostname

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* hostname *"
                         echo "*          *"
                         echo "************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Setting hostname..."

echo ${_host_name} > /mnt/etc/hostname

# set nameservers

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* DNSCrypt *"
                         echo "*          *"
                         echo "************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Fixing resolver configuration file for DNSCrypt..."

cat >> /mnt/etc/resolv.conf.head <<'EOF'
# DNSCrypt
options edns0
nameserver 127.0.0.1

# OpenDNS nameservers
nameserver 208.67.222.222
nameserver 208.67.220.220

# Google nameservers
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF

# configure locale

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* config: locale *"
                      echo "*                *"
                      echo "******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring locale..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  msg "Available locales"
  read -d '' locales <<'EOF'
# af_ZA (Afrikaans) # es_MX (Spanish)    # ko_KR (Korean)     # ru_RU (Russian)
# ar_AE (Arabic)    # es_PR (Spanish)    # ks_IN (Kashmiri)   # sa_IN (Sanskrit)
# ar_IN (Arabic)    # es_US (Spanish)    # lg_UG (Ganda)      # sd_IN (Sindhi)
# ca_ES (Catalan)   # fa_IR (Farsi)      # lt_LT (Lithuanian) # si_LK (Sinhala)
# cs_CZ (Czech)     # fi_FI (Finnish)    # ml_IN (Malayalam)  # so_KE (Somali)
# da_DK (Danish)    # fr_FR (French)     # ne_NP (Nepali)     # sv_SE (Swedish)
# de_DE (German)    # ga_IE (Irish)      # nl_BE (Dutch)      # ta_IN (Tamil)
# en_AU (English)   # ha_NG (Hausa)      # nl_NL (Dutch)      # th_TH (Thai)
# en_CA (English)   # he_IL (Hebrew)     # nn_NO (Nynorsk)    # tr_TR (Turkish)
# en_GB (English)   # hi_IN (Hindi)      # pa_IN (Panjabi)    # uk_UA (Ukrainian)
# en_HK (English)   # hr_HR (Croatian)   # pa_PK (Panjabi)    # ur_IN (Urdu)
# en_NZ (English)   # hu_HU (Hungarian)  # ph_PH (Filipino)   # ur_PK (Urdu)
# en_US (English)   # id_ID (Indonesian) # pl_PL (Polish)     # vi_VN (Vietnamese)
# es_AR (Spanish)   # is_IS (Icelandic)  # pt_BR (Portuguese) # zh_CN (Chinese - Simplified)
# es_CL (Spanish)   # it_IT (Italian)    # pt_PT (Portuguese) # zh_TW (Chinese - Traditional)
# es_CO (Spanish)   # ja_JP (Japanese)   # ro_RO (Romanian)   # zu_ZA (Zulu)
# es_ES (Spanish)   # km_KH (Khmer)
EOF
  printf  "${green}${locales}${normal}\n"
  echo -n "${bold}${blue}::${normal} ${bold}${white}Enter locale${normal} ${bold}${white}[${normal}$_locale_default${bold}${white}]${normal}:"; read -p ' ' _locale
  _locale="${_locale:-$_locale_default}"
elif [[ -n "$FLAGS_locale" ]]; then
  msg     "Reading locale from cmdline flag..."
  _locale="$FLAGS_locale"
elif [[ -n "$LOCALE" ]]; then
  msg     "Reading locale from environment variable..."
  _locale="$LOCALE"
else
  msg     "Using default locale..."
  _locale="$_locale_default"
fi

# set locale

                   if [[ "$_debug" == '1' ]]; then
                          echo "**********"
                          echo "*        *"
                          echo "* locale *"
                          echo "*        *"
                          echo "**********"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Applying locale..."

sed -i "s!#${_locale}\.UTF-8 UTF-8!${_locale}\.UTF-8 UTF-8!" /mnt/etc/locale.gen
arch-chroot /mnt locale-gen
cat >> /mnt/etc/locale.conf <<EOF
LANG=${_locale}.UTF-8
LC_TIME=${_locale}.UTF-8
EOF

# configure keymap

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* config: keymap *"
                      echo "*                *"
                      echo "******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring keymap..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  msg "Available keymaps"
  read -d '' keymaps <<'EOF'
# cz    (Czech)
# de    (German)
# dk    (Danish)
# es    (Spanish)
# fi    (Finnish)
# fr    (French)
# it    (Italian)
# jp106 (Japanese)
# lt    (Lithuanian)
# nl    (Dutch)
# no    (Norwegian)
# pl    (Polish)
# ro    (Romanian)
# ru    (Russian)
# uk    (English - UK)
# us    (English - US)
EOF
  printf  "${green}${keymaps}${normal}\n"
  echo -n "${bold}${blue}::${normal} ${bold}${white}Enter keymap${normal} ${bold}${white}[${normal}$_keymap_default${bold}${white}]${normal}:"; read -p ' ' _keymap
  _keymap="${_keymap:-$_keymap_default}"
elif [[ -n "$FLAGS_keymap" ]]; then
  msg     "Reading keymap from cmdline flag..."
  _keymap="$FLAGS_keymap"
elif [[ -n "$KEYMAP" ]]; then
  msg     "Reading keymap from environment variable..."
  _keymap="$KEYMAP"
else
  msg     "Using default keymap..."
  _keymap="$_keymap_default"
fi

# set console font

                   if [[ "$_debug" == '1' ]]; then
                          echo "**********"
                          echo "*        *"
                          echo "* keymap *"
                          echo "*        *"
                          echo "**********"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Applying keymap..."

cat >> /mnt/etc/vconsole.conf <<EOF
KEYMAP=${_keymap}
FONT=Lat2-Terminus16
FONT_MAP=
EOF

# configure timezone

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: timezone *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring timezone..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  msg "Available timezones"
read -d '' timezones <<'EOF'
# Africa/Johannesburg  (SAST) # Asia/Karachi     (PKT)
# Africa/Lagos         (WAT)  # Asia/Kathmandu   (NPT)
# Africa/Lusaka        (CAT)  # Asia/Phnom_Penh  (ICT)
# Africa/Nairobi       (EAT)  # Asia/Seoul       (KT)
# America/Denver       (MST)  # Asia/Shanghai    (CT)
# America/Indianapolis (CST)  # Asia/Tokyo       (JT)
# America/Los_Angeles  (PST)  # Australia/Perth  (WST)
# America/New_York     (EST)  # Australia/Sydney (EST)
# Asia/Calcutta        (IST)  # Europe/Berlin    (CET)
# Asia/Hong_Kong       (HKT)  # Europe/London    (GMT/BST)
# Asia/Istanbul        (EET)  # Pacific/Honolulu (HST)
EOF
  printf    "${green}${timezones}${normal}\n"
  echo -n   "${bold}${blue}::${normal} ${bold}${white}Enter timezone${normal} ${bold}${white}[${normal}$_timezone_default${bold}${white}]${normal}:"; read -p ' ' _timezone
  _timezone="${_timezone:-$_timezone_default}"
elif [[ -n  "$FLAGS_timezone" ]]; then
  msg       "Reading timezone from cmdline flag..."
  _timezone="$FLAGS_timezone"
elif [[ -n  "$TIMEZONE" ]]; then
  msg       "Reading timezone from environment variable..."
  _timezone="$TIMEZONE"
else
  msg       "Using default timezone..."
  _timezone="$_timezone_default"
fi

# set timezone

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* timezone *"
                         echo "*          *"
                         echo "************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Setting timezone..."

arch-chroot /mnt ln -s /usr/share/zoneinfo/${_timezone} /etc/localtime

# set hardware clock

                   if [[ "$_debug" == '1' ]]; then
                          echo "***********"
                          echo "*         *"
                          echo "* hwclock *"
                          echo "*         *"
                          echo "***********"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Setting hardware clock..."

arch-chroot /mnt hwclock --systohc --utc

# configure pacman.conf

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* pacman.conf *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Adjusting pacman.conf..."

sed -i '/^CheckSpace.*/a ILoveCandy'           /mnt/etc/pacman.conf
sed -i 's!^#Color!Color!'                      /mnt/etc/pacman.conf
sed -i 's!^#TotalDownload!TotalDownload!'      /mnt/etc/pacman.conf
if [[ "$(uname -m)" == 'x86_64' ]]; then
  echo '[multilib]'                         >> /mnt/etc/pacman.conf
  echo 'Include = /etc/pacman.d/mirrorlist' >> /mnt/etc/pacman.conf
fi

# rankmirrors

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* rankmirrors *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Finding four fastest mirrors..."

sed -i 's!^#Server!Server!' /mnt/etc/pacman.d/mirrorlist
mv /mnt/etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist.bak
rankmirrors -n 4 /mnt/etc/pacman.d/mirrorlist.bak > /mnt/etc/pacman.d/mirrorlist

# build pacaur

                   if [[ "$_debug" == '1' ]]; then
                       echo "****************"
                       echo "*              *"
                       echo "* build pacaur *"
                       echo "*              *"
                       echo "****************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Readying pacaur..."

pacman -Sy --needed curl expac pacman perl sudo yajl --noconfirm
for _pkg in cower pacaur; do
  mkdir -p /root/.src && cd /root/.src
  rm -rf $_pkg ${_pkg}.tar.gz && mkdir -p $_pkg
  curl -k -O https://aur.archlinux.org/packages/${_pkg:0:2}/$_pkg/$_pkg.tar.gz
  tar -xvzf ${_pkg}.tar.gz --strip 1 -C $_pkg
  cd $_pkg
  makepkg -Acsi --asroot --noconfirm
  cd ..
done

# install pacaur

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* install pacaur *"
                      echo "*                *"
                      echo "******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Installing pacaur..."

arch-chroot /mnt pacman -Sy --needed curl expac pacman perl sudo yajl --noconfirm
for _pkg in cower pacaur; do
  mkdir -p /mnt/root/.src/$_pkg
  for _pkgtarxz in `find /root/.src/$_pkg -type f -name "*.pkg.tar.xz"`; do
    cp ${_pkgtarxz} /mnt/root/.src/$_pkg
  done
  arch-chroot /mnt find /root/.src/$_pkg -type f -name "*.pkg.tar.xz" -exec pacman -U --noconfirm '{}' \;
done

# install zramswap

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* install zramswap *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Installing zramswap..."

arch-chroot /mnt pacaur -Sy --needed --asroot zramswap --noedit --noconfirm

# always suspend to RAM

                   if [[ "$_debug" == '1' ]]; then
                    echo "**********************"
                    echo "*                    *"
                    echo "* systemd sleep.conf *"
                    echo "*                    *"
                    echo "**********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring system sleep behavior..."

cat >> /mnt/etc/systemd/sleep.conf <<'EOF'
[Sleep]
SuspendMode=mem
HibernateMode=mem
HybridSleepMode=mem
SuspendState=mem
HibernateState=mem
HybridSleepState=mem
EOF

# set modprobe.conf

                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*               *"
                       echo "* modprobe.conf *"
                       echo "*               *"
                       echo "*****************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Applying kernel module blacklist..."

cat >> /mnt/etc/modprobe.d/modprobe.conf <<'EOF'
alias floppy off
blacklist fd0
blacklist floppy
blacklist bcma
blacklist snd_pcsp
blacklist pcspkr
EOF

# set initramfs

                   if [[ "$_debug" == '1' ]]; then
                         echo "*************"
                         echo "*           *"
                         echo "* initramfs *"
                         echo "*           *"
                         echo "*************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Generating initramfs..."

if   [[ "${_disk}" == 'usb' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c"!' /etc/mkinitcpio.conf
elif [[ "${_processor}" == 'intel' && "${_graphics}" == 'intel' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c-intel i915"!' /etc/mkinitcpio.conf
elif [[ "${_processor}" == 'intel' && "${_graphics}" == 'nvidia' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c-intel nouveau"!' /etc/mkinitcpio.conf
elif [[ "${_processor}" == 'intel' && "${_graphics}" == 'radeon' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c-intel radeon"!' /etc/mkinitcpio.conf
elif [[ "${_graphics}" == 'intel' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c i915"!' /etc/mkinitcpio.conf
elif [[ "${_graphics}" == 'nvidia' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c nouveau"!' /etc/mkinitcpio.conf
elif [[ "${_graphics}" == 'radeon' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c radeon"!' /etc/mkinitcpio.conf
fi

if   [[ "${_disk}" == 'usb' ]]; then
  arch-chroot /mnt sed -i 's!^HOOKS.*!HOOKS="base udev block autodetect modconf keyboard keymap encrypt btrfs filesystems shutdown usr"!' /etc/mkinitcpio.conf
else
  arch-chroot /mnt sed -i 's!^HOOKS.*!HOOKS="base udev autodetect modconf block keyboard keymap encrypt btrfs filesystems shutdown usr"!' /etc/mkinitcpio.conf
fi
arch-chroot /mnt sed -i   's!^FILES.*!FILES="/etc/modprobe.d/modprobe.conf"!' /etc/mkinitcpio.conf
arch-chroot /mnt mkinitcpio -p linux

# install grub

                   if [[ "$_debug" == '1' ]]; then
                           echo "********"
                           echo "*      *"
                           echo "* grub *"
                           echo "*      *"
                           echo "********"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Installing GRUB..."

_luks_uuid=$(lsblk -f | grep ${_partition##/dev/}3 | awk '{print $3}')
if   [[ "${_disk}" == 'usb' ]]; then
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX=.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@ elevator=noop nomodeset\"!" /etc/default/grub
elif [[ "${_disk}" == 'ssd' && "${_graphics}" == 'radeon' ]]; then
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX=.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@ elevator=noop radeon.dpm=1\"!" /etc/default/grub
elif [[ "${_disk}" == 'ssd' ]]; then
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX=.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@ elevator=noop\"!" /etc/default/grub
elif [[ "${_graphics}" == 'radeon' ]]; then
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX=.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@ radeon.dpm=1\"!" /etc/default/grub
else
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX=.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@\"!" /etc/default/grub
fi
arch-chroot /mnt grub-install --target=i386-pc --recheck ${_partition}
arch-chroot /mnt cp /usr/share/locale/en\@quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

# configure root password

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: rootpass *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring root password..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" || "${FLAGS_concealed}" -eq "${FLAGS_TRUE}" ]]; then
  while true; do
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Enter new UNIX password (root):${normal}"; read -s -p ' ' _root_pass
    echo
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Retype new UNIX password (root):${normal}"; read -s -p ' ' _root_pass_confirm
    echo
    if [[    "$_root_pass" == "$_root_pass_confirm" && -n "$_root_pass" ]]; then break; fi
    if [[ -z "$_root_pass" ]]; then
      echo   "${bold}${yellow}::${normal} Root password cannot be blank. Please try again"
    else
      echo   "${bold}${yellow}::${normal} Please try again"
    fi
  done
elif [[ -n   "$FLAGS_rootpass" ]]; then
  msg        "Reading root password from cmdline flag..."
  _root_pass="$FLAGS_rootpass"
elif [[ -n   "$ROOT_PASS" ]]; then
  msg        "Reading root password from environment variable..."
  _root_pass="$ROOT_PASS"
else
  msg        "Using default root password..."
  _root_pass="$_root_pass_default"
fi

# set root password

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* root passwd *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Applying root password..."

arch-chroot /mnt expect <<EOF
  spawn passwd root
  expect "Enter*" {
    send "${_root_pass}\r"
  }
  expect "Retype*" {
    send "${_root_pass}\r"
  }
  expect eof
EOF

# configure user name

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: username *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring username..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n    "${bold}${blue}::${normal} ${bold}${white}Enter user name${normal} ${bold}${white}[${normal}$_user_name_default${bold}${white}]${normal}:"; read -p ' ' _user_name
  _user_name="${_user_name:-$_user_name_default}"
elif [[ -n   "$FLAGS_username" ]]; then
  msg        "Reading user name from cmdline flag..."
  _user_name="$FLAGS_username"
elif [[ -n   "$USER_NAME" ]]; then
  msg        "Reading user name from environment variable..."
  _user_name="$USER_NAME"
else
  msg        "Using default user name..."
  _user_name="$_user_name_default"
fi

# create user

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* create user *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Creating user ${_user_name}..."

arch-chroot /mnt useradd -m -g users -G audio,games,log,lp,network,optical,power,scanner,storage,video,wheel -s /bin/bash ${_user_name}

# configure user password

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: userpass *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring password for user ${_user_name}..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" || "${FLAGS_concealed}" -eq "${FLAGS_TRUE}" ]]; then
  while true; do
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Enter new UNIX password (user):${normal}"; read -s -p ' ' _user_pass
    echo
    echo -n  "${bold}${blue}::${normal} ${bold}${white}Retype new UNIX password (user):${normal}"; read -s -p ' ' _user_pass_confirm
    echo
    if [[    "$_user_pass" == "$_user_pass_confirm" && -n "$_user_pass" ]]; then break; fi
    if [[ -z "$_user_pass" ]]; then
      echo   "${bold}${yellow}::${normal} User password cannot be blank. Please try again"
    else
      echo   "${bold}${yellow}::${normal} Please try again"
    fi
  done
elif [[ -n   "$FLAGS_userpass" ]]; then
  msg        "Reading user password from cmdline flag..."
  _user_pass="$FLAGS_userpass"
elif [[ -n   "$USER_PASS" ]]; then
  msg        "Reading user password from environment variable..."
  _user_pass="$USER_PASS"
else
  msg        "Using default user password..."
  _user_pass="$_user_pass_default"
fi

# set user password

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* user passwd *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Applying password for user ${_user_name}..."

arch-chroot /mnt expect <<EOF
  spawn passwd ${_user_name}
  expect "Enter*" {
    send "${_user_pass}\r"
  }
  expect "Retype*" {
    send "${_user_pass}\r"
  }
  expect eof
EOF

# configure sudo

                   if [[ "$_debug" == '1' ]]; then
                           echo "********"
                           echo "*      *"
                           echo "* sudo *"
                           echo "*      *"
                           echo "********"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Giving user ${_user_name} sudo powers..."

cat >> /mnt/etc/sudoers <<EOF
${_user_name} ALL=(ALL) ALL
${_user_name} ALL=(ALL) NOPASSWD: /usr/bin/pacman
${_user_name} ALL=(ALL) NOPASSWD: /usr/bin/pacmatic
${_user_name} ALL=(ALL) NOPASSWD: /usr/bin/reboot
${_user_name} ALL=(ALL) NOPASSWD: /usr/bin/shutdown
${_user_name} ALL=(ALL) NOPASSWD: /usr/bin/wifi-menu
EOF

# configure sysctl

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* sysctl.conf *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring sysctl.conf..."

cat > /mnt/etc/sysctl.conf <<'EOF'
# Configuration file for runtime kernel parameters.
# See sysctl.conf(5) for more information.

# Have the CD-ROM close when you use it, and open when you are done.
#dev.cdrom.autoclose = 1
#dev.cdrom.autoeject = 1

# Protection from the SYN flood attack.
net.ipv4.tcp_syncookies = 1

# See evil packets in your logs.
net.ipv4.conf.all.log_martians = 1

# Enables source route verification
net.ipv4.conf.default.rp_filter = 1

# Enable reverse path
net.ipv4.conf.all.rp_filter = 1

# Never accept redirects or source routes (these are only useful for routers).
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.all.accept_source_route = 0

# Disable packet forwarding. Enable for openvpn.
net.ipv4.ip_forward = 1
net.ipv6.conf.default.forwarding = 1
net.ipv6.conf.all.forwarding = 1

# Ignore ICMP broadcasts
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Drop ping packets
net.ipv4.icmp_echo_ignore_all = 1

# Protect against bad error messages
net.ipv4.icmp_ignore_bogus_error_responses = 1

# Tune IPv6
net.ipv6.conf.default.router_solicitations = 0
net.ipv6.conf.default.accept_ra_rtr_pref = 0
net.ipv6.conf.default.accept_ra_pinfo = 0
net.ipv6.conf.default.accept_ra_defrtr = 0
net.ipv6.conf.default.autoconf = 0
net.ipv6.conf.default.dad_transmits = 0
net.ipv6.conf.default.max_addresses = 1

# Increase the open file limit
#fs.file-max = 65535

# Allow for more PIDs (to reduce rollover problems);
# may break some programs 32768
#kernel.pid_max = 65536

# Allow for fast recycling of TIME_WAIT sockets. Default value is 0
# (disabled). Known to cause some issues with hoststated (load balancing
# and fail over) if enabled, should be used with caution.
net.ipv4.tcp_tw_recycle = 1
# Allow for reusing sockets in TIME_WAIT state for new connections when
# it's safe from protocol viewpoint. Default value is 0 (disabled).
# Generally a safer alternative to tcp_tw_recycle.
net.ipv4.tcp_tw_reuse = 1

# Increase TCP max buffer size setable using setsockopt()
#net.ipv4.tcp_rmem = 4096 87380 8388608
#net.ipv4.tcp_wmem = 4096 87380 8388608

# Increase Linux auto tuning TCP buffer limits
# min, default, and max number of bytes to use
# set max to at least 4MB, or higher if you use very high BDP paths
#net.core.rmem_max = 8388608
#net.core.wmem_max = 8388608
#net.core.netdev_max_backlog = 5000
#net.ipv4.tcp_window_scaling = 1

# Tweak the port range used for outgoing connections.
net.ipv4.ip_local_port_range = 2000 65535

# Tweak those values to alter disk syncing and swap behavior.
#vm.vfs_cache_pressure = 100
#vm.laptop_mode = 0
#vm.swappiness = 60

# Tweak how the flow of kernel messages is throttled.
#kernel.printk_ratelimit_burst = 10
#kernel.printk_ratelimit = 5

# Reboot 600 seconds after kernel panic or oops.
#kernel.panic_on_oops = 1
#kernel.panic = 600

# Disable SysRq key to avoid console security issues.
kernel.sysrq = 0
EOF

if [[ "${_disk}" == 'ssd' || "${_disk}" == 'usb' ]]; then
  sed -i 's!^#vm.vfs_cache_pressure.*!vm.vfs_cache_pressure=50!' /mnt/etc/sysctl.conf
  sed -i 's!^#vm.swappiness.*!vm.swappiness=1!' /mnt/etc/sysctl.conf
fi

arch-chroot /mnt sysctl -p

# configure iptables

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* iptables *"
                         echo "*          *"
                         echo "************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring iptables..."

cat > /mnt/etc/iptables.test.rules <<'EOF'
*filter
#| Allow all loopback (lo0) traffic, and drop all traffic to 127/8 that doesn't use lo0
-A INPUT -i lo -j ACCEPT
-A INPUT ! -i lo -d 127.0.0.0/8 -j REJECT
#| Allow all established inbound connections
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
#| Allow all outbound traffic
-A OUTPUT -j ACCEPT
#| Allow HTTP and HTTPS connections
-A INPUT -p tcp --dport 80 -j ACCEPT
-A INPUT -p tcp --dport 443 -j ACCEPT
#| Allow SSH connections
-A INPUT -p tcp -m conntrack --ctstate NEW --dport 22 -j ACCEPT
#| Allow ZeroMQ connections
-A INPUT -p tcp -m conntrack --ctstate NEW --dport 4505 -j ACCEPT
-A INPUT -p tcp -m conntrack --ctstate NEW --dport 4506 -j ACCEPT
#| Allow NTP connections
-I INPUT -p udp --dport 123 -j ACCEPT
-I OUTPUT -p udp --sport 123 -j ACCEPT
#| Reject pings
-I INPUT -j DROP -p icmp --icmp-type echo-request
#| Drop ident server
-A INPUT -p tcp --dport ident -j DROP
#| Log iptables denied calls
-A INPUT -m limit --limit 15/minute -j LOG --log-prefix "[IPT]Dropped input: " --log-level 7
-A OUTPUT -m limit --limit 15/minute -j LOG --log-prefix "[IPT]Dropped output: " --log-level 7
#| Reject all other inbound - default deny unless explicitly allowed policy
-A INPUT -j REJECT
-A FORWARD -j REJECT
COMMIT
EOF
iptables-save > /mnt/etc/iptables/iptables.up.rules
iptables-restore < /mnt/etc/iptables/iptables.test.rules
iptables-save > /mnt/etc/iptables/iptables.rules

# configure ssh

                   if [[ "$_debug" == '1' ]]; then
                        echo "**************"
                        echo "*            *"
                        echo "* ssh_config *"
                        echo "*            *"
                        echo "**************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring ssh..."

sed -i 's!^# Host!Host!' /mnt/etc/ssh/ssh_config
sed -i '/^#   HostbasedAuthentication.*/a \    HashKnownHosts yes' /mnt/etc/ssh/ssh_config
sed -i '/^#   ConnectTimeout.*/a \    TCPKeepAlive yes' /mnt/etc/ssh/ssh_config
sed -i 's!^#   Protocol.*!    Protocol 2!'  /mnt/etc/ssh/ssh_config
sed -i 's!^#   Ciphers.*!    Ciphers aes256-cbc,aes256-ctr,aes192-cbc,aes192-ctr,blowfish-cbc,aes128-cbc,aes128-ctr,arcfour256,arcfour128,arcfour,3des-cbc,cast128-cbc!'  /mnt/etc/ssh/ssh_config
sed -i '/^#   MACs.*/a \    ServerAliveCountMax 3' /mnt/etc/ssh/ssh_config
sed -i '/^#   MACs.*/a \    ServerAliveInterval 60' /mnt/etc/ssh/ssh_config
sed -i '/^#   MACs.*/a \    KexAlgorithms diffie-hellman-group-exchange-sha256,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1,diffie-hellman-group14-sha1' /mnt/etc/ssh/ssh_config
sed -i '/^#   MACs.*/a \    HostKeyAlgorithms ssh-rsa-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-rsa,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp521,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp384,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp256,ssh-dss-cert-v01@openssh.com,ssh-dss-cert-v00@openssh.com,ssh-dss' /mnt/etc/ssh/ssh_config
sed -i 's!^#   MACs.*!    MACs hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,hmac-sha1,hmac-md5,hmac-sha1-96,hmac-md5-96,umac-64@openssh.com!'  /mnt/etc/ssh/ssh_config
sed -i 's!^#   EscapeChar!    EscapeChar!' /mnt/etc/ssh/ssh_config

# configure hosts_allowed

                   if [[ "$_debug" == '1' ]]; then
                   echo "*************************"
                   echo "*                       *"
                   echo "* config: hosts_allowed *"
                   echo "*                       *"
                   echo "*************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring hosts_allowed..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n        "${bold}${blue}::${normal} ${bold}${white}Enter hosts_allowed${normal} ${bold}${white}[${normal}$_hosts_allowed_default${bold}${white}]${normal}:"; read -p ' ' _hosts_allowed
  _hosts_allowed="${_hosts_allowed:-$_hosts_allowed_default}"
elif [[ -n       "$FLAGS_hostsallowed" ]]; then
  msg            "Reading hosts_allowed from cmdline flag..."
  _hosts_allowed="$FLAGS_hostsallowed"
elif [[ -n       "$HOSTS_ALLOWED" ]]; then
  msg            "Reading hosts_allowed from environment variable..."
  _hosts_allowed="$HOSTS_ALLOWED"
else
  msg            "Using default hosts_allowed..."
  _hosts_allowed="$_hosts_allowed_default"
fi

# configure sshd

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* sshd_config *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring sshd..."

sed -i 's!^#Port.*!Port 22!'                                                          /mnt/etc/ssh/sshd_config
sed -i 's!^#Protocol.*!Protocol 2!'                                                   /mnt/etc/ssh/sshd_config
sed -i 's!^#HostKey /etc/ssh/ssh_host_rsa_key!HostKey /etc/ssh/ssh_host_rsa_key!'     /mnt/etc/ssh/sshd_config
sed -i 's!^#HostKey /etc/ssh/ssh_host_dsa_key!HostKey /etc/ssh/ssh_host_dsa_key!'     /mnt/etc/ssh/sshd_config
sed -i 's!^#HostKey /etc/ssh/ssh_host_ecdsa_key!HostKey /etc/ssh/ssh_host_ecdsa_key!' /mnt/etc/ssh/sshd_config
sed -i 's!^#SyslogFacility.*!SyslogFacility AUTH!'                                    /mnt/etc/ssh/sshd_config
sed -i 's!^#LogLevel.*!LogLevel ERROR!'                                               /mnt/etc/ssh/sshd_config
sed -i 's!^#LoginGraceTime.*!LoginGraceTime 2m!'                                      /mnt/etc/ssh/sshd_config
sed -i 's!^#PermitRootLogin.*!PermitRootLogin no!'                                    /mnt/etc/ssh/sshd_config
sed -i 's!^#StrictModes.*!StrictModes yes!'                                           /mnt/etc/ssh/sshd_config
sed -i 's!^#PasswordAuthentication.*!PasswordAuthentication no!'                      /mnt/etc/ssh/sshd_config
sed -i 's!^UsePAM yes!UsePAM no!'                                                     /mnt/etc/ssh/sshd_config
sed -i 's!^#X11Forwarding.*!X11Forwarding no!'                                        /mnt/etc/ssh/sshd_config
sed -i 's!^#X11DisplayOffset.*!X11DisplayOffset 10!'                                  /mnt/etc/ssh/sshd_config
sed -i 's!^#PrintLastLog.*!PrintLastLog yes!'                                         /mnt/etc/ssh/sshd_config
sed -i 's!^#TCPKeepAlive.*!TCPKeepAlive yes!'                                         /mnt/etc/ssh/sshd_config
sed -i 's!^#ClientAliveInterval.*!ClientAliveInterval 60!'                            /mnt/etc/ssh/sshd_config
sed -i 's!^#ClientAliveCountMax.*!ClientAliveCountMax 3!'                             /mnt/etc/ssh/sshd_config
sed -i 's!^#UseDNS.*!UseDNS no!'                                                      /mnt/etc/ssh/sshd_config
echo "AllowUsers ${_user_name}" >>                                                    /mnt/etc/ssh/sshd_config
sed -i '/^multi.*/a nospoof on'                                                       /mnt/etc/host.conf
echo "sshd: ${_hosts_allowed}" >                                                      /mnt/etc/hosts.allow

# set systemd services

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* systemd services *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Enabling systemd services..."

arch-chroot /mnt systemctl enable cronie         \
                                  dnscrypt-proxy \
                                  iptables       \
                                  zramswap

# disable /var/log/journal CoW

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* disable CoW *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Disabling btrfs Copy-On-Write where optimal..."

chattrify "/var/log/journal" "755" "root" "systemd-journal"
}




# -----------------------------------------------------------------------------
# sshify: prepare machine for remote administration
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*  ------  *"
                         echo "* |sshify| *"
                         echo "*  ------  *"
                         echo "************"
                                  fi


function sshify() {

# configure electrum pubkey

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* config: electrum *"
                     echo "*                  *"
                     echo "********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring URL of Electrum public key..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n  "${bold}${blue}::${normal} ${bold}${white}Enter link to your electrum pubkey${normal} ${bold}${white}[${normal}$_electrum_pubkey_default${bold}${white}]${normal}:"; read -p ' ' _electrum_pubkey
  _electrum_pubkey="${_electrum_pubkey:-$_electrum_pubkey_default}"
elif [[ -n "$FLAGS_electrum" ]]; then
  msg      "Reading link to electrum pubkey from cmdline flag..."
  _electrum_pubkey="$FLAGS_electrum"
elif [[ -n "$ELECTRUM" ]]; then
  msg      "Reading link to electrum pubkey from environment variable..."
  _electrum_pubkey="$ELECTRUM"
else
  msg      "Using default link to electrum pubkey..."
  _electrum_pubkey="$_electrum_pubkey_default"
fi

# configure user pubkey

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* config: pubkey *"
                      echo "*                *"
                      echo "******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring URL of user's public key..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n      "${bold}${blue}::${normal} ${bold}${white}Enter link to your user pubkey${normal} ${bold}${white}[${normal}$_user_pubkey_default${bold}${white}]${normal}:"; read -p ' ' _user_pubkey
  _user_pubkey="${_user_pubkey:-$_user_pubkey_default}"
elif [[ -n     "$FLAGS_pubkey" ]]; then
  msg          "Reading link to user pubkey from cmdline flag..."
  _user_pubkey="$FLAGS_pubkey"
elif [[ -n     "$PUBKEY" ]]; then
  msg          "Reading link to user pubkey from environment variable..."
  _user_pubkey="$PUBKEY"
else
  msg          "Using default link to user pubkey..."
  _user_pubkey="$_user_pubkey_default"
fi

# configure user pubkey signature

                   if [[ "$_debug" == '1' ]]; then
                     echo "*********************"
                     echo "*                   *"
                     echo "* config: pubkeysig *"
                     echo "*                   *"
                     echo "*********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring URL of user's public key signature..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n          "${bold}${blue}::${normal} ${bold}${white}Enter link to your user pubkey signature${normal} ${bold}${white}[${normal}$_user_pubkey_sig_default${bold}${white}]${normal}:"; read -p ' ' _user_pubkey_sig
  _user_pubkey_sig="${_user_pubkey_sig:-$_user_pubkey_sig_default}"
elif [[ -n         "$FLAGS_pubkeysig" ]]; then
  msg              "Reading link to user pubkey signature from cmdline flag..."
  _user_pubkey_sig="$FLAGS_pubkeysig"
elif [[ -n         "$PUBKEYSIG" ]]; then
  msg              "Reading link to user pubkey signature from environment variable..."
  _user_pubkey_sig="$PUBKEYSIG"
else
  msg              "Using default link to user pubkey signature..."
  _user_pubkey_sig="$_user_pubkey_sig_default"
fi

# enable sshd

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* enable sshd *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Enabling sshd..."

arch-chroot /mnt systemctl enable sshd

# import keys

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* import keys *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Importing SSH keys..."

curl -k "${_electrum_pubkey}" -o ~/electrum.pub
curl -k "${_user_pubkey}"     -o ~/sshkey.pub
curl -k "${_user_pubkey_sig}" -o ~/sshkey.pub.sig

# verify with electrum

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* verify keys *"
                        echo "*             *"
                        echo "***************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Verifying SSH keys..."

pacman -Sy --needed python2-ecdsa --noconfirm
for _pkg in python2-pbkdf2 python2-slowaes; do
  mkdir -p ~/.src && cd ~/.src
  rm -rf $_pkg ${_pkg}.tar.gz && mkdir -p $_pkg
  curl -k -O https://aur.archlinux.org/packages/${_pkg:0:2}/$_pkg/$_pkg.tar.gz
  tar -xvzf ${_pkg}.tar.gz --strip 1 -C $_pkg
  cd $_pkg
  makepkg -Acsi --asroot --noconfirm
  cd ..
done
cd && curl -k https://codeload.github.com/spesmilo/{electrum}/{tar.gz}/{${VERSION_ELECTRUM}} -o "#1-#3.#2"
tar xvzf electrum-${VERSION_ELECTRUM}.tar.gz
cd electrum-${VERSION_ELECTRUM}
find . -type f -print0 | xargs -0 sed -i 's#/usr/bin/python#/usr/bin/python2#g'
find . -type f -print0 | xargs -0 sed -i 's#/usr/bin/env python#/usr/bin/env python2#g'
_electrum_verified=$(./electrum verifymessage \
                       "$(cat ~/electrum.pub)" \
                       "$(cat ~/sshkey.pub.sig)" \
                       "$(cat ~/sshkey.pub)")

# setup authorized_keys

                   if [[ "$_debug" == '1' ]]; then
                      echo "*******************"
                      echo "*                 *"
                      echo "* authorized_keys *"
                      echo "*                 *"
                      echo "*******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Creating authorized_keys file..."

if [[ "${_electrum_verified}" == 'true' ]]; then
  mkdir -p /mnt/home/${_user_name}/.ssh
  chmod 700 /mnt/home/${_user_name}/.ssh
  cat ~/sshkey.pub > /mnt/home/${_user_name}/.ssh/authorized_keys
  chmod 600 /mnt/home/${_user_name}/.ssh/authorized_keys
  arch-chroot /mnt chown -R ${_user_name}:users /home/${_user_name}/.ssh
else
  echo "Electrum verification code rejected."
fi
}




# -----------------------------------------------------------------------------
# selectify: select packages to install
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*  ---------  *"
                        echo "* |selectify| *"
                        echo "*  ---------  *"
                        echo "***************"
                                  fi


function selectify() {

# pkg bundles
declare _bundle_base=('base')
declare _bundle_lite=('base'
                      'gui'
                      'dotfiles')
declare _bundle_full=('base'
                      'gui'
                      'dotfiles'
                      'analysis'
                      'clojure'
                      'elixir'
                      'fonts'
                      'go'
                      'gobi'
                      'haskell'
                      'lua'
                      'markdown'
                      'nimrod'
                      'node'
                      'perl'
                      'python'
                      'ruby')

# pkgs feedback
if   [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  msg   "Setting bundle preferences interactively..."
elif [[ "$FLAGS_bundle" == 'full' || "$FLAGS_bundle" == 'lite' || "$FLAGS_bundle" == 'base' ]]; then
  msg   "Reading bundle preferences from cmdline flag..."
elif [[ "$BUNDLE" == 'full' || "$BUNDLE" == 'lite' || "$BUNDLE" == 'base' ]]; then
  msg   "Reading bundle preferences from environment variable..."
fi

# IF: interactive mode enabled
if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  # THEN: iterate through all pkgs avail with Y/N
  for i in "${!_bundle_full[@]}"; do
    ask "Include ${_bundle_full[${i}]}? (Y/n)" "y"
    if [[ "$_retval" == '0' ]]; then export "_${_bundle_full[${i}]}"=1; fi
  done
# ELIF: selected pkgs from the cmdline select option
elif [[ -n   "$FLAGS_select" ]]; then
  # THEN: get selected pkgs
  read -a _select_pkgs_array <<< "$FLAGS_select"
  for i in "${!_select_pkgs_array[@]}"; do
    status "Selected ${_select_pkgs_array[${i}]}"
    export "_${_select_pkgs_array[${i}]}"=1
  done
# ELIF: selected pkgs from SELECT environment variable
elif [[ -n   "$SELECT" ]]; then
  # THEN: get selected pkgs
  read -a _select_pkgs_array_env <<< "$FLAGS_select"
  for i in "${!_select_pkgs_array_env[@]}"; do
    status "Selected ${_select_pkgs_array_env[${i}]}"
    export "_${_select_pkgs_array_env[${i}]}"=1
  done
# ELIF: opt for full bundle from cmdline option or BUNDLE environment variable
elif [[ "$FLAGS_bundle" == 'full' || "$BUNDLE" == 'full' ]]; then
  # THEN: get all pkgs avail in the full bundle
  for i in "${!_bundle_full[@]}"; do
    status "Selected ${_bundle_full[${i}]}"
    export "_${_bundle_full[${i}]}"=1
  done
# ELIF: opt for lite bundle from cmdline option or BUNDLE environment variable
elif [[ "$FLAGS_bundle" == 'lite' || "$BUNDLE" == 'lite' ]]; then
  # THEN: get all pkgs avail in the lite bundle
  for i in "${!_bundle_lite[@]}"; do
    status "Selected ${_bundle_lite[${i}]}"
    export "_${_bundle_lite[${i}]}"=1
  done
# ELIF: opt for base bundle from cmdline option or BUNDLE environment variable
elif [[ "$FLAGS_bundle" == 'base' || "$BUNDLE" == 'base' ]]; then
  # THEN: get all pkgs avail in the base bundle
  for i in "${!_bundle_base[@]}"; do
    status "Selected ${_bundle_base[${i}]}"
    export "_${_bundle_base[${i}]}"=1
  done
fi

declare _pkgs=()

if [[ "${_base}" == '1' ]]; then
  _pkgs+=('ack'
          'ansible'
          'arch-wiki-lite'
          'avahi'
          'bluez'
          'bluez-firmware'
          'colordiff'
          'create_ap'
          'cronwhip'
          'darkhttpd'
          'devtools'
          'downgrade'
          'dvd+rw-tools'
          'easytether-rpm'
          'elinks'
          'geturl-git'
          'git'
          'gnupg1'
          'imgurbash'
          'ipw2100-fw'
          'ipw2200-fw'
          'ix'
          'jq'
          'keybase'
          'ledger.py-git'
          'libfaketime'
          'libusb-compat'
          'lrzip'
          'lynx'
          'macchanger'
          'mercurial'
          'mlocate'
          'mosh'
          'ncurses'
          'openvpn'
          'p7zip'
          'pacmatic'
          'parcimonie-sh-git'
          'perl-image-exiftool'
          'pkgcacheclean'
          'proxychains-ng'
          'pwsafe'
          'python2-pbp'
          'quixand'
          'reptyr'
          'rfkill'
          'rtorrent'
          'sfk'
          'socat'
          'spiped'
          'sshuttle'
          'ssss'
          'steghide'
          'subrepo'
          'tcplay'
          'the_silver_searcher'
          'tor'
          'torsocks'
          'tree'
          'ttf-monaco'
          'usb_modeswitch'
          'usbmuxd'
          'youtube-dl')
fi

if [[ "${_gui}" == '1' ]]; then
  _pkgs+=('abiword'
          'alsa-firmware'
          'alsa-lib'
          'alsa-oss'
          'alsa-plugins'
          'alsa-utils'
          'anki'
          'archlinux-wallpaper'
          'arch-wiki-docs'
          'ascrubber-git'
          'bleachbit'
          'castawesome'
          'chromium'
          'conky'
          'deluge'
          'desktop-file-utils'
          'dmenu-xft'
          'ekiga'
          'evince'
          'feh'
          'firefox'
          'flashplugin'
          'gajim'
          'gajim-plugin-otr-git'
          'galculator'
          'gcolor2'
          'gimp'
          'gmrun'
          'gnome-themes-standard'
          'gnumeric'
          'gparted'
          'grsync'
          'gsettings-desktop-schemas'
          'gsimplecal'
          'gsm'
          'gstreamer'
          'gstreamer0.10'
          'gstreamer0.10-bad'
          'gstreamer0.10-bad-plugins'
          'gstreamer0.10-base'
          'gstreamer0.10-base-plugins'
          'gstreamer0.10-ffmpeg'
          'gstreamer0.10-good'
          'gstreamer0.10-good-plugins'
          'gstreamer0.10-python'
          'gstreamer0.10-ugly'
          'gstreamer0.10-ugly-plugins'
          'gstreamermm'
          'gtk2'
          'gtk3'
          'gtk-engines'
          'gucharmap'
          'hicolor-icon-theme'
          'hunspell'
          'hwinfo'
          'hyphen'
          'i2p'
          'icedtea-web-java7'
          'ifuse'
          'imagemagick'
          'imlib2'
          'inkscape'
          'inputproto'
          'intltool'
          'iso-codes'
          'jhead'
          'jp2a'
          'jre7-openjdk'
          'jre7-openjdk-headless'
          'keepassx'
          'leafpad'
          'libgl'
          'link-grammar'
          'lxappearance'
          'lxinput'
          'lxmed'
          'lxmenu-data'
          'lxrandr'
          'lxsplit'
          'lxterminal'
          'media-player-info'
          'menu-cache'
          'mesa'
          'mesa-demos'
          'mime-types'
          'mimeo'
          'nitrogen'
          'notification-daemon'
          'numlockx'
          'obconf'
          'obkey-git'
          'obmenu'
          'obmenu-generator'
          'onboard'
          'openbox'
          'openbox-menu'
          'openbox-themes'
          'pcmanfm'
          'pidgin-otr'
          'printproto'
          'pulseaudio'
          'qrencode'
          'randrproto'
          'recode'
          'renderproto'
          'screencastor'
          'scrot'
          'shared-color-profiles'
          'shared-mime-info'
          'shotwell'
          'source-highlight'
          'startup-notification'
          'statler-ui-theme'
          'thunderbird'
          'thunderbird-enigmail-bin'
          'tint2'
          'tiv'
          'tor-browser-en'
          'torchat'
          'truecrypt'
          'urxvt-perls'
          'valabattery-git'
          'videoproto'
          'vlc'
          'volumeicon'
          'x11-ssh-askpass'
          'xautolock'
          'xautomation'
          'xchat'
          'xchat-otr'
          'xclip'
          'xdg-user-dirs'
          'xdg-utils'
          'xdotool'
          'xextproto'
          'xf86-input-evdev'
          'xf86-input-joystick'
          'xf86-input-keyboard'
          'xf86-input-mouse'
          'xf86-input-synaptics'
          'xf86-input-vmmouse'
          'xf86-input-void'
          'xf86-video-ark'
          'xf86-video-ast'
          'xf86-video-ati'
          'xf86-video-cirrus'
          'xf86-video-dummy'
          'xf86-video-fbdev'
          'xf86-video-glint'
          'xf86-video-i128'
          'xf86-video-intel'
          'xf86-video-mach64'
          'xf86-video-mga'
          'xf86-video-modesetting'
          'xf86-video-neomagic'
          'xf86-video-nouveau'
          'xf86-video-nv'
          'xf86-video-openchrome'
          'xf86-video-r128'
          'xf86-video-savage'
          'xf86-video-siliconmotion'
          'xf86-video-sis'
          'xf86-video-tdfx'
          'xf86-video-trident'
          'xf86-video-v4l'
          'xf86-video-vesa'
          'xf86-video-vmware'
          'xf86-video-voodoo'
          'xf86dgaproto'
          'xf86vidmodeproto'
          'xflux'
          'xineramaproto'
          'xkeyboard-config'
          'xlockmore'
          'xorg'
          'xorg-bdftopcf'
          'xorg-docs'
          'xorg-font-util'
          'xorg-font-utils'
          'xorg-fonts-100dpi'
          'xorg-fonts-75dpi'
          'xorg-fonts-alias'
          'xorg-fonts-cyrillic'
          'xorg-fonts-encodings'
          'xorg-fonts-misc'
          'xorg-fonts-type1'
          'xorg-iceauth'
          'xorg-luit'
          'xorg-mkfontdir'
          'xorg-mkfontscale'
          'xorg-server'
          'xorg-server-common'
          'xorg-server-devel'
          'xorg-server-utils'
          'xorg-server-xdmx'
          'xorg-server-xephyr'
          'xorg-server-xnest'
          'xorg-server-xvfb'
          'xorg-sessreg'
          'xorg-setxkbmap'
          'xorg-smproxy'
          'xorg-twm'
          'xorg-utils'
          'xorg-x11perf'
          'xorg-xauth'
          'xorg-xbacklight'
          'xorg-xcalc'
          'xorg-xclock'
          'xorg-xcmsdb'
          'xorg-xcursorgen'
          'xorg-xdm'
          'xorg-xdpyinfo'
          'xorg-xdriinfo'
          'xorg-xev'
          'xorg-xgamma'
          'xorg-xhost'
          'xorg-xinit'
          'xorg-xinput'
          'xorg-xkbcomp'
          'xorg-xkbevd'
          'xorg-xkbutils'
          'xorg-xkill'
          'xorg-xlsatoms'
          'xorg-xlsclients'
          'xorg-xlsfonts'
          'xorg-xmessage'
          'xorg-xmodmap'
          'xorg-xpr'
          'xorg-xprop'
          'xorg-xrandr'
          'xorg-xrdb'
          'xorg-xrefresh'
          'xorg-xset'
          'xorg-xsetroot'
          'xorg-xvinfo'
          'xorg-xwd'
          'xorg-xwininfo'
          'xorg-xwud'
          'xproto'
          'xterm'
          'xxkb'
          'zenity'
          'zulucrypt')
fi

if [[ "${_gui}" == '1' ]]; then
  declare _vimpkgs=('gvim')
  _vimpkgs+=('vim-ultisnips')
else
  declare _vimpkgs=('vim-full')
fi
_vimpkgs+=('ctags'
           'vim-align'
           'vim-cecutil'
           'vim-colors-eddie-git'
           'vim-colors-liquidcarbon'
           'vim-colors-mayansmoke'
           'vim-colors-neverland-git'
           'vim-colors-sorcerer'
           'vim-csapprox'
           'vim-ctrlsf-git'
           'vim-delimitmate'
           'vim-dragvisuals-git'
           'vim-easydir-git'
           'vim-easymotion'
           'vim-easytags'
           'vim-expand-region-git'
           'vim-file-line-git'
           'vim-gnupg'
           'vim-gtk-syntax-git'
           'vim-guicolorscheme'
           'vim-gundo'
           'vim-haml-git'
           'vim-hugefile-git'
           'vim-indent-object'
           'vim-iptables'
           'vim-jellybeans'
           'vim-less-git'
           'vim-lightline-git'
           'vim-lustyexplorer'
           'vim-matchit'
           'vim-misc-xolox'
           'vim-multiple-cursors-git'
           'vim-mustache-git'
           'vim-nerdcommenter'
           'vim-nerdtree'
           'vim-numbered-git'
           'vim-openssl'
           'vim-pipe2eval-git'
           'vim-repeat'
           'vim-searchparty-git'
           'vim-surround'
           'vim-systemd'
           'vim-taboo-git'
           'vim-tabular-git'
           'vim-tagbar'
           'vim-tmux-navigator-git'
           'vim-trailing-whitespace'
           'vim-vis-git'
           'vim-yankring'
           'vim-youcompleteme-git')

if [[ "${_analysis}" == '1' ]]; then
  _pkgs+=('glances'
          'htop'
          'iftop'
          'inotify-tools'
          'iotop'
          'ltrace'
          'moreutils'
          'multitail'
          'nethogs'
          'ngrep'
          'ntop'
          'strace'
          'traceroute')
fi

if [[ "${_clojure}" == '1' ]]; then
  _pkgs+=('jdk7-openjdk'
          'ca-certificates-java'
          'clojure'
          'leiningen'
          'leiningen-completions'
          'nailgun')
  _vimpkgs+=('vim-clojure-sql-git'
             'vim-clojure-static-git'
             'vim-fireplace-git'
             'vim-rainbow-parentheses-git')
fi

if [[ "${_elixir}" == '1' ]]; then
  if [[ "${_gui}" == '1' ]]; then
    _pkgs+=('erlang'
            'erlang-docs')
  else
    _pkgs+=('erlang-nox')
  fi
  _pkgs+=('elixir')
  _vimpkgs+=('vim-elixir-git'
             'vimerl-git'
             'vim-mix-git')
fi

if [[ "${_fonts}" == '1' ]]; then
  _pkgs+=('gsfonts'
          'opendesktop-fonts'
          'ttf-arphic-ukai'
          'ttf-arphic-uming'
          'ttf-baekmuk'
          'ttf-bitstream-vera'
          'ttf-dejavu'
          'ttf-freebanglafont'
          'ttf-gentium'
          'ttf-google-fonts-git'
          'ttf-hanazono'
          'ttf-hannom'
          'ttf-indic-otf'
          'ttf-junicode'
          'ttf-khmer'
          'ttf-linux-libertine'
          'ttf-mph-2b-damase'
          'ttf-sazanami'
          'ttf-symbola'
          'ttf-tibetan-machine'
          'ttf-tlwg'
          'ttf-ubraille'
          'wqy-bitmapfont'
          'wqy-microhei'
          'wqy-zenhei')
fi

if [[ "${_go}" == '1' ]]; then
  _pkgs+=('go')
fi

if [[ "${_gobi}" == '1' ]]; then
  _pkgs+=('gobi-loader'
          'gobi-firmware'
          'mobile-broadband-provider-info'
          'modemmanager')
fi

if [[ "${_haskell}" == '1' ]]; then
  _pkgs+=('cabal-install'
          'ghc')
  _vimpkgs+=('vim-haskell')
fi

if [[ "${_lua}" == '1' ]]; then
  _pkgs+=('lua')
  _vimpkgs+=('vim-lua-ftplugin-git'
             'vim-lua-inspect-git'
             'vim-lua-support')
fi

if [[ "${_markdown}" == '1' ]]; then
  _pkgs+=('markdown')
  _vimpkgs+=('vim-markdown')
fi

if [[ "${_nimrod}" == '1' ]]; then
  _pkgs+=('nimrod')
  _vimpkgs+=('vim-nimrod-git')
fi

if [[ "${_node}" == '1' ]]; then
  _pkgs+=('nodejs'
          'nodejs-bower'
          'nodejs-grasp'
          'nodejs-grunt-cli'
          'nodejs-hexo'
          'nodejs-jade'
          'nodejs-stylus')
  _vimpkgs+=('vim-jade-git'
             'vim-javascript-git'
             'vim-jquery'
             'vim-nodejs-errorformat-git'
             'vim-nodejs-git'
             'vim-stylus-git')
fi

if [[ "${_perl}" == '1' ]]; then
  _pkgs+=('perlbrew'
          'perl-cpanplus-dist-arch'
          'perl-ev'
          'perl-io-socket-ip'
          'perl-io-socket-ssl'
          'perl-mojolicious')
  _vimpkgs+=('vim-after-syntax-perl-git'
             'vim-mojo-git'
             'vim-perl'
             'vim-perl-support')
fi

if [[ "${_python}" == '1' ]]; then
  _pkgs+=('python'
          'python-jedi'
          'python-pip'
          'python-setuptools'
          'python-virtualenv'
          'python-virtualenv-clone'
          'python-virtualenvwrapper'
          'python2'
          'python2-jedi'
          'python2-pip'
          'python2-setuptools'
          'python2-virtualenv'
          'python2-virtualenv-clone')
  _vimpkgs+=('vim-jedi'
             'vim-jinja-git'
             'vim-kivy-git'
             'vim-python'
             'vim-virtualenv')
fi

if [[ "${_ruby}" == '1' ]]; then
  _pkgs+=('ruby'
          'ruby-build'
          'ruby-bundler'
          'ruby-docs'
          'rbenv'
          'rbenv-default-gems'
          'rbenv-each-git'
          'rbenv-vars')
  _vimpkgs+=('vim-rbenv-git'
             'vim-ruby-git')
fi

if [[ "${_gui}" == '1' ]]; then
  declare _bitpkgs=('electrum'
                    'python2-zbar')
else
  _headless=1
fi

# install selected pkgs

                   if [[ "$_debug" == '1' ]]; then
                 echo "****************************"
                 echo "*                          *"
                 echo "* installing selected pkgs *"
                 echo "*                          *"
                 echo "****************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Installing selected pkgs..."

arch-chroot /mnt pacaur -Sy --needed --asroot "${_pkgs[@]}" "${_vimpkgs[@]}" "${_bitpkgs[@]}" --noedit --noconfirm

# set XDG dirs

                   if [[ "$_debug" == '1' ]]; then
                            echo "*******"
                            echo "*     *"
                            echo "* XDG *"
                            echo "*     *"
                            echo "*******"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring XDG user directories..."

if [[ "$_gui" == '1' ]]; then
  cat > /mnt/etc/xdg/user-dirs.defaults <<'EOF'
# Default settings for user directories
#
# The values are relative pathnames from the home directory and
# will be translated on a per-path-element basis into the users locale
DESKTOP=Desktop
DOWNLOAD=Downloads
TEMPLATES=Desktop/Templates
PUBLICSHARE=Desktop/Public
DOCUMENTS=Documents
MUSIC=Desktop/Music
PICTURES=Desktop/Pictures
VIDEOS=Desktop/Videos
EOF
  arch-chroot /mnt su -c "xdg-user-dirs-update" ${_user_name}
fi

# clean pacaur

                   if [[ "$_debug" == '1' ]]; then
                       echo "****************"
                       echo "*              *"
                       echo "* clean pacaur *"
                       echo "*              *"
                       echo "****************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Cleaning up pacaur cache..."

arch-chroot /mnt rm -rf /tmp/pacaur*
}




# -----------------------------------------------------------------------------
# electrumify: install electrum-headless in chroot
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*  -----------  *"
                       echo "* |electrumify| *"
                       echo "*  -----------  *"
                       echo "*****************"
                                  fi


function electrumify() {

# install electrum-headless deps in chroot

                   if [[ "$_debug" == '1' ]]; then
                  echo "**************************"
                  echo "*                        *"
                  echo "* electrum-headless deps *"
                  echo "*                        *"
                  echo "**************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Installing Electrum headless dependencies..."

arch-chroot /mnt pacman -Sy --needed python2-ecdsa --noconfirm
for _pkg in python2-pbkdf2 python2-slowaes; do
  mkdir -p /root/.src/electrum && cd /root/.src/electrum
  rm -rf $_pkg ${_pkg}.tar.gz && mkdir -p $_pkg
  curl -k -O https://aur.archlinux.org/packages/${_pkg:0:2}/$_pkg/$_pkg.tar.gz
  tar -xvzf ${_pkg}.tar.gz --strip 1 -C $_pkg
  cd $_pkg
  makepkg -Acsi --asroot --noconfirm
  cd ..
done
mkdir -p /mnt/root/.src/electrum
for _pkg in `find /root/.src/electrum -type f -name "*.pkg.tar.xz"`; do
  cp ${_pkg} /mnt/root/.src/electrum
done
arch-chroot /mnt find /root/.src/electrum -type f -name "*.pkg.tar.xz" -exec pacman -U --noconfirm '{}' \;

# place electrum-headless in chroot

                   if [[ "$_debug" == '1' ]]; then
                  echo "***************************"
                  echo "*                         *"
                  echo "* place electrum-headless *"
                  echo "*                         *"
                  echo "***************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Installing Electrum headless in chroot..."

cd && curl -k https://codeload.github.com/spesmilo/{electrum}/{tar.gz}/{${VERSION_ELECTRUM}} -o "#1-#3.#2"
tar xvzf electrum-${VERSION_ELECTRUM}.tar.gz
cd electrum-${VERSION_ELECTRUM}
find . -type f -print0 | xargs -0 sed -i 's#/usr/bin/python#/usr/bin/python2#g'
find . -type f -print0 | xargs -0 sed -i 's#/usr/bin/env python#/usr/bin/env python2#g'
cd && mv electrum-${VERSION_ELECTRUM} /mnt/home/${_user_name}
}



# -----------------------------------------------------------------------------
# dotify: install dotfiles
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*  ------  *"
                         echo "* |dotify| *"
                         echo "*  ------  *"
                         echo "************"
                                  fi


function dotify() {

# configure name for GitHub/gitconfig

                   if [[ "$_debug" == '1' ]]; then
                       echo "****************"
                       echo "*              *"
                       echo "* config: name *"
                       echo "*              *"
                       echo "****************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring GitHub personal name..."

if [[   "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n "${bold}${blue}::${normal} ${bold}${white}Enter GitHub personal name${normal} ${bold}${white}[${normal}$_name_default${bold}${white}]${normal}:"; read -p ' ' _name
  _name="${_name:-$_name_default}"
elif [[ -n "$FLAGS_name" ]]; then
  msg   "Reading GitHub personal name from cmdline flag..."
  _name="$FLAGS_name"
elif [[ -n "$NAME" ]]; then
  msg   "Reading GitHub personal name from environment variable..."
  _name="$NAME"
else
  msg   "Using default GitHub personal name..."
  _name="$_name_default"
fi

# configure email for GitHub/gitconfig

                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*               *"
                       echo "* config: email *"
                       echo "*               *"
                       echo "*****************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring GitHub email address..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n "${bold}${blue}::${normal} ${bold}${white}Enter GitHub email address${normal} ${bold}${white}[${normal}$_email_default${bold}${white}]${normal}:"; read -p ' ' _email
  _email="${_email:-$_email_default}"
elif [[ -n "$FLAGS_email" ]]; then
  msg    "Reading GitHub email address from cmdline flag..."
  _email="$FLAGS_email"
elif [[ -n "$EMAIL" ]]; then
  msg    "Reading GitHub email address from environment variable..."
  _email="$EMAIL"
else
  msg    "Using default GitHub email address..."
  _email="$_email_default"
fi

# configure github account name for GitHub/gitconfig

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* config: github *"
                      echo "*                *"
                      echo "******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring GitHub account name..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n "${bold}${blue}::${normal} ${bold}${white}Enter GitHub account name${normal} ${bold}${white}[${normal}$_github_default${bold}${white}]${normal}:"; read -p ' ' _github
  _github="${_github:-$_github_default}"
elif [[ -n "$FLAGS_github" ]]; then
  msg     "Reading GitHub account name from cmdline flag..."
  _github="$FLAGS_github"
elif [[ -n "$GITHUB" ]]; then
  msg     "Reading GitHub account name from environment variable..."
  _github="$GITHUB"
else
  msg     "Using default GitHub account name..."
  _github="$_github_default"
fi

# configure zipcode for f.lux

                   if [[ "$_debug" == '1' ]]; then
                      echo "*******************"
                      echo "*                 *"
                      echo "* config: zipcode *"
                      echo "*                 *"
                      echo "*******************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring zipcode for f.lux display temperature..."

if [[ "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  echo -n  "${bold}${blue}::${normal} ${bold}${white}Enter Zipcode for f.lux${normal} ${bold}${white}[${normal}$_zipcode_default${bold}${white}]${normal}:"; read -p ' ' _zipcode
  _zipcode="${_zipcode:-$_zipcode_default}"
elif [[ -n "$FLAGS_zipcode" ]]; then
  msg      "Reading zipcode for f.lux from cmdline flag..."
  _zipcode="$FLAGS_zipcode"
elif [[ -n "$ZIPCODE" ]]; then
  msg      "Reading zipcode for f.lux from environment variable..."
  _zipcode="$ZIPCODE"
else
  msg      "Using default zipcode for f.lux..."
  _zipcode="$_zipcode_default"
fi

# downloading dotfiles

                   if [[ "$_debug" == '1' ]]; then
                   echo "************************"
                   echo "*                      *"
                   echo "* downloading dotfiles *"
                   echo "*                      *"
                   echo "************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Getting dotfiles..."

mkdir -p /mnt/home/${_user_name}/.src /mnt/root/.src
curl -k https://codeload.github.com/atweiden/{dotfiles}/{tar.gz}/{${VERSION_DOTFILES}} -o /mnt/home/${_user_name}/.src/"#1-#3.#2"
tar -xvzf /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}.tar.gz -C /mnt/home/${_user_name}/.src
tar -xvzf /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}.tar.gz -C /mnt/root/.src

# adjusting dotfile config parameters

                   if [[ "$_debug" == '1' ]]; then
                   echo "************************"
                   echo "*                      *"
                   echo "* configuring dotfiles *"
                   echo "*                      *"
                   echo "************************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring dotfiles..."

sed -i "s#\$HOME#/home/${_user_name}#"         /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh /mnt/root/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh
sed -i "s#^name.*#name=\"${_name}\"#"          /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh /mnt/root/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh
sed -i "s#^email.*#email=\"${_email}\"#"       /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh /mnt/root/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh
sed -i "s#^github.*#github=\"${_github}\"#"    /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh /mnt/root/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh
sed -i "s#^zipcode.*#zipcode=\"${_zipcode}\"#" /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh /mnt/root/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh
find /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/_config/obmenu-generator -type f -print0 | xargs -0 sed -i "s#lniux#${_user_name}#g"
find /mnt/root/.src/dotfiles-${VERSION_DOTFILES}/_config/obmenu-generator -type f -print0 | xargs -0 sed -i "s#lniux#root#g"

# fixing permissions

                   if [[ "$_debug" == '1' ]]; then
                    echo "**********************"
                    echo "*                    *"
                    echo "* fixing permissions *"
                    echo "*                    *"
                    echo "**********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Setting ${_user_name} home directory permissions..."

arch-chroot /mnt chown -R ${_user_name}:users /home/${_user_name}

# running bootstrap

                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*               *"
                       echo "* bootstrapping *"
                       echo "*               *"
                       echo "*****************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Installing dotfiles..."

arch-chroot /mnt su -c "cd /home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES} && ./bootstrap.sh" ${_user_name}
arch-chroot /mnt /root/.src/dotfiles-${VERSION_DOTFILES}/bootstrap.sh

# configuring wallpaper

                   if [[ "$_debug" == '1' ]]; then
                         echo "*************"
                         echo "*           *"
                         echo "* wallpaper *"
                         echo "*           *"
                         echo "*************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" && "${_gui}" == '1' ]] \
  && msg "Configuring wallpaper..."

sed -i 's#^dirs.*#dirs=/usr/share/archlinux/wallpaper;#' /mnt/home/${_user_name}/.config/nitrogen/nitrogen.cfg /mnt/root/.config/nitrogen/nitrogen.cfg
cat > /mnt/home/${_user_name}/.config/nitrogen/bg-saved.cfg <<'EOF'
[:0.0]
file=/usr/share/archlinux/wallpaper/archlinux-simplyblack-43.png
mode=5
bgcolor=#000000
EOF
cat > /mnt/root/.config/nitrogen/bg-saved.cfg <<'EOF'
[:0.0]
file=/usr/share/archlinux/wallpaper/archlinux-simplyblack-43.png
mode=5
bgcolor=#000000
EOF

# configuring X11

                   if [[ "$_debug" == '1' ]]; then
                            echo "*******"
                            echo "*     *"
                            echo "* X11 *"
                            echo "*     *"
                            echo "*******"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" && "${_gui}" == '1' ]] \
  && msg "Configuring X11..."

if [[ "${_gui}" == '1' ]]; then
  mv /mnt/etc/X11/xorg.conf.d /mnt/etc/X11/xorg.conf.d.bak
  cp -R /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/etc/X11/xorg.conf.d /mnt/etc/X11/xorg.conf.d
fi

# configuring openvpn

                   if [[ "$_debug" == '1' ]]; then
                          echo "***********"
                          echo "*         *"
                          echo "* openvpn *"
                          echo "*         *"
                          echo "***********"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Configuring openvpn..."

mkdir -p /mnt/etc/openvpn
cp /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/etc/openvpn/update-resolv-conf /mnt/etc/openvpn

# adding systemd service

                   if [[ "$_debug" == '1' ]]; then
                     echo "*********************"
                     echo "*                   *"
                     echo "* kill-ssh-sessions *"
                     echo "*                   *"
                     echo "*********************"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Installing kill-ssh-sessions systemd service..."

cp /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/usr/lib/systemd/scripts/kill-ssh-sessions /mnt/usr/lib/systemd/scripts
cp /mnt/home/${_user_name}/.src/dotfiles-${VERSION_DOTFILES}/usr/lib/systemd/system/kill-ssh-sessions.service /mnt/usr/lib/systemd/system
arch-chroot /mnt systemctl enable kill-ssh-sessions.service
}




# -----------------------------------------------------------------------------
# exitify: exit pacstrapit
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                         echo "*************"
                         echo "*  -------  *"
                         echo "* |exitify| *"
                         echo "*  -------  *"
                         echo "*************"
                                  fi


function exitify() {

# exit pacstrapped chroot

                   if [[ "$_debug" == '1' ]]; then
                          echo "**********"
                          echo "*        *"
                          echo "* umount *"
                          echo "*        *"
                          echo "**********"
                                  fi

[[ "$FLAGS_verbose" == "$FLAGS_TRUE" ]] \
  && msg "Unmounting..."

umount /mnt/{boot,home,opt,srv,tmp,usr,var,}

echo "******************************"
echo "*                            *"
echo "* Maybe time for a reboot... *"
echo "*                            *"
echo "******************************"
}




# -----------------------------------------------------------------------------
# go
# -----------------------------------------------------------------------------

# dependency checks
checkify

# disk partitioning
gdiskify

# disk encryption
luksify

# base system
pacstrapify

# ssh
if   [[  "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  ask "Enable SSH? (y/N)" "n"
  if [[  "$_retval" == '0' ]]; then sshify; fi
elif [[  "${_ssh}" == '1' ]]; then
  sshify
fi

# supplementary pkgs
if   [[  "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  ask "Install select pkgs? (y/N)" "n"
  if [[  "$_retval" == '0' ]]; then selectify; fi
elif [[  "${_select}" == '1' ]]; then
  selectify
fi

# install electrum-headless
if   [[  "${_headless}" == '1' ]]; then
  electrumify
fi

# install dotfiles
if   [[  "${FLAGS_interactive}" -eq "${FLAGS_TRUE}" ]]; then
  ask "Install dotfiles? (y/N)" "n"
  if [[  "$_retval" == '0' ]]; then dotify; fi
elif [[  "${_dotfiles}" == '1' ]]; then
  dotify
fi

# exit
exitify
