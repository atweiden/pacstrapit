#!/bin/bash




# -----------------------------------------------------------------------------
# variables: customize
# -----------------------------------------------------------------------------

# partition in which to install OS (caution)
_partition=/dev/sda

# machine's luks devmapper name (arbitrary)
_luks_name=luksroot

# machine's luks passphrase (strong)
_luks_pass=secret

# machine's hostname (arbitrary)
_hostname=luksiso

# machine's processor (intel or other)
_processor=other

# machine's graphics card (intel, nvidia, or radeon)
_graphics=intel

# machine's hard drive (hdd, ssd, or usb)
_disk=hdd

# machine's locale # de_DE
                   # en_AU
                   # en_GB
                   # es_ES
                   # fr_FR
                   # it_IT
                   # ja_JP
                   # nl_NL
                   # zh_CN
                   # zh_TW
                   # etc...
_locale=en_US

# machine's keymap # de
                   # es
                   # fr
                   # it
                   # nl
                   # ru
                   # uk
                   # us
                   # etc...
_keymap=us

# machine's time zone # Africa/Johannesburg  (SAST)
                      # Africa/Lagos         (WAT)
                      # Africa/Lusaka        (CAT)
                      # Africa/Nairobi       (EAT)
                      # America/Denver       (MST)
                      # America/Indianapolis (CST)
                      # America/Los_Angeles  (PST)
                      # America/New_York     (EST)
                      # Asia/Calcutta        (IST)
                      # Asia/Hong_Kong       (HKT)
                      # Asia/Istanbul        (EET)
                      # Asia/Karachi         (PKT)
                      # Asia/Kathmandu       (NPT)
                      # Asia/Phnom_Penh      (ICT)
                      # Asia/Seoul           (KT)
                      # Asia/Shanghai        (CT)
                      # Asia/Tokyo           (JT)
                      # Australia/Perth      (WST)
                      # Australia/Sydney     (EST)
                      # Europe/Berlin        (CET)
                      # Europe/London        (GMT/BST)
                      # Pacific/Honolulu     (HST)
                      # etc...
_timezone=America/Los_Angeles

# root pass (strong)
_root_pass=secret

# user name (arbitrary)
_user_name=live

# user pass (strong)
_user_pass=secret

# ssh on/off (0 or 1)
_ssh=0

# ssh auth (caution)
_electrum="https://raw.github.com/your/keys/master/id_electrum.pub"
#_electrum="https://raw.github.com/atweiden/dotfiles/master/_ssh/id_secp256k1.pub"
_electrum_version="1.9.8"
_user_key="https://raw.github.com/your/keys/master/id_ed25519.pub"
#_user_key="https://raw.github.com/atweiden/dotfiles/master/_ssh/id_ed25519.pub"
_user_key_sig="https://raw.github.com/your/keys/master/id_ed25519.pub.sig"
#_user_key_sig="https://raw.github.com/atweiden/dotfiles/master/_ssh/id_ed25519.pub.sig"
_hosts_allowed="192.168.0."

# select packages on/off (0 or 1)
_select=0
_gui=0

# pkgs
_analysis=0
_clojure=0
_elixir=0
_fonts=0
_games=0
_go=0
_gobi=0
_haskell=0
_ledger=0
_lua=0
_markdown=0
_nginx=0
_nimrod=0
_node=0
_perl=0
_python=0
_ruby=0

# get dotfiles on/off (0 or 1)
_dotfiles=0
_dotfiles_version=0.1.0
# name, email, github for gitconfig
_name="Andy Weidenbaum"
_email="archbaum@gmail.com"
_github="atweiden"
# zipcode for f.lux
_zipcode=97210

# debug on/off (0 or 1)
_debug=1



# -----------------------------------------------------------------------------
# checkify: dependency checks
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                        echo "**************"
                        echo "*  --------  *"
                        echo "* |checkify| *"
                        echo "*  --------  *"
                        echo "**************"
                                  fi


function checkify() {

# depends: root

                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*               *"
                       echo "* depends: root *"
                       echo "*               *"
                       echo "*****************"
                                  fi

if ! [[ "$UID" == '0' ]]; then exit 1; fi

# depends: pacman.conf

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* pacman.conf *"
                        echo "*             *"
                        echo "***************"
                                  fi

sed -i '/^CheckSpace.*/a ILoveCandy'           /etc/pacman.conf
sed -i 's!^#Color!Color!'                      /etc/pacman.conf
sed -i 's!^#TotalDownload!TotalDownload!'      /etc/pacman.conf
if [[ "$(uname -m)" == 'x86_64' ]]; then
  echo '[multilib]'                         >> /etc/pacman.conf
  echo 'Include = /etc/pacman.d/mirrorlist' >> /etc/pacman.conf
fi

# depends: rankmirrors

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* rankmirrors *"
                        echo "*             *"
                        echo "***************"
                                  fi

sed -i 's!^#Server!Server!' /etc/pacman.d/mirrorlist
mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
rankmirrors -n 4 /etc/pacman.d/mirrorlist.bak > /etc/pacman.d/mirrorlist

# depends: expect

                   if [[ "$_debug" == '1' ]]; then
                      echo "*******************"
                      echo "*                 *"
                      echo "* depends: expect *"
                      echo "*                 *"
                      echo "*******************"
                                  fi

if ! [[ -x /usr/bin/expect ]]; then pacman -Sy expect --noconfirm; fi

# depends: iptables

                   if [[ "$_debug" == '1' ]]; then
                     echo "*********************"
                     echo "*                   *"
                     echo "* depends: iptables *"
                     echo "*                   *"
                     echo "*********************"
                                  fi

if ! [[ -x /usr/bin/iptables ]]; then pacman -Sy iptables --noconfirm; fi

# depends: base-devel

                   if [[ "$_debug" == '1' ]]; then
                    echo "***********************"
                    echo "*                     *"
                    echo "* depends: base-devel *"
                    echo "*                     *"
                    echo "***********************"
                                  fi

pacman -Sy --needed base-devel --noconfirm
}




# -----------------------------------------------------------------------------
# gdiskify: create three GPT partitions (no swap) for btrfs + zramswap
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                        echo "**************"
                        echo "*  --------  *"
                        echo "* |gdiskify| *"
                        echo "*  --------  *"
                        echo "**************"
                                  fi


function gdiskify() {

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* spawning gdisk *"
                      echo "*                *"
                      echo "******************"
                                  fi

expect <<EOF
  spawn gdisk ${_partition}
  expect "Command*" {
    send "o\r"
  }
  expect "Proceed*" {
    send "Y\r"
  }
  expect "Command*" {
    send "n\r"
  }
  expect "Partition number*" {
    send "1\r"
  }
  expect "First sector*" {
    send "\r"
  }
  expect "Last sector*" {
    send "+2M\r"
  }
  expect "Hex code or GUID*" {
    send "EF02\r"
  }
  expect "Command*" {
    send "n\r"
  }
  expect "Partition number*" {
    send "2\r"
  }
  expect "First sector*" {
    send "\r"
  }
  expect "Last sector*" {
    send "+256M\r"
  }
  expect "Hex code or GUID*" {
    send "8300\r"
  }
  expect "Command*" {
    send "n\r"
  }
  expect "Partition number*" {
    send "3\r"
  }
  expect "First sector*" {
    send "\r"
  }
  expect "Last sector*" {
    send "\r"
  }
  expect "Hex code or GUID*" {
    send "8300\r"
  }
  expect "Command*" {
    send "w\r"
  }
  expect "Do you want to proceed*" {
    send "Y\r"
  }
  expect eof
EOF
}




# -----------------------------------------------------------------------------
# luksify: create btrfs on luks system (boot, root)
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                         echo "*************"
                         echo "*  -------  *"
                         echo "* |luksify| *"
                         echo "*  -------  *"
                         echo "*************"
                                  fi


function luksify() {

# create unencrypted btrfs filesystem for /boot

                   if [[ "$_debug" == '1' ]]; then
                      echo "*******************"
                      echo "*                 *"
                      echo "* mkfs.btrfs boot *"
                      echo "*                 *"
                      echo "*******************"
                                  fi

mkfs.btrfs ${_partition}2

# load kernel modules required for luks

                   if [[ "$_debug" == '1' ]]; then
                      echo "*******************"
                      echo "*                 *"
                      echo "* dm_mod dm-crypt *"
                      echo "*                 *"
                      echo "*******************"
                                  fi

modprobe dm_mod dm-crypt

# create luks root partition

                   if [[ "$_debug" == '1' ]]; then
              echo "**********************************"
              echo "*                                *"
              echo "* spawning cryptsetup luksFormat *"
              echo "*                                *"
              echo "**********************************"
                                  fi

expect <<EOF
  spawn cryptsetup --cipher aes-xts-plain64 \
                   --key-size 512           \
                   --hash sha512            \
                   --iter-time 5000         \
                   --use-random             \
                   --verify-passphrase      \
                   luksFormat ${_partition}3
  expect "Are you sure*" {
    send "YES\r"
  }
  expect "Enter*" {
    send "${_luks_pass}\r"
  }
  expect "Verify*" {
    send "${_luks_pass}\r"
  }
  expect eof
EOF

# open luks root partition

                   if [[ "$_debug" == '1' ]]; then
               echo "********************************"
               echo "*                              *"
               echo "* spawning cryptsetup luksOpen *"
               echo "*                              *"
               echo "********************************"
                                  fi

expect <<EOF
  spawn cryptsetup luksOpen ${_partition}3 ${_luks_name}
  expect "Enter*" {
    send "${_luks_pass}\r"
  }
  expect eof
EOF

# create btrfs filesystem

                   if [[ "$_debug" == '1' ]]; then
               echo "*********************************"
               echo "*                               *"
               echo "* mkfs.btrfs devmapper luksroot *"
               echo "*                               *"
               echo "*********************************"
                                  fi

mkfs.btrfs /dev/mapper/${_luks_name}

# create and mount main btrfs subvolumes

                   if [[ "$_debug" == '1' ]]; then
           echo "****************************************"
           echo "*                                      *"
           echo "* mounting devmapper luksroot in /mnt2 *"
           echo "*                                      *"
           echo "****************************************"
                                  fi

mkdir -p /mnt2
mount -t btrfs -o rw,noatime,nodiratime,compress=lzo,space_cache /dev/mapper/${_luks_name} /mnt2

                   if [[ "$_debug" == '1' ]]; then
            echo "**************************************"
            echo "*                                    *"
            echo "* creating btrfs subvolumes in /mnt2 *"
            echo "*                                    *"
            echo "**************************************"
                                  fi

cd /mnt2
btrfs subvolume create @
btrfs subvolume create @home
btrfs subvolume create @opt
btrfs subvolume create @srv
btrfs subvolume create @tmp
btrfs subvolume create @usr
btrfs subvolume create @var

                   if [[ "$_debug" == '1' ]]; then
             echo "*************************************"
             echo "*                                   *"
             echo "* mounting btrfs subvolumes in /mnt *"
             echo "*                                   *"
             echo "*************************************"
                                  fi

mount -t btrfs -o rw,noatime,nodiratime,compress=lzo,space_cache,subvol=@ /dev/mapper/${_luks_name} /mnt
for _btrfs_dir in home opt srv tmp usr var; do
  mkdir -p /mnt/${_btrfs_dir} && mount -t btrfs -o rw,noatime,nodiratime,compress=lzo,space_cache,subvol=@${_btrfs_dir} /dev/mapper/${_luks_name} /mnt/${_btrfs_dir}
done

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* unmounting /mnt2 *"
                     echo "*                  *"
                     echo "********************"
                                  fi

cd && umount /mnt2 && rmdir /mnt2 --ignore-fail-on-non-empty

# create and mount boot btrfs subvolume

                   if [[ "$_debug" == '1' ]]; then
           echo "****************************************"
           echo "*                                      *"
           echo "* mounting devmapper luksroot in /mnt3 *"
           echo "*                                      *"
           echo "****************************************"
                                  fi

mkdir -p /mnt3
mount -t btrfs -o rw,noatime,nodiratime,compress=lzo,space_cache,nodev,nosuid,noexec ${_partition}2 /mnt3

                   if [[ "$_debug" == '1' ]]; then
          echo "******************************************"
          echo "*                                        *"
          echo "* creating btrfs boot subvolume in /mnt3 *"
          echo "*                                        *"
          echo "******************************************"
                                  fi

cd /mnt3
btrfs subvolume create @boot

                   if [[ "$_debug" == '1' ]]; then
        echo "**********************************************"
        echo "*                                            *"
        echo "* mounting btrfs boot subvolume in /mnt/boot *"
        echo "*                                            *"
        echo "**********************************************"
                                  fi

cd && umount /mnt3 && rmdir /mnt3 --ignore-fail-on-non-empty
mkdir -p /mnt/boot && mount -t btrfs -o rw,noatime,nodiratime,compress=lzo,space_cache,nodev,nosuid,noexec,subvol=@boot ${_partition}2 /mnt/boot
}




# -----------------------------------------------------------------------------
# zramswapify: start zram swap service
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*  -----------  *"
                       echo "* |zramswapify| *"
                       echo "*  -----------  *"
                       echo "*****************"
                                  fi


function zramswapify() {

# build zramswap aur package

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* install zramswap *"
                     echo "*                  *"
                     echo "********************"
                                  fi

for _pkg in zramswap; do
  mkdir -p ~/.src && cd ~/.src
  rm -rf $_pkg ${_pkg}.tar.gz && mkdir -p $_pkg
  curl -k -O https://aur.archlinux.org/packages/${_pkg:0:2}/$_pkg/$_pkg.tar.gz
  tar -xvzf ${_pkg}.tar.gz --strip 1 -C $_pkg
  cd $_pkg
  makepkg -Acsi --asroot --noconfirm
  cd ..
done

# start zramswap

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* start zramswap *"
                      echo "*                *"
                      echo "******************"
                                  fi

systemctl start zramswap
systemctl enable zramswap
}




# -----------------------------------------------------------------------------
# pacstrapify: initialize and configure system
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*  -----------  *"
                       echo "* |pacstrapify| *"
                       echo "*  -----------  *"
                       echo "*****************"
                                  fi


function pacstrapify() {

# pacstrap packages

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* pacstrap *"
                         echo "*          *"
                         echo "************"
                                  fi

pacstrap /mnt abs             \
              base            \
              base-devel      \
              btrfs-progs     \
              ca-certificates \
              darkhttpd       \
              dhclient        \
              dialog          \
              dnscrypt-proxy  \
              ed              \
              ethtool         \
              expect          \
              gptfdisk        \
              grub-bios       \
              iproute2        \
              iw              \
              kexec-tools     \
              net-tools       \
              openresolv      \
              openssh         \
              python2         \
              sshpass         \
              wget            \
              wireless_tools  \
              wpa_actiond     \
              wpa_supplicant

# install a bootloader

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* genfstab *"
                         echo "*          *"
                         echo "************"
                                  fi

genfstab -U -p /mnt >> /mnt/etc/fstab

# set hostname

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* hostname *"
                         echo "*          *"
                         echo "************"
                                  fi

echo ${_hostname} > /mnt/etc/hostname

# set nameservers

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* DNSCrypt *"
                         echo "*          *"
                         echo "************"
                                  fi

cat >> /mnt/etc/resolv.conf.head <<'EOF'
# DNSCrypt
options edns0
nameserver 127.0.0.1

# OpenDNS nameservers
nameserver 208.67.222.222
nameserver 208.67.220.220

# Google nameservers
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF
arch-chroot /mnt systemctl enable dnscrypt-proxy.service

# set locale

                   if [[ "$_debug" == '1' ]]; then
                          echo "**********"
                          echo "*        *"
                          echo "* locale *"
                          echo "*        *"
                          echo "**********"
                                  fi

sed -i "s!#${_locale}\.UTF-8 UTF-8!${_locale}\.UTF-8 UTF-8!" /mnt/etc/locale.gen
arch-chroot /mnt locale-gen
cat >> /mnt/etc/locale.conf <<EOF
LANG=${_locale}.UTF-8
LC_TIME=${_locale}.UTF-8
EOF

# set console font

                   if [[ "$_debug" == '1' ]]; then
                          echo "**********"
                          echo "*        *"
                          echo "* keymap *"
                          echo "*        *"
                          echo "**********"
                                  fi

cat >> /mnt/etc/vconsole.conf <<EOF
KEYMAP=${_keymap}
FONT=Lat2-Terminus16
FONT_MAP=
EOF

# set timezone

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* timezone *"
                         echo "*          *"
                         echo "************"
                                  fi

arch-chroot /mnt ln -s /usr/share/zoneinfo/${_timezone} /etc/localtime

# set hardware clock

                   if [[ "$_debug" == '1' ]]; then
                          echo "***********"
                          echo "*         *"
                          echo "* hwclock *"
                          echo "*         *"
                          echo "***********"
                                  fi

arch-chroot /mnt hwclock --systohc --utc

# configure pacman.conf

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* pacman.conf *"
                        echo "*             *"
                        echo "***************"
                                  fi

sed -i '/^CheckSpace.*/a ILoveCandy'           /mnt/etc/pacman.conf
sed -i 's!^#Color!Color!'                      /mnt/etc/pacman.conf
sed -i 's!^#TotalDownload!TotalDownload!'      /mnt/etc/pacman.conf
if [[ "$(uname -m)" == 'x86_64' ]]; then
  echo '[multilib]'                         >> /mnt/etc/pacman.conf
  echo 'Include = /etc/pacman.d/mirrorlist' >> /mnt/etc/pacman.conf
fi

# rankmirrors

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* rankmirrors *"
                        echo "*             *"
                        echo "***************"
                                  fi

sed -i 's!^#Server!Server!' /mnt/etc/pacman.d/mirrorlist
mv /mnt/etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist.bak
rankmirrors -n 4 /mnt/etc/pacman.d/mirrorlist.bak > /mnt/etc/pacman.d/mirrorlist

# build pacaur

                   if [[ "$_debug" == '1' ]]; then
                       echo "****************"
                       echo "*              *"
                       echo "* build pacaur *"
                       echo "*              *"
                       echo "****************"
                                  fi

pacman -Sy --needed curl expac pacman perl sudo yajl --noconfirm
for _pkg in cower pacaur; do
  mkdir -p ~/.src && cd ~/.src
  rm -rf $_pkg ${_pkg}.tar.gz && mkdir -p $_pkg
  curl -k -O https://aur.archlinux.org/packages/${_pkg:0:2}/$_pkg/$_pkg.tar.gz
  tar -xvzf ${_pkg}.tar.gz --strip 1 -C $_pkg
  cd $_pkg
  makepkg -Acsi --asroot --noconfirm
  cd ..
done

# install pacaur and zramswap

                   if [[ "$_debug" == '1' ]]; then
                echo "*******************************"
                echo "*                             *"
                echo "* install pacaur and zramswap *"
                echo "*                             *"
                echo "*******************************"
                                  fi

arch-chroot /mnt pacman -Sy --needed curl expac pacman perl sudo yajl --noconfirm
mkdir -p /mnt/root/.src
for _pkg in `find /root/.src -type f -name "*.pkg.tar.xz"`; do
  cp ${_pkg} /mnt/root/.src
done
arch-chroot /mnt find /root/.src -type f -name "*.pkg.tar.xz" -exec pacman -U --noconfirm '{}' \;
arch-chroot /mnt systemctl enable zramswap

# always suspend to RAM

                   if [[ "$_debug" == '1' ]]; then
                    echo "**********************"
                    echo "*                    *"
                    echo "* systemd sleep.conf *"
                    echo "*                    *"
                    echo "**********************"
                                  fi

cat >> /mnt/etc/systemd/sleep.conf <<'EOF'
[Sleep]
SuspendMode=mem
HibernateMode=mem
HybridSleepMode=mem
SuspendState=mem
HibernateState=mem
HybridSleepState=mem
EOF

# set modprobe.conf

                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*               *"
                       echo "* modprobe.conf *"
                       echo "*               *"
                       echo "*****************"
                                  fi

cat >> /mnt/etc/modprobe.d/modprobe.conf <<'EOF'
alias floppy off
blacklist fd0
blacklist floppy
blacklist bcma
blacklist snd_pcsp
blacklist pcspkr
EOF

# set initramfs

                   if [[ "$_debug" == '1' ]]; then
                         echo "*************"
                         echo "*           *"
                         echo "* initramfs *"
                         echo "*           *"
                         echo "*************"
                                  fi

if   [[ "${_disk}" == 'usb' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c"!' /etc/mkinitcpio.conf
elif [[ "${_processor}" == 'intel' && "${_graphics}" == 'intel' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c-intel i915"!' /etc/mkinitcpio.conf
elif [[ "${_processor}" == 'intel' && "${_graphics}" == 'nvidia' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c-intel nouveau"!' /etc/mkinitcpio.conf
elif [[ "${_processor}" == 'intel' && "${_graphics}" == 'radeon' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c-intel radeon"!' /etc/mkinitcpio.conf
elif [[ "${_graphics}" == 'intel' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c i915"!' /etc/mkinitcpio.conf
elif [[ "${_graphics}" == 'nvidia' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c nouveau"!' /etc/mkinitcpio.conf
elif [[ "${_graphics}" == 'radeon' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c radeon"!' /etc/mkinitcpio.conf
fi

if   [[ "${_disk}" == 'usb' ]]; then
  arch-chroot /mnt sed -i 's!^HOOKS.*!HOOKS="base udev block autodetect modconf keyboard keymap encrypt btrfs filesystems shutdown usr"!' /etc/mkinitcpio.conf
else
  arch-chroot /mnt sed -i 's!^HOOKS.*!HOOKS="base udev autodetect modconf block keyboard keymap encrypt btrfs filesystems shutdown usr"!' /etc/mkinitcpio.conf
fi
arch-chroot /mnt sed -i 's!^FILES.*!FILES="/etc/modprobe.d/modprobe.conf"!' /etc/mkinitcpio.conf
arch-chroot /mnt mkinitcpio -p linux

# install grub

                   if [[ "$_debug" == '1' ]]; then
                           echo "********"
                           echo "*      *"
                           echo "* grub *"
                           echo "*      *"
                           echo "********"
                                  fi

_luks_uuid=$(lsblk -f | grep ${_partition##/dev/}3 | awk '{print $3}')
if   [[ "${_disk}" == 'usb' ]]; then
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX=.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@ elevator=noop nomodeset\"!" /etc/default/grub
elif [[ "${_disk}" == 'ssd' && "${_graphics}" == 'radeon' ]]; then
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX=.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@ elevator=noop radeon.dpm=1\"!" /etc/default/grub
elif [[ "${_disk}" == 'ssd' ]]; then
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX=.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@ elevator=noop\"!" /etc/default/grub
elif [[ "${_graphics}" == 'radeon' ]]; then
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX=.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@ radeon.dpm=1\"!" /etc/default/grub
else
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX=.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@\"!" /etc/default/grub
fi
arch-chroot /mnt grub-install --target=i386-pc --recheck ${_partition}
arch-chroot /mnt cp /usr/share/locale/en\@quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

# set root password

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* root passwd *"
                        echo "*             *"
                        echo "***************"
                                  fi

arch-chroot /mnt expect <<EOF
  spawn passwd root
  expect "Enter*" {
    send "${_root_pass}\r"
  }
  expect "Retype*" {
    send "${_root_pass}\r"
  }
  expect eof
EOF

# configure sysctl

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* sysctl.conf *"
                        echo "*             *"
                        echo "***************"
                                  fi

cat > /mnt/etc/sysctl.conf <<'EOF'
# Configuration file for runtime kernel parameters.
# See sysctl.conf(5) for more information.

# Have the CD-ROM close when you use it, and open when you are done.
#dev.cdrom.autoclose = 1
#dev.cdrom.autoeject = 1

# Protection from the SYN flood attack.
net.ipv4.tcp_syncookies = 1

# See evil packets in your logs.
net.ipv4.conf.all.log_martians = 1

# Enables source route verification
net.ipv4.conf.default.rp_filter = 1

# Enable reverse path
net.ipv4.conf.all.rp_filter = 1

# Never accept redirects or source routes (these are only useful for routers).
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.all.accept_source_route = 0

# Disable packet forwarding. Enable for openvpn.
net.ipv4.ip_forward = 1
net.ipv6.conf.default.forwarding = 1
net.ipv6.conf.all.forwarding = 1

# Ignore ICMP broadcasts
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Drop ping packets
net.ipv4.icmp_echo_ignore_all = 1

# Protect against bad error messages
net.ipv4.icmp_ignore_bogus_error_responses = 1

# Tune IPv6
net.ipv6.conf.default.router_solicitations = 0
net.ipv6.conf.default.accept_ra_rtr_pref = 0
net.ipv6.conf.default.accept_ra_pinfo = 0
net.ipv6.conf.default.accept_ra_defrtr = 0
net.ipv6.conf.default.autoconf = 0
net.ipv6.conf.default.dad_transmits = 0
net.ipv6.conf.default.max_addresses = 1

# Increase the open file limit
#fs.file-max = 65535

# Allow for more PIDs (to reduce rollover problems);
# may break some programs 32768
#kernel.pid_max = 65536

# Allow for fast recycling of TIME_WAIT sockets. Default value is 0
# (disabled). Known to cause some issues with hoststated (load balancing
# and fail over) if enabled, should be used with caution.
net.ipv4.tcp_tw_recycle = 1
# Allow for reusing sockets in TIME_WAIT state for new connections when
# it's safe from protocol viewpoint. Default value is 0 (disabled).
# Generally a safer alternative to tcp_tw_recycle.
net.ipv4.tcp_tw_reuse = 1

# Increase TCP max buffer size setable using setsockopt()
#net.ipv4.tcp_rmem = 4096 87380 8388608
#net.ipv4.tcp_wmem = 4096 87380 8388608

# Increase Linux auto tuning TCP buffer limits
# min, default, and max number of bytes to use
# set max to at least 4MB, or higher if you use very high BDP paths
#net.core.rmem_max = 8388608
#net.core.wmem_max = 8388608
#net.core.netdev_max_backlog = 5000
#net.ipv4.tcp_window_scaling = 1

# Tweak the port range used for outgoing connections.
net.ipv4.ip_local_port_range = 2000 65535

# Tweak those values to alter disk syncing and swap behavior.
#vm.vfs_cache_pressure = 100
#vm.laptop_mode = 0
#vm.swappiness = 60

# Tweak how the flow of kernel messages is throttled.
#kernel.printk_ratelimit_burst = 10
#kernel.printk_ratelimit = 5

# Reboot 600 seconds after kernel panic or oops.
#kernel.panic_on_oops = 1
#kernel.panic = 600

# Disable SysRq key to avoid console security issues.
kernel.sysrq = 0
EOF

if [[ "${_disk}" == 'ssd' || "${_disk}" == 'usb' ]]; then
  sed -i 's!^#vm.vfs_cache_pressure.*!vm.vfs_cache_pressure=50!' /mnt/etc/sysctl.conf
  sed -i 's!^#vm.swappiness.*!vm.swappiness=1!' /mnt/etc/sysctl.conf
fi

arch-chroot /mnt sysctl -p

# configure iptables

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* iptables *"
                         echo "*          *"
                         echo "************"
                                  fi

cat > /mnt/etc/iptables.test.rules <<'EOF'
*filter
#| Allow all loopback (lo0) traffic, and drop all traffic to 127/8 that doesn't use lo0
-A INPUT -i lo -j ACCEPT
-A INPUT ! -i lo -d 127.0.0.0/8 -j REJECT
#| Allow all established inbound connections
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
#| Allow all outbound traffic
-A OUTPUT -j ACCEPT
#| Allow HTTP and HTTPS connections
-A INPUT -p tcp --dport 80 -j ACCEPT
-A INPUT -p tcp --dport 443 -j ACCEPT
#| Allow SSH connections
-A INPUT -p tcp -m conntrack --ctstate NEW --dport 22 -j ACCEPT
#| Allow ZeroMQ connections
-A INPUT -p tcp -m conntrack --ctstate NEW --dport 4505 -j ACCEPT
-A INPUT -p tcp -m conntrack --ctstate NEW --dport 4506 -j ACCEPT
#| Allow NTP connections
-I INPUT -p udp --dport 123 -j ACCEPT
-I OUTPUT -p udp --sport 123 -j ACCEPT
#| Reject pings
-I INPUT -j DROP -p icmp --icmp-type echo-request
#| Drop ident server
-A INPUT -p tcp --dport ident -j DROP
#| Log iptables denied calls
-A INPUT -m limit --limit 15/minute -j LOG --log-prefix "[IPT]Dropped input: " --log-level 7
-A OUTPUT -m limit --limit 15/minute -j LOG --log-prefix "[IPT]Dropped output: " --log-level 7
#| Reject all other inbound - default deny unless explicitly allowed policy
-A INPUT -j REJECT
-A FORWARD -j REJECT
COMMIT
EOF
iptables-save > /mnt/etc/iptables/iptables.up.rules
iptables-restore < /mnt/etc/iptables/iptables.test.rules
iptables-save > /mnt/etc/iptables/iptables.rules
arch-chroot /mnt systemctl enable iptables

# create user

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* create user *"
                        echo "*             *"
                        echo "***************"
                                  fi

arch-chroot /mnt useradd -m -g users -G audio,games,log,lp,network,optical,power,scanner,storage,video,wheel -s /bin/bash ${_user_name}

# set user password

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* user passwd *"
                        echo "*             *"
                        echo "***************"
                                  fi

arch-chroot /mnt expect <<EOF
  spawn passwd ${_user_name}
  expect "Enter*" {
    send "${_user_pass}\r"
  }
  expect "Retype*" {
    send "${_user_pass}\r"
  }
  expect eof
EOF

# set systemd services

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* systemd services *"
                     echo "*                  *"
                     echo "********************"
                                  fi

arch-chroot /mnt systemctl enable cronie
}




# -----------------------------------------------------------------------------
# sshify: setup ssh
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*  ------  *"
                         echo "* |sshify| *"
                         echo "*  ------  *"
                         echo "************"
                                  fi


function sshify() {

# configure sshd

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* sshd_config *"
                        echo "*             *"
                        echo "***************"
                                  fi

sed -i 's!^#Port.*!Port 22!'                                                          /mnt/etc/ssh/sshd_config
sed -i 's!^#Protocol.*!Protocol 2!'                                                   /mnt/etc/ssh/sshd_config
sed -i 's!^#HostKey /etc/ssh/ssh_host_rsa_key!HostKey /etc/ssh/ssh_host_rsa_key!'     /mnt/etc/ssh/sshd_config
sed -i 's!^#HostKey /etc/ssh/ssh_host_dsa_key!HostKey /etc/ssh/ssh_host_dsa_key!'     /mnt/etc/ssh/sshd_config
sed -i 's!^#HostKey /etc/ssh/ssh_host_ecdsa_key!HostKey /etc/ssh/ssh_host_ecdsa_key!' /mnt/etc/ssh/sshd_config
sed -i 's!^#SyslogFacility.*!SyslogFacility AUTH!'                                    /mnt/etc/ssh/sshd_config
sed -i 's!^#LogLevel.*!LogLevel ERROR!'                                               /mnt/etc/ssh/sshd_config
sed -i 's!^#LoginGraceTime.*!LoginGraceTime 2m!'                                      /mnt/etc/ssh/sshd_config
sed -i 's!^#PermitRootLogin.*!PermitRootLogin no!'                                    /mnt/etc/ssh/sshd_config
sed -i 's!^#StrictModes.*!StrictModes yes!'                                           /mnt/etc/ssh/sshd_config
sed -i 's!^#PasswordAuthentication.*!PasswordAuthentication no!'                      /mnt/etc/ssh/sshd_config
sed -i 's!^UsePAM yes!UsePAM no!'                                                     /mnt/etc/ssh/sshd_config
sed -i 's!^#X11Forwarding.*!X11Forwarding no!'                                        /mnt/etc/ssh/sshd_config
sed -i 's!^#X11DisplayOffset.*!X11DisplayOffset 10!'                                  /mnt/etc/ssh/sshd_config
sed -i 's!^#PrintLastLog.*!PrintLastLog yes!'                                         /mnt/etc/ssh/sshd_config
sed -i 's!^#TCPKeepAlive.*!TCPKeepAlive yes!'                                         /mnt/etc/ssh/sshd_config
sed -i 's!^#UseDNS.*!UseDNS no!'                                                      /mnt/etc/ssh/sshd_config
echo "AllowUsers ${_user_name}" >>                                                    /mnt/etc/ssh/sshd_config
echo "sshd: ${_hosts_allowed}" >                                                      /mnt/etc/hosts.allow
arch-chroot /mnt systemctl enable sshd

# import keys

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* import keys *"
                        echo "*             *"
                        echo "***************"
                                  fi

curl -k "${_electrum}"     -o ~/electrum.pub
curl -k "${_user_key}"     -o ~/sshkey.pub
curl -k "${_user_key_sig}" -o ~/sshkey.pub.sig

# verify with electrum

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* verify keys *"
                        echo "*             *"
                        echo "***************"
                                  fi

pacman -Sy --needed python2-ecdsa --noconfirm
for _pkg in python2-pbkdf2 python2-slowaes; do
  mkdir -p ~/.src && cd ~/.src
  rm -rf $_pkg ${_pkg}.tar.gz && mkdir -p $_pkg
  curl -k -O https://aur.archlinux.org/packages/${_pkg:0:2}/$_pkg/$_pkg.tar.gz
  tar -xvzf ${_pkg}.tar.gz --strip 1 -C $_pkg
  cd $_pkg
  makepkg -Acsi --asroot --noconfirm
  cd ..
done
cd && curl -k https://codeload.github.com/spesmilo/{electrum}/{tar.gz}/{${_electrum_version}} -o "#1-#3.#2"
tar xvzf electrum-${_electrum_version}.tar.gz
cd electrum-${_electrum_version}
find . -type f -print0 | xargs -0 sed -i 's#/usr/bin/python#/usr/bin/python2#g'
find . -type f -print0 | xargs -0 sed -i 's#/usr/bin/env python#/usr/bin/env python2#g'
_electrum_verified=$(./electrum verifymessage \
                       "$(cat ~/electrum.pub)" \
                       "$(cat ~/sshkey.pub.sig)" \
                       "$(cat ~/sshkey.pub)")

# setup authorized_keys

                   if [[ "$_debug" == '1' ]]; then
                      echo "*******************"
                      echo "*                 *"
                      echo "* authorized_keys *"
                      echo "*                 *"
                      echo "*******************"
                                  fi

if [[ "${_electrum_verified}" == 'true' ]]; then
  mkdir -p /mnt/home/${_user_name}/.ssh
  chmod 700 /mnt/home/${_user_name}/.ssh
  cat ~/sshkey.pub > /mnt/home/${_user_name}/.ssh/authorized_keys
  chmod 600 /mnt/home/${_user_name}/.ssh/authorized_keys
  arch-chroot /mnt chown -R ${_user_name}:users /mnt/home/${_user_name}/.ssh
else
  echo "Electrum verification code rejected."
  exit 1
fi
}




# -----------------------------------------------------------------------------
# selectify: select packages to install
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*  ---------  *"
                        echo "* |selectify| *"
                        echo "*  ---------  *"
                        echo "***************"
                                  fi


function selectify() {

# select
declare _pkgs=('ack'
               'ansible'
               'arch-install-scripts'
               'arch-wiki-markdown-git'
               'archey'
               'avahi'
               'bash-completion'
               'bluez'
               'bluez-firmware'
               'colordiff'
               'create_ap'
               'cronwhip'
               'devtools'
               'downgrade'
               'dvd+rw-tools'
               'easytether-rpm'
               'elinks'
               'geturl-git'
               'git'
               'gnupg1'
               'haveged'
               'imgurbash'
               'ipw2100-fw'
               'ipw2200-fw'
               'jq'
               'libfaketime'
               'libusb-compat'
               'lrzip'
               'lynx'
               'macchanger'
               'mercurial'
               'mlocate'
               'mosh'
               'ncurses'
               'openvpn'
               'p7zip'
               'pacmatic'
               'pkgcacheclean'
               'pkgtools'
               'proxychains'
               'pwsafe'
               'python2-pbp'
               'quixand'
               'reptyr'
               'rfkill'
               'sfk'
               'socat'
               'sshuttle'
               'ssss'
               'subrepo'
               'the_silver_searcher'
               'tmux'
               'tor'
               'torsocks'
               'tree'
               'ttf-monaco'
               'unzip'
               'usbmuxd'
               'usb_modeswitch'
               'youtube-dl'
               'zsh'
               'zsh-syntax-highlighting')

if [[ "${_gui}" == '1' ]]; then
  declare _vimpkgs=('gvim')
else
  declare _vimpkgs=('vim-full')
fi
_vimpkgs+=('arch-wiki-docs-clean'
           'ctags'
           'vim-align'
           'vim-guicolorscheme'
           'vim-indent-object'
           'vim-nerdtree'
           'vim-surround'
           'vim-systemd'
           'vim-ultisnips'
           'vim-misc-xolox'
           'vim-cecutil'
           'vim-vis-git'
           'vim-ack'
           'vim-colors-liquidcarbon'
           'vim-colors-mayansmoke'
           'vim-colors-neverland-git'
           'vim-colors-sorcerer'
           'vim-csapprox'
           'vim-delimitmate'
           'vim-dragvisuals-git'
           'vim-easydir-git'
           'vim-easymotion'
           'vim-easytags'
           'vim-file-line-git'
           'vim-gnupg'
           'vim-gtk-syntax-git'
           'vim-gundo'
           'vim-haml-git'
           'vim-hugefile-git'
           'vim-less-git'
           'vim-lightline-git'
           'vim-lustyexplorer'
           'vim-matchit'
           'vim-multiple-cursors-git'
           'vim-mustache-git'
           'vim-nerdcommenter'
           'vim-numbered-git'
           'vim-openssl'
           'vim-pipe2eval-git'
           'vim-repeat'
           'vim-taboo-git'
           'vim-tabular-git'
           'vim-tagbar'
           'vim-tmux-navigator-git'
           'vim-trailing-whitespace'
           'vim-visual-star-search-git'
           'vim-yankring'
           'pnfo-git')

if [[ "${_perl}" == '1' ]]; then
  _pkgs+=('perlbrew'
          'perl-cpanplus-dist-arch'
          'perl-ev'
          'perl-io-socket-ip'
          'perl-io-socket-ssl'
          'perl-mojolicious'
          'perlconsole')
  _vimpkgs+=('vim-after-syntax-perl-git'
             'vim-mojo-git'
             'vim-perl'
             'vim-perl-support')
fi

if [[ "${_python}" == '1' ]]; then
  _pkgs+=('python'
          'python-jedi'
          'python-pip'
          'python-setuptools'
          'python-virtualenv'
          'python-virtualenv-clone'
          'python-virtualenvwrapper'
          'python2'
          'python2-jedi'
          'python2-pip'
          'python2-setuptools'
          'python2-virtualenv'
          'python2-virtualenv-clone')
  _vimpkgs+=('vim-htmljinja'
             'vim-jedi'
             'vim-jinja'
             'vim-kivy-git'
             'vim-python'
             'vim-virtualenv')
fi

if [[ "${_clojure}" == '1' ]]; then
  _pkgs+=('jdk7-openjdk'
          'ca-certificates-java'
          'clojure'
          'leiningen'
          'leiningen-completions'
          'nailgun')
  _vimpkgs+=('vim-clojure-sql-git'
             'vim-clojure-static-git'
             'vim-fireplace-git'
             'vim-rainbow-parentheses-git')
fi

if [[ "${_node}" == '1' ]]; then
  _pkgs+=('nodejs'
          'nodejs-bower'
          'nodejs-grasp'
          'nodejs-grunt-cli'
          'nodejs-hexo'
          'nodejs-jade'
          'nodejs-stylus')
  _vimpkgs+=('vim-jade-git'
             'vim-javascript-git'
             'vim-jquery'
             'vim-nodejs-errorformat-git'
             'vim-nodejs-git'
             'vim-stylus-git')
fi

if [[ "${_elixir}" == '1' ]]; then
  if [[ "${_gui}" == '1' ]]; then
    _pkgs+=('erlang')
  else
    _pkgs+=('erlang-nox')
  fi
  _pkgs+=('erlang-docs'
          'elixir')
  _vimpkgs+=('vim-elixir-git'
             'vimerl-git'
             'vim-mix-git')
fi

if [[ "${_ruby}" == '1' ]]; then
  _pkgs+=('ruby'
          'ruby-build'
          'ruby-bundler'
          'ruby-docs'
          'rbenv'
          'rbenv-default-gems'
          'rbenv-each-git'
          'rbenv-vars')
  _vimpkgs+=('vim-rbenv-git'
             'vim-ruby-git')
fi

if [[ "${_markdown}" == '1' ]]; then
  _pkgs+=('markdown')
  _vimpkgs+=('vim-markdown')
fi

if [[ "${_nimrod}" == '1' ]]; then
  _pkgs+=('nimrod')
  _vimpkgs+=('vim-nimrod-git')
fi

if [[ "${_go}" == '1' ]]; then
  _pkgs+=('go')
fi

if [[ "${_lua}" == '1' ]]; then
  _pkgs+=('lua')
  _vimpkgs+=('vim-lua-ftplugin-git'
             'vim-lua-inspect-git'
             'vim-lua-support')
fi

if [[ "${_haskell}" == '1' ]]; then
  _pkgs+=('cabal-install'
          'ghc')
  _vimpkgs+=('vim-haskell')
fi

if [[ "${_ledger}" == '1' ]]; then
  _pkgs+=('ledger-git'
          'ledger.py-git')
fi

if [[ "${_nginx}" == '1' ]]; then
  _pkgs+=('nginx')
  _vimpkgs+=('vim-nginx')
fi

if [[ "${_analysis}" == '1' ]]; then
  _pkgs+=('glances'
          'htop'
          'iftop'
          'iotop'
          'ltrace'
          'moreutils'
          'multitail'
          'nethogs'
          'ngrep'
          'ntop'
          'strace'
          'traceroute')
fi

if [[ "${_gui}" == '1' ]]; then
  _pkgs+=('abiword'
          'alsa-firmware'
          'alsa-lib'
          'alsa-oss'
          'alsa-plugins'
          'alsa-utils'
          'anki'
          'ascrubber-git'
          'batti'
          'bleachbit'
          'chromium'
          'conky'
          'deluge'
          'desktop-file-utils'
          'dmenu-xft'
          'ekiga'
          'evince'
          'feh'
          'firefox'
          'flashplugin'
          'gajim'
          'gajim-plugin-otr-git'
          'galculator'
          'gcolor2'
          'gimp'
          'gmrun'
          'gnumeric'
          'gparted'
          'grsync'
          'gsettings-desktop-schemas'
          'gsimplecal'
          'gsm'
          'gstreamer'
          'gstreamer0.10'
          'gstreamer0.10-bad'
          'gstreamer0.10-bad-plugins'
          'gstreamer0.10-base'
          'gstreamer0.10-base-plugins'
          'gstreamer0.10-ffmpeg'
          'gstreamer0.10-good'
          'gstreamer0.10-good-plugins'
          'gstreamer0.10-python'
          'gstreamer0.10-ugly'
          'gstreamer0.10-ugly-plugins'
          'gstreamermm'
          'gtk2'
          'gtk3'
          'gucharmap'
          'hicolor-icon-theme'
          'hotshots'
          'hunspell'
          'hwinfo'
          'hyphen'
          'i2p'
          'icedtea-web-java7'
          'ifuse'
          'imagemagick'
          'imlib2'
          'inkscape'
          'inputproto'
          'intltool'
          'iso-codes'
          'jhead'
          'jp2a'
          'jre7-openjdk'
          'jre7-openjdk-headless'
          'keepassx'
          'leafpad'
          'libgl'
          'link-grammar'
          'lxappearance'
          'lxinput'
          'lxmed'
          'lxmenu-data'
          'lxrandr'
          'lxsplit'
          'lxterminal'
          'media-player-info'
          'menu-cache'
          'mesa'
          'mesa-demos'
          'mime-types'
          'mimeo'
          'nitrogen'
          'notification-daemon'
          'numlockx'
          'obconf'
          'obkey-git'
          'obmenu'
          'obmenu-generator'
          'onboard'
          'openbox'
          'openbox-menu'
          'openbox-themes'
          'pcmanfm'
          'perl-image-exiftool'
          'pidgin-otr'
          'printproto'
          'pulseaudio'
          'qrencode'
          'randrproto'
          'recode'
          'renderproto'
          'screencastor'
          'scrot'
          'shared-color-profiles'
          'shared-mime-info'
          'shotwell'
          'source-highlight'
          'startup-notification'
          'statler-ui-theme'
          'steghide'
          'tcplay'
          'thunderbird'
          'thunderbird-enigmail-bin'
          'tint2'
          'tiv'
          'tor-browser-en'
          'torchat'
          'truecrypt'
          'urxvt-perls'
          'videoproto'
          'vlc'
          'volumeicon'
          'x11-ssh-askpass'
          'xautolock'
          'xautomation'
          'xchat'
          'xchat-otr'
          'xclip'
          'xdg-utils'
          'xdotool'
          'xextproto'
          'xf86-input-evdev'
          'xf86-input-joystick'
          'xf86-input-keyboard'
          'xf86-input-mouse'
          'xf86-input-synaptics'
          'xf86-input-vmmouse'
          'xf86-input-void'
          'xf86-video-ark'
          'xf86-video-ast'
          'xf86-video-ati'
          'xf86-video-cirrus'
          'xf86-video-dummy'
          'xf86-video-fbdev'
          'xf86-video-glint'
          'xf86-video-i128'
          'xf86-video-intel'
          'xf86-video-mach64'
          'xf86-video-mga'
          'xf86-video-modesetting'
          'xf86-video-neomagic'
          'xf86-video-nouveau'
          'xf86-video-nv'
          'xf86-video-openchrome'
          'xf86-video-r128'
          'xf86-video-savage'
          'xf86-video-siliconmotion'
          'xf86-video-sis'
          'xf86-video-tdfx'
          'xf86-video-trident'
          'xf86-video-v4l'
          'xf86-video-vesa'
          'xf86-video-vmware'
          'xf86-video-voodoo'
          'xf86dgaproto'
          'xf86vidmodeproto'
          'xflux'
          'xineramaproto'
          'xkeyboard-config'
          'xlockmore'
          'xorg'
          'xorg-bdftopcf'
          'xorg-docs'
          'xorg-font-util'
          'xorg-font-utils'
          'xorg-fonts-100dpi'
          'xorg-fonts-75dpi'
          'xorg-fonts-alias'
          'xorg-fonts-cyrillic'
          'xorg-fonts-encodings'
          'xorg-fonts-misc'
          'xorg-fonts-type1'
          'xorg-iceauth'
          'xorg-luit'
          'xorg-mkfontdir'
          'xorg-mkfontscale'
          'xorg-server'
          'xorg-server-common'
          'xorg-server-devel'
          'xorg-server-utils'
          'xorg-server-xdmx'
          'xorg-server-xephyr'
          'xorg-server-xnest'
          'xorg-server-xvfb'
          'xorg-sessreg'
          'xorg-setxkbmap'
          'xorg-smproxy'
          'xorg-twm'
          'xorg-utils'
          'xorg-x11perf'
          'xorg-xauth'
          'xorg-xbacklight'
          'xorg-xcalc'
          'xorg-xclock'
          'xorg-xcmsdb'
          'xorg-xcursorgen'
          'xorg-xdm'
          'xorg-xdpyinfo'
          'xorg-xdriinfo'
          'xorg-xev'
          'xorg-xgamma'
          'xorg-xhost'
          'xorg-xinit'
          'xorg-xinput'
          'xorg-xkbcomp'
          'xorg-xkbevd'
          'xorg-xkbutils'
          'xorg-xkill'
          'xorg-xlsatoms'
          'xorg-xlsclients'
          'xorg-xlsfonts'
          'xorg-xmessage'
          'xorg-xmodmap'
          'xorg-xpr'
          'xorg-xprop'
          'xorg-xrandr'
          'xorg-xrdb'
          'xorg-xrefresh'
          'xorg-xset'
          'xorg-xsetroot'
          'xorg-xvinfo'
          'xorg-xwd'
          'xorg-xwininfo'
          'xorg-xwud'
          'xproto'
          'xterm'
          'xxkb'
          'zenity'
          'zulucrypt')
fi

if [[ "${_games}" == '1' ]]; then
  _pkgs+=('minecraft'
          'papersplease'
          'radegast'
          'steam')
fi

if [[ "${_gobi}" == '1' ]]; then
  _pkgs+=('gobi-loader'
          'gobi-firmware'
          'mobile-broadband-provider-info'
          'modemmanager')
fi

if [[ "${_fonts}" == '1' ]]; then
  _pkgs+=('gsfonts'
          'opendesktop-fonts'
          'ttf-arphic-ukai'
          'ttf-arphic-uming'
          'ttf-baekmuk'
          'ttf-bitstream-vera'
          'ttf-dejavu'
          'ttf-freebanglafont'
          'ttf-gentium'
          'ttf-google-fonts-git'
          'ttf-hanazono'
          'ttf-hannom'
          'ttf-indic-otf'
          'ttf-junicode'
          'ttf-khmer'
          'ttf-linux-libertine'
          'ttf-mph-2b-damase'
          'ttf-sazanami'
          'ttf-symbola'
          'ttf-tibetan-machine'
          'ttf-tlwg'
          'ttf-ubraille'
          'wqy-bitmapfont'
          'wqy-microhei'
          'wqy-zenhei')
fi

if [[ "${_gui}" == '1' ]]; then
  declare _bitpkgs=('electrum'
                    'python2-zbar')
else
  electrum_headless
fi

# install

                   if [[ "$_debug" == '1' ]]; then
                          echo "***********"
                          echo "*         *"
                          echo "* install *"
                          echo "*         *"
                          echo "***********"
                                  fi

arch-chroot /mnt pacaur -Sy --needed --asroot ${_pkgs[@]} ${_vimpkgs[@]} ${_bitpkgs[@]} --noedit --noconfirm
}




# -----------------------------------------------------------------------------
# electrum_headless: install electrum-headless in chroot
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                    echo "***********************"
                    echo "*  -----------------  *"
                    echo "* |electrum_headless| *"
                    echo "*  -----------------  *"
                    echo "***********************"
                                  fi


function electrum_headless() {

# install electrum-headless deps in chroot

                   if [[ "$_debug" == '1' ]]; then
                  echo "**************************"
                  echo "*                        *"
                  echo "* electrum-headless deps *"
                  echo "*                        *"
                  echo "**************************"
                                  fi

arch-chroot /mnt pacman -Sy --needed python2-ecdsa --noconfirm
for _pkg in python2-pbkdf2 python2-slowaes; do
  mkdir -p /root/.src/electrum && cd /root/.src/electrum
  rm -rf $_pkg ${_pkg}.tar.gz && mkdir -p $_pkg
  curl -k -O https://aur.archlinux.org/packages/${_pkg:0:2}/$_pkg/$_pkg.tar.gz
  tar -xvzf ${_pkg}.tar.gz --strip 1 -C $_pkg
  cd $_pkg
  makepkg -Acsi --asroot --noconfirm
  cd ..
done
mkdir -p /mnt/root/.src/electrum
for _pkg in `find /root/.src/electrum -type f -name "*.pkg.tar.xz"`; do
  cp ${_pkg} /mnt/root/.src/electrum
done
arch-chroot /mnt find /root/.src/electrum -type f -name "*.pkg.tar.xz" -exec pacman -U --noconfirm '{}' \;

# place electrum-headless in chroot

                   if [[ "$_debug" == '1' ]]; then
                  echo "***************************"
                  echo "*                         *"
                  echo "* place electrum-headless *"
                  echo "*                         *"
                  echo "***************************"
                                  fi

cd && curl -k https://codeload.github.com/spesmilo/{electrum}/{tar.gz}/{${_electrum_version}} -o "#1-#3.#2"
tar xvzf electrum-${_electrum_version}.tar.gz
cd electrum-${_electrum_version}
find . -type f -print0 | xargs -0 sed -i 's#/usr/bin/python#/usr/bin/python2#g'
find . -type f -print0 | xargs -0 sed -i 's#/usr/bin/env python#/usr/bin/env python2#g'
cd && mv electrum-${_electrum_version} /mnt/home/${_user_name}
}



# -----------------------------------------------------------------------------
# dotify: install dotfiles
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*  ------  *"
                         echo "* |dotify| *"
                         echo "*  ------  *"
                         echo "************"
                                  fi


function dotify() {

# downloading

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* downloading *"
                        echo "*             *"
                        echo "***************"
                                  fi

mkdir -p /mnt/${_user_name}/.src && cd /mnt/${_user_name}/.src
curl -k https://codeload.github.com/atweiden/{dotfiles}/{tar.gz}/{${_dotfiles_version}} -o /mnt/${_user_name}/.src/"#1-#3.#2"
tar -xvzf dotfiles-${_dotfiles_version}
cd dotfiles-${_dotfiles_version}

# adjusting dotfile config parameters

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* configuring *"
                        echo "*             *"
                        echo "***************"
                                  fi

sed -i "s#\$HOME#/home/${_user_name}#"         bootstrap.sh
sed -i "s#^name.*#name=\"${_name}\"#"          bootstrap.sh
sed -i "s#^email.*#email=\"${_email}\"#"       bootstrap.sh
sed -i "s#^github.*#github=\"${_github}\"#"    bootstrap.sh
sed -i "s#^zipcode.*#zipcode=\"${_zipcode}\"#" bootstrap.sh

# running bootstrap

                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*               *"
                       echo "* bootstrapping *"
                       echo "*               *"
                       echo "*****************"
                                  fi

./bootstrap.sh

# configuring X11

                   if [[ "$_debug" == '1' ]]; then
                            echo "*******"
                            echo "*     *"
                            echo "* X11 *"
                            echo "*     *"
                            echo "*******"
                                  fi

if [[ "${_gui}" == '1' ]]; then
  mv /mnt/etc/X11/xorg.conf.d /mnt/etc/X11/xorg.conf.d.bak
  cp -R etc/X11/xorg.conf.d /mnt/etc/X11/xorg.conf.d
fi

# configuring openvpn

                   if [[ "$_debug" == '1' ]]; then
                          echo "***********"
                          echo "*         *"
                          echo "* openvpn *"
                          echo "*         *"
                          echo "***********"
                                  fi

mkdir -p /etc/openvpn
cp etc/openvpn/update-resolv-conf /mnt/etc/openvpn

# adding systemd service

                   if [[ "$_debug" == '1' ]]; then
                     echo "*********************"
                     echo "*                   *"
                     echo "* kill-ssh-sessions *"
                     echo "*                   *"
                     echo "*********************"
                                  fi

cp usr/lib/systemd/scripts/kill-ssh-sessions /mnt/usr/lib/systemd/scripts
cp usr/lib/systemd/system/kill-ssh-sessions.service /mnt/usr/lib/systemd/system
arch-chroot /mnt systemctl enable kill-ssh-sessions.service

# fixing permissions

                   if [[ "$_debug" == '1' ]]; then
                    echo "**********************"
                    echo "*                    *"
                    echo "* fixing permissions *"
                    echo "*                    *"
                    echo "**********************"
                                  fi

arch-chroot /mnt chown -R ${_user_name}:users /home/${_user_name}
}




# -----------------------------------------------------------------------------
# debugify: debug
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                        echo "**************"
                        echo "*  --------  *"
                        echo "* |debugify| *"
                        echo "*  --------  *"
                        echo "**************"
                                  fi


function debugify() {

# debug

                   if [[ "$_debug" == '1' ]]; then
                           echo "*********"
                           echo "*       *"
                           echo "* debug *"
                           echo "*       *"
                           echo "*********"
                                  fi

echo "cat /boot/grub/grub.cfg:"
arch-chroot /mnt cat /boot/grub/grub.cfg
echo "cat /etc/fstab:"
arch-chroot /mnt cat /etc/fstab
echo "cat /etc/hostname:"
arch-chroot /mnt cat /etc/hostname
echo "cat /etc/locale.conf:"
arch-chroot /mnt cat /etc/locale.conf
echo "cat /etc/locale.gen:"
arch-chroot /mnt cat /etc/locale.gen
echo "cat /etc/mkinitcpio.conf:"
arch-chroot /mnt cat /etc/mkinitcpio.conf
echo "cat /etc/modprobe.d/modprobe.conf:"
arch-chroot /mnt cat /etc/modprobe.d/modprobe.conf
echo "cat /etc/resolv.conf.head:"
arch-chroot /mnt cat /etc/resolv.conf.head
echo "cat /etc/sysctl.conf:"
arch-chroot /mnt cat /etc/sysctl.conf
echo "cat /etc/systemd/sleep.conf:"
arch-chroot /mnt cat /etc/systemd/sleep.conf
echo "cat /etc/vconsole.conf:"
arch-chroot /mnt cat /etc/vconsole.conf
echo "ls -laiF /home/${_user_name}:"
arch-chroot /mnt ls -laiF /home/${_user_name}
echo "systemctl list-unit-files:"
arch-chroot /mnt systemctl list-unit-files | perl -p -e 'print while (<>)'
}




# -----------------------------------------------------------------------------
# exitify: exit pacstrapit
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                         echo "*************"
                         echo "*  -------  *"
                         echo "* |exitify| *"
                         echo "*  -------  *"
                         echo "*************"
                                  fi


function exitify() {

# exit pacstrapped chroot

                   if [[ "$_debug" == '1' ]]; then
                          echo "**********"
                          echo "*        *"
                          echo "* umount *"
                          echo "*        *"
                          echo "**********"
                                  fi

umount /mnt/{boot,home,opt,srv,tmp,usr,var,}

echo "******************************"
echo "*                            *"
echo "* Maybe time for a reboot... *"
echo "*                            *"
echo "******************************"
}




# -----------------------------------------------------------------------------
# go
# -----------------------------------------------------------------------------

checkify
gdiskify
luksify
zramswapify
pacstrapify
if [[ "${_ssh}" == '1' ]]; then sshify; fi
if [[ "${_select}" == '1' ]]; then selectify; fi
if [[ "${_dotfiles}" == '1' ]]; then dotify; fi
if [[ "${_debug}" == '1' ]]; then debugify; fi
exitify
